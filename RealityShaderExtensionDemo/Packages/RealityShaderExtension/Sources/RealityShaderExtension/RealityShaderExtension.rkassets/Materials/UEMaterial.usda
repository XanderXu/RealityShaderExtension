#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Cube_SphereMask", "Sphere_Fresnel", "Cube_Panner", "Cube_GeneratedBand", "Cube_GenaratedOffsetBands", "Cube_NormalFromHeightmap", "Cube_NormalFromHeightmapChaos", "Cube_RadialGradientExponential", "Cube_DiamondGradient", "Cube_SmoothCurve", "Cube_ValueStep", "DefaultMaterial", "Cube_FuzzyShading"]
    def Cube "Cube_GeneratedBand" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["GeneratedBandMaterial", "CameraDepthFadeMaterial"]
        rel material:binding = </Root/Cube_GeneratedBand/GeneratedBandMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "GeneratedBandMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "Convert", "GeneratedBand"]
            token outputs:mtlx:surface.connect = </Root/Cube_GeneratedBand/GeneratedBandMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_GeneratedBand/GeneratedBandMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_GeneratedBand/GeneratedBandMaterial/GeneratedBand.outputs:SphereMask_Oneminus_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-104.53516, 145.57812)
                int ui:nodegraph:node:stackingOrder = 4
            }

            def "GeneratedBand" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/GeneratedBand>
            )
            {
                float inputs:Compare
                bool inputs:Direction_Switch = 0
                float inputs:Offset
                float inputs:Sharpness
                float inputs:Width
                float2 ui:nodegraph:node:pos = (-436.76257, 46.12561)
                int ui:nodegraph:node:stackingOrder = 1003
            }
        }
    }

    def Cube "Cube_SphereMask" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_SphereMask/SphereMaskMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.9, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "SphereMaskMaterial" (
            references = None
        )
        {
            token outputs:mtlx:surface.connect = </Root/Cube_SphereMask/SphereMaskMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_SphereMask/SphereMaskMaterial/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (33.410156, 125.859375)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 41

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_SphereMask/SphereMaskMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-195.33984, 86.453125)
                int ui:nodegraph:node:stackingOrder = 43
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_SphereMask/SphereMaskMaterial/SphereMask.outputs:Oneminus_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-527.3511, 94.09546)
                int ui:nodegraph:node:stackingOrder = 794
            }

            def "SphereMask" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/SphereMask>
            )
            {
                float2 ui:nodegraph:node:pos = (-736.486, 52.621155)
                int ui:nodegraph:node:stackingOrder = 792
            }
        }
    }

    def Sphere "Sphere_Fresnel" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Sphere_Fresnel/FresnelMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.6, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "FresnelMaterial"
        {
            reorder nameChildren = ["UsdPreviewSurface", "Cube", "Sphere", "PreviewSurface", "Fresnel", "Convert"]
            token outputs:mtlx:surface.connect = </Root/Sphere_Fresnel/FresnelMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Sphere_Fresnel/FresnelMaterial/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Sphere_Fresnel/FresnelMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Sphere_Fresnel/FresnelMaterial/Fresnel.outputs:Exp_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-486.51172, 136.22266)
                int ui:nodegraph:node:stackingOrder = 716
            }

            def "Fresnel" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/Fresnel>
            )
            {
                float2 ui:nodegraph:node:pos = (-687.99097, 100.69348)
                int ui:nodegraph:node:stackingOrder = 724
            }
        }
    }

    def Cube "Cube_NormalFromHeightmap" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_NormalFromHeightmap/NormalFromHeightmapMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (216.5, 104.5)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.6, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "NormalFromHeightmapMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "NormalFromHeightmap", "Convert"]
            token outputs:mtlx:surface.connect = </Root/Cube_NormalFromHeightmap/NormalFromHeightmapMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_NormalFromHeightmap/NormalFromHeightmapMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "NormalFromHeightmap" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/NormalFromHeightmap>
            )
            {
                asset inputs:HeightMap
                float4 inputs:HeightMapChannelSelector
                float inputs:HeightMapUVOffset
                float inputs:NormalMapIntensity
                float2 ui:nodegraph:node:pos = (-389.16022, 52.171867)
                int ui:nodegraph:node:stackingOrder = 1074
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_NormalFromHeightmap/NormalFromHeightmapMaterial/NormalFromHeightmap.outputs:Normal>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-117.97266, 126.11719)
                int ui:nodegraph:node:stackingOrder = 1063
            }
        }
    }

    def Cube "Cube_NormalFromHeightmapChaos" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_NormalFromHeightmapChaos/NormalFromHeightmapChaosMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (236.5, 124.5)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.9, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "NormalFromHeightmapChaosMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "NormalFromHeightmap", "Convert"]
            token outputs:mtlx:surface.connect = </Root/Cube_NormalFromHeightmapChaos/NormalFromHeightmapChaosMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-55.95511, 84.83594)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_NormalFromHeightmapChaos/NormalFromHeightmapChaosMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_NormalFromHeightmapChaos/NormalFromHeightmapChaosMaterial/NormalFromHeightmapChaos_1.outputs:Normal>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-117.97266, 126.11719)
                int ui:nodegraph:node:stackingOrder = 1063
            }

            def "NormalFromHeightmapChaos_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/NormalFromHeightmapChaos>
            )
            {
                float2 ui:nodegraph:node:pos = (-428.77545, -16.023438)
                int ui:nodegraph:node:stackingOrder = 1076
            }
        }
    }

    def Cube "Cube_Panner" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_Panner/PannerMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (256.5, 144.5)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.3, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "PannerMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/Cube_Panner/PannerMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_Panner/PannerMaterial/Image.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "Panner_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/Panner>
            )
            {
                float2 inputs:Speed = (0.1, 0)
                float inputs:Time.connect = </Root/Cube_Panner/PannerMaterial/Time.outputs:out>
                float2 ui:nodegraph:node:pos = (-447.95312, 69.29297)
                int ui:nodegraph:node:stackingOrder = 10
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file = @Texture/DefaultTexture1.png@
                string inputs:filtertype
                float2 inputs:texcoord.connect = </Root/Cube_Panner/PannerMaterial/Panner_1.outputs:Result>
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-163.51562, 18.792969)
                int ui:nodegraph:node:stackingOrder = 9
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-694.66016, 99.42578)
                int ui:nodegraph:node:stackingOrder = 11
            }
        }
    }

    def Cube "Cube_RadialGradientExponential" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_RadialGradientExponential/RadialGradientExponentialMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.9, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "RadialGradientExponentialMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/Cube_RadialGradientExponential/RadialGradientExponentialMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_RadialGradientExponential/RadialGradientExponentialMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "RadialGradientExponential_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/RadialGradientExponential>
            )
            {
                float2 inputs:CenterPosition
                float inputs:Density
                bool inputs:InvertDensity = 0
                float inputs:Radius
                float2 inputs:UVs
                float2 ui:nodegraph:node:pos = (-367.42188, 42.652344)
                int ui:nodegraph:node:stackingOrder = 2519
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_RadialGradientExponential/RadialGradientExponentialMaterial/RadialGradientExponential_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-153.19922, 110.984375)
                int ui:nodegraph:node:stackingOrder = 2513
            }
        }
    }

    def Cube "Cube_DiamondGradient" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_DiamondGradient/DiamondGradientMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.6, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DiamondGradientMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/Cube_DiamondGradient/DiamondGradientMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_DiamondGradient/DiamondGradientMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "DiamondGradient_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/DiamondGradient>
            )
            {
                float inputs:Falloff = 3 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-567.7656, 385.57812)
                            int stackingOrderInSubgraph = 9
                        }
                    }
                )
                float2 ui:nodegraph:node:pos = (-353.77344, 47.859375)
                int ui:nodegraph:node:stackingOrder = 2510
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Result", "inputs:Falloff"]
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_DiamondGradient/DiamondGradientMaterial/DiamondGradient_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-127.96875, 70.55078)
                int ui:nodegraph:node:stackingOrder = 2513
            }
        }
    }

    def Cube "Cube_GenaratedOffsetBands" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_GenaratedOffsetBands/GeneratedOffsetBandsMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-67.74805, 91.16016)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "GeneratedOffsetBandsMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "Convert", "GeneratedOffsetBands"]
            token outputs:mtlx:surface.connect = </Root/Cube_GenaratedOffsetBands/GeneratedOffsetBandsMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_GenaratedOffsetBands/GeneratedOffsetBandsMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_GenaratedOffsetBands/GeneratedOffsetBandsMaterial/GeneratedOffsetBands.outputs:SphereMask_Oneminus_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-153.44531, 86.88672)
                int ui:nodegraph:node:stackingOrder = 3
            }

            def "GeneratedOffsetBands" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/GeneratedOffsetBands>
            )
            {
                float inputs:Bonds
                float inputs:Compare
                bool inputs:Direction_Switch = 0
                float inputs:Offset
                float inputs:Sharpness
                float inputs:Width
                float2 ui:nodegraph:node:pos = (-463.08173, 17.763577)
                int ui:nodegraph:node:stackingOrder = 981
            }
        }
    }

    def Cube "Cube_SmoothCurve" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_SmoothCurve/SmoothCurveMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (276.5, 164.5)
        int ui:nodegraph:node:stackingOrder = 4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.3, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "SmoothCurveMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "SmoothCurve_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_SmoothCurve/SmoothCurveMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_SmoothCurve/SmoothCurveMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "SmoothCurve_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/SmoothCurve>
            )
            {
                float inputs:Tangent0
                float inputs:Tangent1
                float inputs:X.connect = </Root/Cube_SmoothCurve/SmoothCurveMaterial/Separate2.outputs:outx>
                float2 ui:nodegraph:node:pos = (-317.6519, 66.50875)
                int ui:nodegraph:node:stackingOrder = 13
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_SmoothCurve/SmoothCurveMaterial/SmoothCurve_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }

            def Shader "TextureCoordinates"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-778.0831, 18.288382)
                int ui:nodegraph:node:stackingOrder = 29
            }

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/Cube_SmoothCurve/SmoothCurveMaterial/TextureCoordinates.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (-514.2664, 76.84342)
                int ui:nodegraph:node:stackingOrder = 27
            }
        }
    }

    def Cube "Cube_ValueStep" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_ValueStep/ValueStepMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (296.5, 184.5)
        int ui:nodegraph:node:stackingOrder = 5
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "ValueStepMaterial"
        {
            reorder nameChildren = ["ValueStep_1", "PreviewSurface", "SmoothCurve_1", "Convert", "TextureCoordinates", "Separate2"]
            token outputs:mtlx:surface.connect = </Root/Cube_ValueStep/ValueStepMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_ValueStep/ValueStepMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_ValueStep/ValueStepMaterial/ValueStep_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }

            def Shader "TextureCoordinates"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-778.0831, 18.288382)
                int ui:nodegraph:node:stackingOrder = 29
            }

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/Cube_ValueStep/ValueStepMaterial/TextureCoordinates.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (-666.8641, 121.3317)
                int ui:nodegraph:node:stackingOrder = 2590
            }

            def "ValueStep_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/ValueStep>
            )
            {
                float inputs:Gradient.connect = </Root/Cube_ValueStep/ValueStepMaterial/Multiply.outputs:out>
                float inputs:MaskOffsetValue
                float inputs:NumberBeforeWhiteResult
                float2 ui:nodegraph:node:pos = (-334.0885, 71.73537)
                int ui:nodegraph:node:stackingOrder = 2588
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Cube_ValueStep/ValueStepMaterial/Separate2.outputs:outy>
                float inputs:in2 = 3
                float outputs:out
                float2 ui:nodegraph:node:pos = (-504.01562, 127.55859)
                int ui:nodegraph:node:stackingOrder = 2593
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
            }
        }
    }

    def Cube "Cube_FuzzyShading" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["FuzzyShadingMaterial", "GeneratedOffsetBandsMaterial"]
        rel material:binding = </Root/Cube_FuzzyShading/FuzzyShadingMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-47.748047, 111.16016)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "FuzzyShadingMaterial"
        {
            reorder nameChildren = ["DefaultSurfaceShader", "PreviewSurface", "Image", "Convert", "ConstantFloat3", "ConstantFloat", "FuzzyShading_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal.connect = None
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Texture/T_Base_Tile_DetailNormal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1207.4015, 202.20868)
                int ui:nodegraph:node:stackingOrder = 3513
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/FuzzyShading_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-442.0578, 64.154816)
                int ui:nodegraph:node:stackingOrder = 3509
            }

            def Shader "ConstantFloat3"
            {
                uniform token info:id = "ND_constant_vector3"
                float3 inputs:value = (0.04, 0.75, 0.13)
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1149.083, -40.74417)
                int ui:nodegraph:node:stackingOrder = 2960
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 18
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1120.4014, 32.526936)
                int ui:nodegraph:node:stackingOrder = 3252
            }

            def "FuzzyShading_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/FuzzyShading>
            )
            {
                float3 inputs:BaseColor.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/ConstantFloat3.outputs:out>
                float inputs:CoreDarkness
                float inputs:EdgeBrightness.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/ConstantFloat.outputs:out>
                float3 inputs:Normal.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/Image.outputs:out>
                float inputs:Power
                float2 ui:nodegraph:node:pos = (-679.9905, 17.102192)
                int ui:nodegraph:node:stackingOrder = 3511
            }
        }
    }
}

