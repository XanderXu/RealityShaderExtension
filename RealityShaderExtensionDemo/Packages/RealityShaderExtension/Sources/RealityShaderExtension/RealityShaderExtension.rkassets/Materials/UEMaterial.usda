#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Cube_SphereMask", "Sphere_Fresnel", "Cube_Panner", "Cube_GeneratedBand", "Cube_GenaratedOffsetBands", "Cube_NormalFromHeightmap", "Cube_NormalFromHeightmapChaos", "Cube_RadialGradientExponential", "Cube_DiamondGradient", "Cube_SmoothCurve", "Cube_ValueStep", "Cube_Desaturation", "Cube_FuzzyShading", "Cube_FuzzyShadingGrass", "Cube__3ColorBlend", "Cube_CheapContrast", "Cube_CheapContrast_RGB", "Cube_SCurve", "Cube__3PointLevels", "Cube_HueShift", "Cube_SmoothThreshold", "Cube_SoftOpacity", "Cube_VectorToRadialValue", "Cube_LinearSine", "Cube_ViewAlignedReflection", "Cube_CylindricalUVs", "Cube_HueShift_1", "Cube_SmoothThreshold_1"]
    def Cube "Cube_GeneratedBand" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["GeneratedBandMaterial", "CameraDepthFadeMaterial"]
        rel material:binding = </Root/Cube_GeneratedBand/GeneratedBandMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "GeneratedBandMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "Convert", "GeneratedBand"]
            token outputs:mtlx:surface.connect = </Root/Cube_GeneratedBand/GeneratedBandMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_GeneratedBand/GeneratedBandMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_GeneratedBand/GeneratedBandMaterial/GeneratedBand.outputs:SphereMask_Oneminus_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-104.53516, 145.57812)
                int ui:nodegraph:node:stackingOrder = 4
            }

            def "GeneratedBand" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/GeneratedBand>
            )
            {
                float inputs:Compare
                bool inputs:Direction_Switch = 0
                float inputs:Offset
                float inputs:Sharpness
                float inputs:Width
                float2 ui:nodegraph:node:pos = (-436.76257, 46.12561)
                int ui:nodegraph:node:stackingOrder = 1003
            }
        }
    }

    def Cube "Cube_SphereMask" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_SphereMask/SphereMaskMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.9, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "SphereMaskMaterial" (
            references = None
        )
        {
            token outputs:mtlx:surface.connect = </Root/Cube_SphereMask/SphereMaskMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_SphereMask/SphereMaskMaterial/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (33.410156, 125.859375)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 41

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_SphereMask/SphereMaskMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-195.33984, 86.453125)
                int ui:nodegraph:node:stackingOrder = 43
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_SphereMask/SphereMaskMaterial/SphereMask.outputs:Oneminus_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-527.3511, 94.09546)
                int ui:nodegraph:node:stackingOrder = 794
            }

            def "SphereMask" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/SphereMask>
            )
            {
                float2 ui:nodegraph:node:pos = (-736.486, 52.621155)
                int ui:nodegraph:node:stackingOrder = 792
            }
        }
    }

    def Sphere "Sphere_Fresnel" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Sphere_Fresnel/FresnelMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.6, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "FresnelMaterial"
        {
            reorder nameChildren = ["UsdPreviewSurface", "Cube", "Sphere", "PreviewSurface", "Fresnel", "Convert"]
            token outputs:mtlx:surface.connect = </Root/Sphere_Fresnel/FresnelMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Sphere_Fresnel/FresnelMaterial/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Sphere_Fresnel/FresnelMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Sphere_Fresnel/FresnelMaterial/Fresnel.outputs:Exp_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-486.51172, 136.22266)
                int ui:nodegraph:node:stackingOrder = 716
            }

            def "Fresnel" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/Fresnel>
            )
            {
                float2 ui:nodegraph:node:pos = (-687.99097, 100.69348)
                int ui:nodegraph:node:stackingOrder = 724
            }
        }
    }

    def Cube "Cube_NormalFromHeightmap" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_NormalFromHeightmap/NormalFromHeightmapMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (216.5, 104.5)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.6, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "NormalFromHeightmapMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "NormalFromHeightmap", "Convert"]
            token outputs:mtlx:surface.connect = </Root/Cube_NormalFromHeightmap/NormalFromHeightmapMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_NormalFromHeightmap/NormalFromHeightmapMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "NormalFromHeightmap" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/NormalFromHeightmap>
            )
            {
                asset inputs:HeightMap
                float4 inputs:HeightMapChannelSelector
                float inputs:HeightMapUVOffset
                float inputs:NormalMapIntensity
                float2 ui:nodegraph:node:pos = (-389.16022, 52.171867)
                int ui:nodegraph:node:stackingOrder = 1074
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_NormalFromHeightmap/NormalFromHeightmapMaterial/NormalFromHeightmap.outputs:Normal>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-117.97266, 126.11719)
                int ui:nodegraph:node:stackingOrder = 1063
            }
        }
    }

    def Cube "Cube_NormalFromHeightmapChaos" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_NormalFromHeightmapChaos/NormalFromHeightmapChaosMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (236.5, 124.5)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.9, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "NormalFromHeightmapChaosMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "NormalFromHeightmap", "Convert"]
            token outputs:mtlx:surface.connect = </Root/Cube_NormalFromHeightmapChaos/NormalFromHeightmapChaosMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-55.95511, 84.83594)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_NormalFromHeightmapChaos/NormalFromHeightmapChaosMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_NormalFromHeightmapChaos/NormalFromHeightmapChaosMaterial/NormalFromHeightmapChaos_1.outputs:Normal>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-117.97266, 126.11719)
                int ui:nodegraph:node:stackingOrder = 1063
            }

            def "NormalFromHeightmapChaos_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/NormalFromHeightmapChaos>
            )
            {
                float2 ui:nodegraph:node:pos = (-428.77545, -16.023438)
                int ui:nodegraph:node:stackingOrder = 1076
            }
        }
    }

    def Cube "Cube_Panner" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_Panner/PannerMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (256.5, 144.5)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.3, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "PannerMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/Cube_Panner/PannerMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_Panner/PannerMaterial/Image.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "Panner_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/Panner>
            )
            {
                float2 inputs:Speed = (0.1, 0)
                float inputs:Time.connect = </Root/Cube_Panner/PannerMaterial/Time.outputs:out>
                float2 ui:nodegraph:node:pos = (-447.95312, 69.29297)
                int ui:nodegraph:node:stackingOrder = 10
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file = @Texture/DefaultTexture1.png@
                string inputs:filtertype
                float2 inputs:texcoord.connect = </Root/Cube_Panner/PannerMaterial/Panner_1.outputs:Result>
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-163.51562, 18.792969)
                int ui:nodegraph:node:stackingOrder = 9
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-694.66016, 99.42578)
                int ui:nodegraph:node:stackingOrder = 11
            }
        }
    }

    def Cube "Cube_RadialGradientExponential" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_RadialGradientExponential/RadialGradientExponentialMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.9, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "RadialGradientExponentialMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/Cube_RadialGradientExponential/RadialGradientExponentialMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_RadialGradientExponential/RadialGradientExponentialMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "RadialGradientExponential_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/RadialGradientExponential>
            )
            {
                float2 inputs:CenterPosition
                float inputs:Density
                bool inputs:InvertDensity = 0
                float inputs:Radius
                float2 inputs:UVs
                float2 ui:nodegraph:node:pos = (-367.42188, 42.652344)
                int ui:nodegraph:node:stackingOrder = 2519
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_RadialGradientExponential/RadialGradientExponentialMaterial/RadialGradientExponential_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-153.19922, 110.984375)
                int ui:nodegraph:node:stackingOrder = 2513
            }
        }
    }

    def Cube "Cube_DiamondGradient" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_DiamondGradient/DiamondGradientMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.6, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DiamondGradientMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/Cube_DiamondGradient/DiamondGradientMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_DiamondGradient/DiamondGradientMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "DiamondGradient_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/DiamondGradient>
            )
            {
                float inputs:Falloff = 3 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-567.7656, 385.57812)
                            int stackingOrderInSubgraph = 9
                        }
                    }
                )
                float2 ui:nodegraph:node:pos = (-353.77344, 47.859375)
                int ui:nodegraph:node:stackingOrder = 2510
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Result", "inputs:Falloff"]
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_DiamondGradient/DiamondGradientMaterial/DiamondGradient_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-127.96875, 70.55078)
                int ui:nodegraph:node:stackingOrder = 2513
            }
        }
    }

    def Cube "Cube_GenaratedOffsetBands" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_GenaratedOffsetBands/GeneratedOffsetBandsMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-67.74805, 91.16016)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "GeneratedOffsetBandsMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "Convert", "GeneratedOffsetBands"]
            token outputs:mtlx:surface.connect = </Root/Cube_GenaratedOffsetBands/GeneratedOffsetBandsMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_GenaratedOffsetBands/GeneratedOffsetBandsMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_GenaratedOffsetBands/GeneratedOffsetBandsMaterial/GeneratedOffsetBands.outputs:SphereMask_Oneminus_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-153.44531, 86.88672)
                int ui:nodegraph:node:stackingOrder = 3
            }

            def "GeneratedOffsetBands" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/GeneratedOffsetBands>
            )
            {
                float inputs:Bonds
                float inputs:Compare
                bool inputs:Direction_Switch = 0
                float inputs:Offset
                float inputs:Sharpness
                float inputs:Width
                float2 ui:nodegraph:node:pos = (-463.08173, 17.763577)
                int ui:nodegraph:node:stackingOrder = 981
            }
        }
    }

    def Cube "Cube_SmoothCurve" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_SmoothCurve/SmoothCurveMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (276.5, 164.5)
        int ui:nodegraph:node:stackingOrder = 4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.3, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "SmoothCurveMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "SmoothCurve_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_SmoothCurve/SmoothCurveMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_SmoothCurve/SmoothCurveMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "SmoothCurve_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/SmoothCurve>
            )
            {
                float inputs:Tangent0
                float inputs:Tangent1
                float inputs:X.connect = </Root/Cube_SmoothCurve/SmoothCurveMaterial/Separate2.outputs:outx>
                float2 ui:nodegraph:node:pos = (-317.6519, 66.50875)
                int ui:nodegraph:node:stackingOrder = 13
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_SmoothCurve/SmoothCurveMaterial/SmoothCurve_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }

            def Shader "TextureCoordinates"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-778.0831, 18.288382)
                int ui:nodegraph:node:stackingOrder = 29
            }

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/Cube_SmoothCurve/SmoothCurveMaterial/TextureCoordinates.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (-514.2664, 76.84342)
                int ui:nodegraph:node:stackingOrder = 27
            }
        }
    }

    def Cube "Cube_ValueStep" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_ValueStep/ValueStepMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (296.5, 184.5)
        int ui:nodegraph:node:stackingOrder = 5
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "ValueStepMaterial"
        {
            reorder nameChildren = ["ValueStep_1", "PreviewSurface", "SmoothCurve_1", "Convert", "TextureCoordinates", "Separate2"]
            token outputs:mtlx:surface.connect = </Root/Cube_ValueStep/ValueStepMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_ValueStep/ValueStepMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_ValueStep/ValueStepMaterial/ValueStep_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }

            def Shader "TextureCoordinates"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-778.0831, 18.288382)
                int ui:nodegraph:node:stackingOrder = 29
            }

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/Cube_ValueStep/ValueStepMaterial/TextureCoordinates.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (-666.8641, 121.3317)
                int ui:nodegraph:node:stackingOrder = 2590
            }

            def "ValueStep_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/ValueStep>
            )
            {
                float inputs:Gradient.connect = </Root/Cube_ValueStep/ValueStepMaterial/Multiply.outputs:out>
                float inputs:MaskOffsetValue
                float inputs:NumberBeforeWhiteResult
                float2 ui:nodegraph:node:pos = (-334.0885, 71.73537)
                int ui:nodegraph:node:stackingOrder = 2588
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Cube_ValueStep/ValueStepMaterial/Separate2.outputs:outy>
                float inputs:in2 = 3
                float outputs:out
                float2 ui:nodegraph:node:pos = (-504.01562, 127.55859)
                int ui:nodegraph:node:stackingOrder = 2593
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
            }
        }
    }

    def Cube "Cube_FuzzyShading" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["FuzzyShadingMaterial", "GeneratedOffsetBandsMaterial"]
        rel material:binding = </Root/Cube_FuzzyShading/FuzzyShadingMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-47.748047, 111.16016)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.6, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "FuzzyShadingMaterial"
        {
            reorder nameChildren = ["DefaultSurfaceShader", "PreviewSurface", "Image", "Convert", "ConstantFloat3", "ConstantFloat", "FuzzyShading_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal.connect = None
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Texture/T_Base_Tile_DetailNormal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1207.4015, 202.20868)
                int ui:nodegraph:node:stackingOrder = 3513
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/FuzzyShading_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-442.0578, 64.154816)
                int ui:nodegraph:node:stackingOrder = 3509
            }

            def Shader "ConstantFloat3"
            {
                uniform token info:id = "ND_constant_vector3"
                float3 inputs:value = (0.04, 0.75, 0.13)
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1149.083, -40.74417)
                int ui:nodegraph:node:stackingOrder = 2960
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 18
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1120.4014, 32.526936)
                int ui:nodegraph:node:stackingOrder = 3252
            }

            def "FuzzyShading_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/FuzzyShading>
            )
            {
                float3 inputs:BaseColor.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/ConstantFloat3.outputs:out>
                float inputs:CoreDarkness
                float inputs:EdgeBrightness.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/ConstantFloat.outputs:out>
                float3 inputs:Normal.connect = </Root/Cube_FuzzyShading/FuzzyShadingMaterial/Image.outputs:out>
                float inputs:Power
                float2 ui:nodegraph:node:pos = (-679.9905, 17.102192)
                int ui:nodegraph:node:stackingOrder = 3511
            }
        }
    }

    def Cube "Cube_FuzzyShadingGrass" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["FuzzyShadingGrassMaterial", "GeneratedOffsetBandsMaterial"]
        rel material:binding = </Root/Cube_FuzzyShadingGrass/FuzzyShadingGrassMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-27.748047, 131.16016)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.9, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "FuzzyShadingGrassMaterial"
        {
            reorder nameChildren = ["DefaultSurfaceShader", "PreviewSurface", "Image", "Convert", "ConstantFloat3", "ConstantFloat", "FuzzyShading_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_FuzzyShadingGrass/FuzzyShadingGrassMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_FuzzyShadingGrass/FuzzyShadingGrassMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal.connect = None
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Texture/T_Base_Tile_DetailNormal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1164.2168, 308.5834)
                int ui:nodegraph:node:stackingOrder = 3520
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_FuzzyShadingGrass/FuzzyShadingGrassMaterial/FuzzyShadingGrass_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-442.0578, 64.154816)
                int ui:nodegraph:node:stackingOrder = 3509
            }

            def Shader "ConstantFloat3"
            {
                uniform token info:id = "ND_constant_vector3"
                float3 inputs:value = (0.04, 0.75, 0.13)
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1149.083, -40.74417)
                int ui:nodegraph:node:stackingOrder = 2960
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 18
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1120.4014, 32.526936)
                int ui:nodegraph:node:stackingOrder = 3252
            }

            def "FuzzyShadingGrass_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/FuzzyShadingGrass>
            )
            {
                float3 inputs:Diffuse.connect = </Root/Cube_FuzzyShadingGrass/FuzzyShadingGrassMaterial/ConstantFloat3.outputs:out>
                float inputs:EdgeBrightness.connect = </Root/Cube_FuzzyShadingGrass/FuzzyShadingGrassMaterial/ConstantFloat.outputs:out>
                float3 inputs:Normal.connect = </Root/Cube_FuzzyShadingGrass/FuzzyShadingGrassMaterial/Image.outputs:out>
                float2 ui:nodegraph:node:pos = (-694.7645, 63.378887)
                int ui:nodegraph:node:stackingOrder = 3518
            }
        }
    }

    def Cube "Cube_Desaturation" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_Desaturation/DesaturationMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (316.5, 204.5)
        int ui:nodegraph:node:stackingOrder = 6
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3, 0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DesaturationMaterial"
        {
            reorder nameChildren = ["ValueStep_1", "PreviewSurface", "SmoothCurve_1", "Convert", "TextureCoordinates", "Separate2"]
            token outputs:mtlx:surface.connect = </Root/Cube_Desaturation/DesaturationMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_Desaturation/DesaturationMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "Desaturation_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/Desaturation>
            )
            {
                float3 inputs:Color.connect = </Root/Cube_Desaturation/DesaturationMaterial/ConstantFloat3.outputs:out>
                float inputs:Fraction.connect = </Root/Cube_Desaturation/DesaturationMaterial/ConstantFloat.outputs:out>
                float2 ui:nodegraph:node:pos = (-390.95956, 75.99576)
                int ui:nodegraph:node:stackingOrder = 781
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_Desaturation/DesaturationMaterial/Desaturation_1.outputs:Mix_1_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }

            def Shader "ConstantFloat3"
            {
                uniform token info:id = "ND_constant_vector3"
                float3 inputs:value = (1, 0, 0)
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-657.3594, 52.773438)
                int ui:nodegraph:node:stackingOrder = 783
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0
                float inputs:value.connect = </Root/Cube_Desaturation/DesaturationMaterial/Fractional.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-620.8594, 152.52344)
                int ui:nodegraph:node:stackingOrder = 803
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1044.0742, 159.6289)
                int ui:nodegraph:node:stackingOrder = 802
            }

            def Shader "Fractional"
            {
                uniform token info:id = "ND_realitykit_fractional_float"
                float inputs:in.connect = </Root/Cube_Desaturation/DesaturationMaterial/Time.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-855.9453, 151.67188)
                int ui:nodegraph:node:stackingOrder = 800
            }
        }
    }

    def Cube "Cube__3ColorBlend" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube__3ColorBlend/_3ColorBlendMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.9, 0.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "_3ColorBlendMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/Cube__3ColorBlend/_3ColorBlendMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube__3ColorBlend/_3ColorBlendMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "_3ColorBlend_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/_3ColorBlend>
            )
            {
                float3 inputs:A = (1, 0, 0)
                float inputs:Alpha.connect = </Root/Cube__3ColorBlend/_3ColorBlendMaterial/Separate2.outputs:outx>
                float2 ui:nodegraph:node:pos = (-368.6875, 53.03711)
                int ui:nodegraph:node:stackingOrder = 2530
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube__3ColorBlend/_3ColorBlendMaterial/_3ColorBlend_1.outputs:Out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-153.19922, 110.984375)
                int ui:nodegraph:node:stackingOrder = 2513
            }

            def Shader "TextureCoordinates"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-770.8633, 20.773438)
                int ui:nodegraph:node:stackingOrder = 2531
            }

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/Cube__3ColorBlend/_3ColorBlendMaterial/TextureCoordinates.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (-563.15234, 46.972656)
                int ui:nodegraph:node:stackingOrder = 2534
            }
        }
    }

    def Cube "Cube_CheapContrast" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_CheapContrast/CheapContrastMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (60, 60)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.6, 0.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "CheapContrastMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/Cube_CheapContrast/CheapContrastMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_CheapContrast/CheapContrastMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_CheapContrast/CheapContrastMaterial/CheapContrast_1.outputs:Out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-127.96875, 70.55078)
                int ui:nodegraph:node:stackingOrder = 2513
            }

            def "CheapContrast_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/CheapContrast>
            )
            {
                float inputs:Contrast = 1
                float inputs:In.connect = </Root/Cube_CheapContrast/CheapContrastMaterial/Separate2.outputs:outx>
                float2 ui:nodegraph:node:pos = (-336.66406, 41.085938)
                int ui:nodegraph:node:stackingOrder = 2532
            }

            def Shader "TextureCoordinates"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-670.53125, 46.78125)
                int ui:nodegraph:node:stackingOrder = 2533
            }

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/Cube_CheapContrast/CheapContrastMaterial/TextureCoordinates.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (-501.8789, 136.42578)
                int ui:nodegraph:node:stackingOrder = 2536
            }
        }
    }

    def Cube "Cube_CheapContrast_RGB" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_CheapContrast_RGB/CheapContrast_RGBMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (296.5, 184.5)
        int ui:nodegraph:node:stackingOrder = 5
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.3, 0.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "CheapContrast_RGBMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "SmoothCurve_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_CheapContrast_RGB/CheapContrast_RGBMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_CheapContrast_RGB/CheapContrast_RGBMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "CheapContrast_RGB_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/CheapContrast_RGB>
            )
            {
                float inputs:Contrast = 0.9
                float3 inputs:In.connect = </Root/Cube_CheapContrast_RGB/CheapContrast_RGBMaterial/Image.outputs:out>
                float2 ui:nodegraph:node:pos = (-318.90485, 51.42544)
                int ui:nodegraph:node:stackingOrder = 40
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_CheapContrast_RGB/CheapContrast_RGBMaterial/CheapContrast_RGB_1.outputs:Out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Texture/number.jpeg@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-648.8047, 52.117188)
                int ui:nodegraph:node:stackingOrder = 37
            }
        }
    }

    def Cube "Cube_SCurve" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_SCurve/SCurveMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (316.5, 204.5)
        int ui:nodegraph:node:stackingOrder = 6
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "SCurveMaterial"
        {
            reorder nameChildren = ["ValueStep_1", "Multiply", "PreviewSurface", "Convert", "TextureCoordinates", "Separate2", "SCurve_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_SCurve/SCurveMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_SCurve/SCurveMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "SCurve_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/SCurve>
            )
            {
                float3 inputs:In.connect = </Root/Cube_SCurve/SCurveMaterial/Image.outputs:out>
                float inputs:Power = 100
                float2 ui:nodegraph:node:pos = (-332.58984, 60.996094)
                int ui:nodegraph:node:stackingOrder = 2603
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_SCurve/SCurveMaterial/SCurve_1.outputs:Out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Texture/number.jpeg@
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-638.9219, 56.222656)
                int ui:nodegraph:node:stackingOrder = 2599
            }
        }
    }

    def Cube "Cube__3PointLevels" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube__3PointLevels/_3PointLevelsMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (336.5, 224.5)
        int ui:nodegraph:node:stackingOrder = 7
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3, 0.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "_3PointLevelsMaterial"
        {
            reorder nameChildren = ["ValueStep_1", "PreviewSurface", "SmoothCurve_1", "Convert", "TextureCoordinates", "Separate2"]
            token outputs:mtlx:surface.connect = </Root/Cube__3PointLevels/_3PointLevelsMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube__3PointLevels/_3PointLevelsMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "_3PointLevels_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/_3PointLevels>
            )
            {
                bool inputs:DefineInterpolationCurve = 0
                float inputs:InterpolationPower = 200
                bool inputs:InvertInterpolationPower = 0
                float inputs:MiddlePoint = 1 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-1088.4297, 125.83594)
                            int stackingOrderInSubgraph = 47
                        }
                    }
                )
                float inputs:NewBlackValue = 0
                float inputs:NewMiddleValue = 0.8 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (416.40967, -249.3687)
                            int stackingOrderInSubgraph = 336
                        }
                    }
                )
                float inputs:NewWhiteValue = 1
                float inputs:Texture.connect = </Root/Cube__3PointLevels/_3PointLevelsMaterial/Separate3.outputs:outx>
                float2 ui:nodegraph:node:pos = (-394.06177, 48.577557)
                int ui:nodegraph:node:stackingOrder = 879
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube__3PointLevels/_3PointLevelsMaterial/_3PointLevels_1.outputs:Out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Texture/DefaultTexture1.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-940.1143, 37.37768)
                int ui:nodegraph:node:stackingOrder = 868
            }

            def Shader "Separate3"
            {
                uniform token info:id = "ND_separate3_vector3"
                float3 inputs:in.connect = </Root/Cube__3PointLevels/_3PointLevelsMaterial/Image.outputs:out>
                float outputs:outx
                float outputs:outy
                float outputs:outz
                float2 ui:nodegraph:node:pos = (-643.2888, 170.88634)
                int ui:nodegraph:node:stackingOrder = 831
            }
        }
    }

    def Cube "Cube_HueShift" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["HueShiftMaterial", "GeneratedOffsetBandsMaterial"]
        rel material:binding = </Root/Cube_HueShift/HueShiftMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-27.748047, 131.16016)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.6, 0.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "HueShiftMaterial"
        {
            reorder nameChildren = ["DefaultSurfaceShader", "PreviewSurface", "Image", "Convert", "ConstantFloat3", "ConstantFloat", "FuzzyShading_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_HueShift/HueShiftMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_HueShift/HueShiftMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal.connect = None
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Texture/DefaultTexture1.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1120.8373, 121.451866)
                int ui:nodegraph:node:stackingOrder = 3539
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_HueShift/HueShiftMaterial/HueShift_1.outputs:Out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-442.0578, 64.154816)
                int ui:nodegraph:node:stackingOrder = 3509
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0
                float outputs:out
                float2 ui:nodegraph:node:pos = (-966.15643, -36.61507)
                int ui:nodegraph:node:stackingOrder = 3520
            }

            def "HueShift_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/HueShift>
            )
            {
                float inputs:HueShiftPercentage = 0.5
                float3 inputs:Texture.connect = </Root/Cube_HueShift/HueShiftMaterial/Image.outputs:out>
                float2 ui:nodegraph:node:pos = (-726.5622, 41.36231)
                int ui:nodegraph:node:stackingOrder = 3555
            }
        }
    }

    def Cube "Cube_SmoothThreshold" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["SmoothThresholdMaterial", "GeneratedOffsetBandsMaterial"]
        rel material:binding = </Root/Cube_SmoothThreshold/SmoothThresholdMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-7.748047, 151.16016)
        int ui:nodegraph:node:stackingOrder = 4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.9, 0.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "SmoothThresholdMaterial"
        {
            reorder nameChildren = ["DefaultSurfaceShader", "PreviewSurface", "Image", "Convert", "ConstantFloat3", "ConstantFloat", "FuzzyShading_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_SmoothThreshold/SmoothThresholdMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_SmoothThreshold/SmoothThresholdMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal.connect = None
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0.5
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1120.0715, 185.00719)
                int ui:nodegraph:node:stackingOrder = 3556
            }

            def "SmoothThreshold_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/SmoothThreshold>
            )
            {
                float inputs:CutoffValue = 1
                float inputs:CutoffValue.connect = </Root/Cube_SmoothThreshold/SmoothThresholdMaterial/ConstantFloat_1.outputs:out>
                float inputs:Gradient.connect = </Root/Cube_SmoothThreshold/SmoothThresholdMaterial/Image.outputs:out>
                float inputs:LerpValue.connect = </Root/Cube_SmoothThreshold/SmoothThresholdMaterial/ConstantFloat.outputs:out>
                float2 ui:nodegraph:node:pos = (-641.6714, -84.630936)
                int ui:nodegraph:node:stackingOrder = 3542
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_SmoothThreshold/SmoothThresholdMaterial/SmoothThreshold_1.outputs:Out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-442.0578, 64.154816)
                int ui:nodegraph:node:stackingOrder = 3509
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Texture/DefaultTexture1.png@
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1162.6527, -225.1401)
                int ui:nodegraph:node:stackingOrder = 3532
            }

            def Shader "ConstantFloat_1"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0.5
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1117.2229, 81.473366)
                int ui:nodegraph:node:stackingOrder = 3557
            }
        }
    }

    def Cube "Cube_SoftOpacity" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_SoftOpacity/SoftOpacityMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (60, 60)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.9, 0.9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "SoftOpacityMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "_3ColorBlend_1", "Convert", "TextureCoordinates", "Separate2", "SoftOpacity_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_SoftOpacity/SoftOpacityMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_SoftOpacity/SoftOpacityMaterial/Image.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity.connect = </Root/Cube_SoftOpacity/SoftOpacityMaterial/SoftOpacity_1.outputs:OutputUsesDepthBias>
                float inputs:roughness = 0
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
                int ui:nodegraph:node:stackingOrder = 2552
            }

            def "SoftOpacity_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/SoftOpacity>
            )
            {
                float inputs:DepthFadeDistance
                float inputs:FadeDistance
                float inputs:OpacityIn
                float2 ui:nodegraph:node:pos = (-351.08203, 139.34766)
                int ui:nodegraph:node:stackingOrder = 2540
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @Texture/number.jpeg@
                string inputs:filtertype
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-391.6953, -102.71484)
                int ui:nodegraph:node:stackingOrder = 2549
            }
        }
    }

    def Cube "Cube_VectorToRadialValue" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_VectorToRadialValue/VectorToRadialValueMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (80, 80)
        int ui:nodegraph:node:stackingOrder = 4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.6, 0.9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "VectorToRadialValueMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/Cube_VectorToRadialValue/VectorToRadialValueMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_VectorToRadialValue/VectorToRadialValueMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "TextureCoordinates"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-871.5039, 28.503906)
                int ui:nodegraph:node:stackingOrder = 2551
            }

            def "VectorToRadialValue_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/VectorToRadialValue>
            )
            {
                bool inputs:SwizzleCoordinateOutput = 1
                float2 inputs:VectorOrUVs.connect = </Root/Cube_VectorToRadialValue/VectorToRadialValueMaterial/Subtract.outputs:out>
                float2 ui:nodegraph:node:pos = (-502.29297, 40.578125)
                int ui:nodegraph:node:stackingOrder = 2570
            }

            def Shader "Convert_1"
            {
                uniform token info:id = "ND_convert_vector2_vector3"
                float2 inputs:in.connect = </Root/Cube_VectorToRadialValue/VectorToRadialValueMaterial/VectorToRadialValue_1.outputs:RadialCoordinates>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-295.46094, 175.80469)
                int ui:nodegraph:node:stackingOrder = 2545
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_VectorToRadialValue/VectorToRadialValueMaterial/Convert_1.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-127.96875, 70.55078)
                int ui:nodegraph:node:stackingOrder = 2513
            }

            def Shader "Subtract"
            {
                uniform token info:id = "ND_subtract_vector2FA"
                prepend float2 inputs:in1.connect = </Root/Cube_VectorToRadialValue/VectorToRadialValueMaterial/TextureCoordinates.outputs:out>
                float inputs:in2 = 0.5
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-696.2656, 117.87109)
                int ui:nodegraph:node:stackingOrder = 2553
            }
        }
    }

    def Cube "Cube_LinearSine" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_LinearSine/LinearSineMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (316.5, 204.5)
        int ui:nodegraph:node:stackingOrder = 6
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.3, 0.9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "LinearSineMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "SmoothCurve_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_LinearSine/LinearSineMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_LinearSine/LinearSineMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "LinearSine_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/LinearSine>
            )
            {
                bool inputs:Negative1To1 = 0
                bool inputs:SinePhase = 1
                float inputs:Value.connect = </Root/Cube_LinearSine/LinearSineMaterial/Time.outputs:out>
                float2 ui:nodegraph:node:pos = (-383.91797, 22.015625)
                int ui:nodegraph:node:stackingOrder = 50
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-673.6328, 12.140625)
                int ui:nodegraph:node:stackingOrder = 43
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_LinearSine/LinearSineMaterial/LinearSine_1.outputs:RoundedLinearSine>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }
        }
    }

    def Cube "Cube_ViewAlignedReflection" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_ViewAlignedReflection/ViewAlignedReflectionMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (336.5, 224.5)
        int ui:nodegraph:node:stackingOrder = 7
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "ViewAlignedReflectionMaterial"
        {
            reorder nameChildren = ["ValueStep_1", "Multiply", "PreviewSurface", "Convert", "TextureCoordinates", "Separate2", "SCurve_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_ViewAlignedReflection/ViewAlignedReflectionMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_ViewAlignedReflection/ViewAlignedReflectionMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_ViewAlignedReflection/ViewAlignedReflectionMaterial/ViewAlignedReflection_1.outputs:Texture>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }

            def "ViewAlignedReflection_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/ViewAlignedReflection>
            )
            {
                asset inputs:ReflectionTexture = @Texture/DefaultTexture1.png@
                float3 inputs:ReflectionVector.connect = </Root/Cube_ViewAlignedReflection/ViewAlignedReflectionMaterial/TransformMatrix.outputs:out>
                float2 ui:nodegraph:node:pos = (-362.72266, 80.88867)
                int ui:nodegraph:node:stackingOrder = 2610
            }

            def Shader "Reflect"
            {
                uniform token info:id = "ND_realitykit_reflect_vector3"
                float3 inputs:in.connect = </Root/Cube_ViewAlignedReflection/ViewAlignedReflectionMaterial/Multiply.outputs:out>
                float3 inputs:normal
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-822.64453, 77.48828)
                int ui:nodegraph:node:stackingOrder = 2659
            }

            def Shader "ViewDirection"
            {
                uniform token info:id = "ND_realitykit_viewdirection_vector3"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1126.1523, 72.49219)
                int ui:nodegraph:node:stackingOrder = 2661
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_vector3FA"
                prepend float3 inputs:in1.connect = </Root/Cube_ViewAlignedReflection/ViewAlignedReflectionMaterial/ViewDirection.outputs:out>
                float inputs:in2 = -1
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-963.8906, 80.17578)
                int ui:nodegraph:node:stackingOrder = 2656
            }

            def Shader "WorldToView"
            {
                uniform token info:id = "ND_realitykit_surface_world_to_view"
                matrix4d outputs:worldToView
                float2 ui:nodegraph:node:pos = (-870.26953, 234.25)
                int ui:nodegraph:node:stackingOrder = 2676
            }

            def Shader "TransformMatrix"
            {
                uniform token info:id = "ND_transformmatrix_vector3M4"
                float3 inputs:in.connect = </Root/Cube_ViewAlignedReflection/ViewAlignedReflectionMaterial/Reflect.outputs:out>
                matrix4d inputs:mat.connect = </Root/Cube_ViewAlignedReflection/ViewAlignedReflectionMaterial/WorldToView.outputs:worldToView>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-615.52344, 164.70703)
                int ui:nodegraph:node:stackingOrder = 2671
            }
        }
    }

    def Cube "Cube_CylindricalUVs" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube_CylindricalUVs/CylindricalUVsMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (356.5, 244.5)
        int ui:nodegraph:node:stackingOrder = 8
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3, 0.9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "CylindricalUVsMaterial"
        {
            reorder nameChildren = ["ValueStep_1", "PreviewSurface", "SmoothCurve_1", "Convert", "TextureCoordinates", "Separate2"]
            token outputs:mtlx:surface.connect = </Root/Cube_CylindricalUVs/CylindricalUVsMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 894

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_CylindricalUVs/CylindricalUVsMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def "CylindricalUVs_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/CylindricalUVs>
            )
            {
                float inputs:In = 512
                float3 inputs:Normal.connect = None
                asset inputs:TextureObject.connect = </Root/Cube_CylindricalUVs/CylindricalUVsMaterial/ConstantImageFile.outputs:out>
                float2 ui:nodegraph:node:pos = (-389.99487, 66.69126)
                int ui:nodegraph:node:stackingOrder = 892
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_CylindricalUVs/CylindricalUVsMaterial/CylindricalUVs_1.outputs:CylinderProjectionWTop>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-135.03224, 116.31452)
                int ui:nodegraph:node:stackingOrder = 31
            }

            def Shader "ConstantImageFile"
            {
                uniform token info:id = "ND_constant_filename"
                asset inputs:value = @Texture/DefaultTexture1.png@ (
                    customData = {
                        dictionary RealityKit = {
                        }
                    }
                )
                asset outputs:out
                float2 ui:nodegraph:node:pos = (-728.38605, 136.63121)
                int ui:nodegraph:node:stackingOrder = 876
            }
        }
    }

    def Cube "Cube_HueShift_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["HueShiftMaterial", "GeneratedOffsetBandsMaterial"]
        rel material:binding = </Root/Cube_HueShift_1/HueShiftMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-7.748047, 151.16016)
        int ui:nodegraph:node:stackingOrder = 4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.6, 0.9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "HueShiftMaterial"
        {
            reorder nameChildren = ["DefaultSurfaceShader", "PreviewSurface", "Image", "Convert", "ConstantFloat3", "ConstantFloat", "FuzzyShading_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_HueShift_1/HueShiftMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_HueShift_1/HueShiftMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal.connect = None
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Texture/DefaultTexture1.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1120.8373, 121.451866)
                int ui:nodegraph:node:stackingOrder = 3539
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube_HueShift_1/HueShiftMaterial/HueShift_1.outputs:Out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-442.0578, 64.154816)
                int ui:nodegraph:node:stackingOrder = 3509
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0
                float outputs:out
                float2 ui:nodegraph:node:pos = (-966.15643, -36.61507)
                int ui:nodegraph:node:stackingOrder = 3520
            }

            def "HueShift_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/HueShift>
            )
            {
                float inputs:HueShiftPercentage = 0.5
                float3 inputs:Texture.connect = </Root/Cube_HueShift_1/HueShiftMaterial/Image.outputs:out>
                float2 ui:nodegraph:node:pos = (-726.5622, 41.36231)
                int ui:nodegraph:node:stackingOrder = 3555
            }
        }
    }

    def Cube "Cube_SmoothThreshold_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["SmoothThresholdMaterial", "GeneratedOffsetBandsMaterial"]
        rel material:binding = </Root/Cube_SmoothThreshold_1/SmoothThresholdMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (12.251953, 171.16016)
        int ui:nodegraph:node:stackingOrder = 5
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.9, 0.9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "SmoothThresholdMaterial"
        {
            reorder nameChildren = ["DefaultSurfaceShader", "PreviewSurface", "Image", "Convert", "ConstantFloat3", "ConstantFloat", "FuzzyShading_1"]
            token outputs:mtlx:surface.connect = </Root/Cube_SmoothThreshold_1/SmoothThresholdMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube_SmoothThreshold_1/SmoothThresholdMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal.connect = None
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0.5
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1120.0715, 185.00719)
                int ui:nodegraph:node:stackingOrder = 3556
            }

            def "SmoothThreshold_1" (
                active = true
                instanceable = true
                references = @Nodes/UENode.usda@</Root/SmoothThreshold>
            )
            {
                float inputs:CutoffValue = 1
                float inputs:CutoffValue.connect = </Root/Cube_SmoothThreshold_1/SmoothThresholdMaterial/ConstantFloat_1.outputs:out>
                float inputs:Gradient.connect = </Root/Cube_SmoothThreshold_1/SmoothThresholdMaterial/Image.outputs:out>
                float inputs:LerpValue.connect = </Root/Cube_SmoothThreshold_1/SmoothThresholdMaterial/ConstantFloat.outputs:out>
                float2 ui:nodegraph:node:pos = (-641.6714, -84.630936)
                int ui:nodegraph:node:stackingOrder = 3542
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube_SmoothThreshold_1/SmoothThresholdMaterial/SmoothThreshold_1.outputs:Out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-442.0578, 64.154816)
                int ui:nodegraph:node:stackingOrder = 3509
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Texture/DefaultTexture1.png@
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1162.6527, -225.1401)
                int ui:nodegraph:node:stackingOrder = 3532
            }

            def Shader "ConstantFloat_1"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0.5
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1117.2229, 81.473366)
                int ui:nodegraph:node:stackingOrder = 3557
            }
        }
    }
}

