#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["InputTextureCoordinate", "Panner", "Desaturation", "SphereMask", "Fresnel", "CameraDepthFade", "GeneratedBand", "GeneratedOffsetBands", "NormalFromHeightmap", "NormalFromHeightmapChaos", "RadialGradientExponential", "ExponentialDensity", "DiamondGradient", "SmoothCurve", "ValueStep", "FuzzyShading", "FuzzyShadingGrass", "BlackBody_WIP_", "_3ColorBlend", "CheapContrast", "CheapContrast_RGB", "SCurve", "_3PointLevels", "HueShift", "SmoothThreshold", "SoftOpacity", "VectorToRadialValue", "LinearSine", "ViewAlignedReflection", "CylindricalUVs", "Cube"]
    def NodeGraph "SphereMask"
    {
        reorder nameChildren = ["Multiply", "Subtract", "Magnitude", "Group", "Group2", "Divide", "Abs", "MTLCospi", "Multiply_3", "Clamp_1", "Range_1", "Clamp", "Fractional", "UV", "InputTextureCoordinate_1"]
        float2 inputs:A = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-93.94556, -85.53709)
                    int stackingOrderInSubgraph = 2055
                }
            }
        )
        float2 inputs:B = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-0.5617834, 230.23872)
                    int stackingOrderInSubgraph = 1646
                }
            }
        )
        float inputs:Hardness = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (2.6202536, 475.79825)
                    int stackingOrderInSubgraph = 1529
                }
            }
        )
        float inputs:Radius = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2.7921915, 358.8785)
                    int stackingOrderInSubgraph = 1649
                }
            }
        )
        float outputs:Oneminus_out.connect = </Root/SphereMask/MTLCospi.outputs:out>
        float2 ui:nodegraph:node:pos = (-714.68396, 25.64183)
        int ui:nodegraph:node:stackingOrder = 785
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1571.9099, 82.907974)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2024

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SphereMask.inputs:Hardness>
            float inputs:in2 = 0.01
            float inputs:in2.connect = None
            float outputs:out
            float2 ui:nodegraph:node:pos = (170.8795, 472.86765)
            int ui:nodegraph:node:stackingOrder = 1529
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/SphereMask/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/SphereMask.inputs:B>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (450.05792, -84.117294)
            int ui:nodegraph:node:stackingOrder = 1281
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/SphereMask/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (586.58307, -76.7678)
            int ui:nodegraph:node:stackingOrder = 1283
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Custom Coordinates"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["i:inputs:A"]
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Center"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["i:inputs:B"]
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/SphereMask/Magnitude.outputs:out>
            float inputs:in2.connect = </Root/SphereMask/Abs.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (737.24396, -42.28077)
            int ui:nodegraph:node:stackingOrder = 1407
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/SphereMask.inputs:Radius>
            float outputs:out
            float2 ui:nodegraph:node:pos = (191.05048, 326.92395)
            int ui:nodegraph:node:stackingOrder = 1651
        }

        def Shader "MTLCospi"
        {
            uniform token info:id = "ND_MTL_cospi_float"
            float inputs:x.connect = </Root/SphereMask/Range_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1391.1366, 89.5694)
            int ui:nodegraph:node:stackingOrder = 2023
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SphereMask/Clamp_1.outputs:out>
            float inputs:in2.connect = </Root/SphereMask/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (670.4945, 335.81085)
            int ui:nodegraph:node:stackingOrder = 1643
        }

        def Shader "Clamp_1"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/SphereMask/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (842.2626, -37.560177)
            int ui:nodegraph:node:stackingOrder = 1472
        }

        def Shader "Range_1"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp = 0
            float inputs:gamma
            float inputs:in.connect = </Root/SphereMask/Clamp_1.outputs:out>
            float inputs:inhigh = 1
            float inputs:inlow.connect = </Root/SphereMask/Fractional.outputs:out>
            float inputs:outhigh = 0.5
            float inputs:outlow
            float outputs:out
            float2 ui:nodegraph:node:pos = (1197.9062, 56.660774)
            int ui:nodegraph:node:stackingOrder = 1654
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/SphereMask/Multiply.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (398.56467, 379.87082)
            int ui:nodegraph:node:stackingOrder = 1713
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/SphereMask/Multiply_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (941.67725, 245.65057)
            int ui:nodegraph:node:stackingOrder = 1715
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/SphereMask.inputs:A>
            float2 ui:nodegraph:node:pos = (166.79086, -112.980446)
            int ui:nodegraph:node:stackingOrder = 2054
        }
    }

    def NodeGraph "Fresnel"
    {
        float inputs:BaseReflectFraction = 0.04 (
            colorSpace = ""
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (881.9404, 169.66081)
                    int stackingOrderInSubgraph = 371
                }
            }
        )
        float inputs:Exp = 5 (
            colorSpace = ""
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (850.32837, 349.24)
                    int stackingOrderInSubgraph = 365
                }
            }
        )
        float outputs:Exp_out.connect = </Root/Fresnel/Add.outputs:out>
        float2 ui:nodegraph:node:pos = (-974.91406, -57.359375)
        int ui:nodegraph:node:stackingOrder = 707
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1478.4657, 253.6973)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 369

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/Fresnel/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/Fresnel.inputs:Exp>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1053.6631, 333.0475)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "ViewDirection"
        {
            uniform token info:id = "ND_realitykit_viewdirection_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (344.9641, 328.0443)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Fresnel/Oneminus_1.outputs:out>
            float inputs:in2.connect = </Root/Fresnel/Power.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1239.6238, 289.70642)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/Fresnel/Normal.outputs:out>
            float3 inputs:in2.connect = </Root/Fresnel/ViewDirection.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (578.22144, 291.79297)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/Fresnel/Max.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (894.1604, 291.67957)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/Fresnel.inputs:BaseReflectFraction>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1100.9023, 190.06544)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Fresnel/Multiply.outputs:out>
            float inputs:in2.connect = </Root/Fresnel.inputs:BaseReflectFraction>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1346.3232, 280.7932)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Max"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1
            float inputs:in2.connect = </Root/Fresnel/DotProduct.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (779.81323, 287.67432)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Normal"
        {
            uniform token info:id = "ND_normal_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (359.81482, 247.60356)
            int ui:nodegraph:node:stackingOrder = 367
        }
    }

    def NodeGraph "GeneratedBand" (
        references = None
    )
    {
        reorder nameChildren = ["InputTextureCoordinate_1", "Convert_4", "Separate2", "MTLSelect", "Fractional_1", "Combine2", "Convert", "Add", "SphereMask_1"]
        float inputs:Compare = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (621.64124, 319.25262)
                    int stackingOrderInSubgraph = 1760
                }
            }
        )
        bool inputs:Direction_Switch = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (521.07104, 221.2182)
                    int stackingOrderInSubgraph = 1892
                }
            }
        )
        float inputs:Offset = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (346.79556, 134.9079)
                    int stackingOrderInSubgraph = 1905
                }
            }
        )
        float inputs:Offset.connect = None
        float inputs:Sharpness = 5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (618.0296, 414.06967)
                    int stackingOrderInSubgraph = 1760
                }
            }
        )
        float2 inputs:TextureCoordinate = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (187.04388, -19.879124)
                    int stackingOrderInSubgraph = 2088
                }
            }
        )
        float inputs:Width = 0.25 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (609.3762, 513.85455)
                    int stackingOrderInSubgraph = 1760
                }
            }
        )
        float outputs:SphereMask_Oneminus_out.connect = </Root/GeneratedBand/SphereMask_1.outputs:Oneminus_out>
        float2 ui:nodegraph:node:pos = (-1144.0477, 1066.399)
        int ui:nodegraph:node:stackingOrder = 960
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1871.5, 343)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1760

        def Shader "Convert_4"
        {
            uniform token info:id = "ND_convert_float_vector2"
            float inputs:in.connect = </Root/GeneratedBand.inputs:Compare>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1004.8723, 328.79047)
            int ui:nodegraph:node:stackingOrder = 1760
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/GeneratedBand/Add.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (752.12805, 50.18009)
            int ui:nodegraph:node:stackingOrder = 1894
        }

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/GeneratedBand/Separate2.outputs:outy>
            float inputs:b.connect = </Root/GeneratedBand/Separate2.outputs:outx>
            bool inputs:c.connect = </Root/GeneratedBand.inputs:Direction_Switch>
            float outputs:out
            float2 ui:nodegraph:node:pos = (939.6931, 69.18269)
            int ui:nodegraph:node:stackingOrder = 1886
        }

        def Shader "Fractional_1"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/GeneratedBand/MTLSelect.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1162.0714, 163.93248)
            int ui:nodegraph:node:stackingOrder = 1910
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/GeneratedBand/Fractional_1.outputs:out>
            float inputs:in2.connect = </Root/GeneratedBand.inputs:Compare>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1428.9279, 199.14738)
            int ui:nodegraph:node:stackingOrder = 1909
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_vector2"
            prepend float inputs:in.connect = </Root/GeneratedBand.inputs:Offset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (492.21823, 72.9517)
            int ui:nodegraph:node:stackingOrder = 1898
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/GeneratedBand/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/GeneratedBand/Convert.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (620.30585, 43.90564)
            int ui:nodegraph:node:stackingOrder = 1906
        }

        def "SphereMask_1" (
            active = true
            instanceable = true
            references = </Root/SphereMask>
        )
        {
            float2 inputs:A.connect = </Root/GeneratedBand/Combine2.outputs:out>
            float2 inputs:B.connect = </Root/GeneratedBand/Convert_4.outputs:out>
            float inputs:Hardness.connect = </Root/GeneratedBand.inputs:Sharpness>
            float inputs:Radius.connect = </Root/GeneratedBand.inputs:Width>
            float2 ui:nodegraph:node:pos = (1634.558, 304.95367)
            int ui:nodegraph:node:stackingOrder = 1912
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/GeneratedBand.inputs:TextureCoordinate>
            float2 ui:nodegraph:node:pos = (427.5223, -48.61487)
            int ui:nodegraph:node:stackingOrder = 2036
        }
    }

    def NodeGraph "CameraDepthFade" (
        active = true
    )
    {
        float inputs:FadeLength = 100 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-435.15732, 164.45984)
                    int stackingOrderInSubgraph = 193
                }
            }
        )
        float inputs:FadeOffset = 30 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-429.82578, 67.02295)
                    int stackingOrderInSubgraph = 204
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 188
                }
            }
        )
        float outputs:Out.connect = </Root/CameraDepthFade/Clamp.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (207.7312, 92.099)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 190

        def Shader "MTLDistance"
        {
            uniform token info:id = "ND_MTL_distance_vector3_float"
            float3 inputs:x.connect = </Root/CameraDepthFade/CameraPosition.outputs:out>
            float3 inputs:y.connect = </Root/CameraDepthFade/Position.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-286.67075, -55.701416)
            int ui:nodegraph:node:stackingOrder = 283
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/CameraDepthFade.inputs:FadeOffset>
            float inputs:in2 = 0.01
            float outputs:out
            float2 ui:nodegraph:node:pos = (-258.97006, 60.900208)
            int ui:nodegraph:node:stackingOrder = 202
        }

        def Shader "Range"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp = 0
            float inputs:gamma
            float inputs:in.connect = </Root/CameraDepthFade/MTLDistance.outputs:out>
            float inputs:inhigh.connect = </Root/CameraDepthFade/Multiply_1.outputs:out>
            float inputs:inlow.connect = </Root/CameraDepthFade/Multiply.outputs:out>
            float inputs:outhigh = 0
            float inputs:outlow = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-86.05966, 38.831665)
            int ui:nodegraph:node:stackingOrder = 216
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-550.43616, -4.9819946)
            int ui:nodegraph:node:stackingOrder = 283
        }

        def Shader "CameraPosition"
        {
            uniform token info:id = "ND_realitykit_cameraposition_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-522.808, -74.59711)
            int ui:nodegraph:node:stackingOrder = 283
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/CameraDepthFade.inputs:FadeLength>
            float inputs:in2 = 0.01
            float outputs:out
            float2 ui:nodegraph:node:pos = (-255.45712, 164.9129)
            int ui:nodegraph:node:stackingOrder = 203
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/CameraDepthFade/Range.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (53.737793, 153.42682)
            int ui:nodegraph:node:stackingOrder = 217
        }
    }

    def NodeGraph "GeneratedOffsetBands"
    {
        reorder nameChildren = ["Convert_4", "InputTextureCoordinate_2", "Separate2", "MTLSelect", "Multiply", "Convert", "Abs", "Add", "MTLSinpi", "Convert_1", "Multiply_1", "SphereMask_1", "InputTextureCoordinate_1"]
        float inputs:Bands = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-93.555786, 77.791374)
                    int stackingOrderInSubgraph = 2343
                }
            }
        )
        float inputs:Compare = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (650.083, 407.90686)
                    int stackingOrderInSubgraph = 1987
                }
            }
        )
        bool inputs:Direction_Switch = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (548.9916, 263.5766)
                    int stackingOrderInSubgraph = 2121
                }
            }
        )
        float inputs:Offset = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (104.55174, 180.27872)
                    int stackingOrderInSubgraph = 2347
                }
            }
        )
        float inputs:Offset.connect = None
        float inputs:Sharpness = 0.25 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (648.2649, 495.8301)
                    int stackingOrderInSubgraph = 1989
                }
            }
        )
        float2 inputs:TextureCoordinate = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-88.35181, -39.95572)
                    int stackingOrderInSubgraph = 2343
                }
            }
        )
        float inputs:Width = 0.25 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (659.5469, 576.16907)
                    int stackingOrderInSubgraph = 2303
                }
            }
        )
        float outputs:SphereMask_Oneminus_out.connect = </Root/GeneratedOffsetBands/SphereMask_1.outputs:Oneminus_out>
        float2 ui:nodegraph:node:pos = (-1124.0477, 1086.399)
        int ui:nodegraph:node:stackingOrder = 961
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2037.8438, 369.0013)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2341

        def Shader "Convert_4"
        {
            uniform token info:id = "ND_convert_float_vector2"
            float inputs:in.connect = </Root/GeneratedOffsetBands.inputs:Compare>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1280.7853, 322.56915)
            int ui:nodegraph:node:stackingOrder = 2301
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/GeneratedOffsetBands/Abs.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (913.21326, 69.784256)
            int ui:nodegraph:node:stackingOrder = 2314
        }

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/GeneratedOffsetBands/Separate2.outputs:outy>
            float inputs:b.connect = </Root/GeneratedOffsetBands/Separate2.outputs:outx>
            bool inputs:c.connect = </Root/GeneratedOffsetBands.inputs:Direction_Switch>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1140.5723, 68.99843)
            int ui:nodegraph:node:stackingOrder = 2247
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/GeneratedOffsetBands/InputTextureCoordinate_2.outputs:Add_out>
            float inputs:in2.connect = </Root/GeneratedOffsetBands.inputs:Bands>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (310.94894, 2.4574347)
            int ui:nodegraph:node:stackingOrder = 2332
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_vector2"
            float inputs:in.connect = </Root/GeneratedOffsetBands.inputs:Offset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (463.4557, 133.76013)
            int ui:nodegraph:node:stackingOrder = 2286
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_vector2"
            float2 inputs:in.connect = </Root/GeneratedOffsetBands/Add.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (755.95056, 62.996548)
            int ui:nodegraph:node:stackingOrder = 2316
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/GeneratedOffsetBands/MTLSinpi.outputs:out>
            float2 inputs:in2.connect = </Root/GeneratedOffsetBands/Convert.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (640.8457, 70.0029)
            int ui:nodegraph:node:stackingOrder = 2251
        }

        def Shader "MTLSinpi"
        {
            uniform token info:id = "ND_MTL_sinpi_vector2"
            float2 inputs:x.connect = </Root/GeneratedOffsetBands/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (521.74805, -55.74726)
            int ui:nodegraph:node:stackingOrder = 2336
        }

        def Shader "Convert_1"
        {
            uniform token info:id = "ND_convert_float_vector2"
            prepend float inputs:in.connect = </Root/GeneratedOffsetBands/MTLSelect.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1425.2584, 182.40935)
            int ui:nodegraph:node:stackingOrder = 2321
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/GeneratedOffsetBands/Multiply.outputs:out>
            float inputs:in2 = 2
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (402.68948, 19.011396)
            int ui:nodegraph:node:stackingOrder = 2337
        }

        def "SphereMask_1" (
            active = true
            instanceable = true
            references = </Root/SphereMask>
        )
        {
            float2 inputs:A.connect = </Root/GeneratedOffsetBands/Convert_1.outputs:out>
            float2 inputs:B.connect = </Root/GeneratedOffsetBands/Convert_4.outputs:out>
            float inputs:Hardness.connect = </Root/GeneratedOffsetBands.inputs:Sharpness>
            float inputs:Radius.connect = </Root/GeneratedOffsetBands.inputs:Width>
            float2 ui:nodegraph:node:pos = (1725.0178, 346.44482)
            int ui:nodegraph:node:stackingOrder = 2339
        }

        def "InputTextureCoordinate_2" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/GeneratedOffsetBands.inputs:TextureCoordinate>
            float2 ui:nodegraph:node:pos = (127.38694, -58.875954)
            int ui:nodegraph:node:stackingOrder = 2344
        }
    }

    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube/DefaultMaterial>
        double size = 0.2

        def Material "DefaultMaterial" (
            references = None
        )
        {
            reorder nameChildren = ["DefaultSurfaceShader", "PreviewSurface", "Convert", "ConstantFloat", "Image", "ConstantFloat3", "CheapContrast_RGB_1", "Image_1", "SoftOpacity_1"]
            token outputs:mtlx:surface.connect = </Root/Cube/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube/DefaultMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity.connect = </Root/Cube/DefaultMaterial/SoftOpacity_1.outputs:OutputUsesDepthBias>
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube/DefaultMaterial/Image_1.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-490.87204, 53.524834)
                int ui:nodegraph:node:stackingOrder = 3003
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 18
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1040.0413, 232.47963)
                int ui:nodegraph:node:stackingOrder = 2959
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @../Texture/T_Base_Tile_DetailNormal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1382.7518, 402.01114)
                int ui:nodegraph:node:stackingOrder = 2959
            }

            def Shader "ConstantFloat3"
            {
                uniform token info:id = "ND_constant_vector3"
                float3 inputs:value = (0.04, 0.75, 0.13)
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1082.3016, 104.440636)
                int ui:nodegraph:node:stackingOrder = 2959
            }

            def "CheapContrast_RGB_1" (
                active = true
                instanceable = true
                references = </Root/CheapContrast_RGB>
            )
            {
                float inputs:Contrast = 1
                float3 inputs:In.connect = </Root/Cube/DefaultMaterial/Image_1.outputs:out>
                float2 ui:nodegraph:node:pos = (-738.51904, -70.60621)
                int ui:nodegraph:node:stackingOrder = 3009
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @../Texture/HeatmapGradient.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1004.5078, -17.859375)
                int ui:nodegraph:node:stackingOrder = 2999
            }

            def "SoftOpacity_1" (
                active = true
                instanceable = true
                references = </Root/SoftOpacity>
            )
            {
                float inputs:DepthFadeDistance = 1
                float inputs:FadeDistance = 2
                float inputs:OpacityIn = 1
                float2 ui:nodegraph:node:pos = (-765.31, 215.73776)
                int ui:nodegraph:node:stackingOrder = 3011
            }
        }
    }

    def NodeGraph "NormalFromHeightmap" (
        active = true
    )
    {
        reorder nameChildren = ["Combine2", "Combine2_1", "Add", "Add_1", "UVTexture", "Convert", "DotProduct", "DotProduct_1", "Convert_1", "UVTexture_1", "DotProduct_2", "UVTexture_2", "Convert_2", "Subtract", "Subtract_1", "Multiply", "Multiply_1", "Combine3", "Combine3_1", "CrossProduct", "InputTextureCoordinate_1"]
        asset inputs:HeightMap = @../Texture/DefaultTexture1.png@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1162.6179, 72.852135)
                    int stackingOrderInSubgraph = 214
                }
            }
        )
        float4 inputs:HeightMapChannelSelector = (1, 0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-740.99414, 439.71875)
                    int stackingOrderInSubgraph = 163
                }
            }
        )
        float inputs:HeightMapUVOffset = 0.005 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1992.2212, 111.96069)
                    int stackingOrderInSubgraph = 2095
                }
            }
        )
        float inputs:NormalMapIntensity = 8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-182.60843, 162.40535)
                    int stackingOrderInSubgraph = 189
                }
            }
        )
        float2 inputs:TextureCoordinate = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1634.3265, 108.18056)
                    int stackingOrderInSubgraph = 2093
                }
            }
        )
        float3 outputs:Normal (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (97.3956, 180.89505)
                    int stackingOrderInSubgraph = 212
                }
            }
        )
        float3 outputs:Normal.connect = </Root/NormalFromHeightmap/CrossProduct.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (735.79895, 133.74709)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 212

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/NormalFromHeightmap.inputs:HeightMapUVOffset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1497.6055, -9.171875)
            int ui:nodegraph:node:stackingOrder = 16
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/NormalFromHeightmap.inputs:HeightMapUVOffset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1499.8828, 204.79688)
            int ui:nodegraph:node:stackingOrder = 19
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/NormalFromHeightmap/Combine2.outputs:out>
            float2 inputs:in2.connect = </Root/NormalFromHeightmap/InputTextureCoordinate_1.outputs:Add_out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1115.2305, -5.9375)
            int ui:nodegraph:node:stackingOrder = 25
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/NormalFromHeightmap/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/NormalFromHeightmap/Combine2_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1130.3477, 211.55078)
            int ui:nodegraph:node:stackingOrder = 28
        }

        def Shader "UVTexture"
        {
            uniform token info:id = "ND_UsdUVTexture"
            asset inputs:file.connect = </Root/NormalFromHeightmap.inputs:HeightMap>
            color4f inputs:scale
            float2 inputs:st.connect = </Root/NormalFromHeightmap/Add.outputs:out>
            string inputs:wrapS
            string inputs:wrapT
            color4f outputs:rgba
            float2 ui:nodegraph:node:pos = (-865.6335, -99.25285)
            int ui:nodegraph:node:stackingOrder = 169
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_color4_vector4"
            color4f inputs:in.connect = </Root/NormalFromHeightmap/UVTexture.outputs:rgba>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-704.8242, -22.40625)
            int ui:nodegraph:node:stackingOrder = 144
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector4"
            float4 inputs:in1.connect = </Root/NormalFromHeightmap/Convert.outputs:out>
            float4 inputs:in2.connect = </Root/NormalFromHeightmap.inputs:HeightMapChannelSelector>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-448.60004, 1.7942768)
            int ui:nodegraph:node:stackingOrder = 181
        }

        def Shader "DotProduct_1"
        {
            uniform token info:id = "ND_dotproduct_vector4"
            float4 inputs:in1.connect = </Root/NormalFromHeightmap/Convert_1.outputs:out>
            float4 inputs:in2.connect = </Root/NormalFromHeightmap.inputs:HeightMapChannelSelector>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-454.20557, 166.41826)
            int ui:nodegraph:node:stackingOrder = 183
        }

        def Shader "Convert_1"
        {
            uniform token info:id = "ND_convert_color4_vector4"
            color4f inputs:in.connect = </Root/NormalFromHeightmap/UVTexture_1.outputs:rgba>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-686.5374, 178.91458)
            int ui:nodegraph:node:stackingOrder = 165
        }

        def Shader "UVTexture_1"
        {
            uniform token info:id = "ND_UsdUVTexture"
            color4f inputs:bias
            color4f inputs:fallback
            asset inputs:file.connect = </Root/NormalFromHeightmap.inputs:HeightMap>
            color4f inputs:scale
            float2 inputs:st.connect = </Root/NormalFromHeightmap/InputTextureCoordinate_1.outputs:Add_out>
            string inputs:wrapS
            string inputs:wrapT
            color4f outputs:rgba
            float2 ui:nodegraph:node:pos = (-918.2689, 75.27363)
            int ui:nodegraph:node:stackingOrder = 171
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "DotProduct_2"
        {
            uniform token info:id = "ND_dotproduct_vector4"
            float4 inputs:in1.connect = </Root/NormalFromHeightmap/Convert_2.outputs:out>
            float4 inputs:in2.connect = </Root/NormalFromHeightmap.inputs:HeightMapChannelSelector>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-457.61075, 298.31555)
            int ui:nodegraph:node:stackingOrder = 157
        }

        def Shader "UVTexture_2"
        {
            uniform token info:id = "ND_UsdUVTexture"
            color4f inputs:bias
            color4f inputs:fallback
            asset inputs:file.connect = </Root/NormalFromHeightmap.inputs:HeightMap>
            color4f inputs:scale
            float2 inputs:st.connect = </Root/NormalFromHeightmap/Add_1.outputs:out>
            string inputs:wrapS
            string inputs:wrapT
            color4f outputs:rgba
            float2 ui:nodegraph:node:pos = (-921.7803, 301.15244)
            int ui:nodegraph:node:stackingOrder = 173
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Convert_2"
        {
            uniform token info:id = "ND_convert_color4_vector4"
            color4f inputs:in.connect = </Root/NormalFromHeightmap/UVTexture_2.outputs:rgba>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-694.9302, 312.36072)
            int ui:nodegraph:node:stackingOrder = 163
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/NormalFromHeightmap/DotProduct.outputs:out>
            float inputs:in2.connect = </Root/NormalFromHeightmap/DotProduct_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-252.97327, -1.3399274)
            int ui:nodegraph:node:stackingOrder = 184
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/NormalFromHeightmap/DotProduct_2.outputs:out>
            float inputs:in2.connect = </Root/NormalFromHeightmap/DotProduct_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-269.60233, 302.47845)
            int ui:nodegraph:node:stackingOrder = 187
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/NormalFromHeightmap/Subtract.outputs:out>
            float inputs:in2.connect = </Root/NormalFromHeightmap.inputs:NormalMapIntensity>
            float outputs:out
            float2 ui:nodegraph:node:pos = (90.37684, 2.1156042)
            int ui:nodegraph:node:stackingOrder = 190
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/NormalFromHeightmap.inputs:NormalMapIntensity>
            float inputs:in2.connect = </Root/NormalFromHeightmap/Subtract_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (76.44848, 303.77008)
            int ui:nodegraph:node:stackingOrder = 191
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1 = 1
            float inputs:in2
            prepend float inputs:in3.connect = </Root/NormalFromHeightmap/Multiply.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (250.90251, -7.255707)
            int ui:nodegraph:node:stackingOrder = 209
        }

        def Shader "Combine3_1"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1
            float inputs:in2 = 1
            prepend float inputs:in3.connect = </Root/NormalFromHeightmap/Multiply_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (237.30962, 291.46884)
            int ui:nodegraph:node:stackingOrder = 210
        }

        def Shader "CrossProduct"
        {
            uniform token info:id = "ND_crossproduct_vector3"
            float3 inputs:in1.connect = </Root/NormalFromHeightmap/Combine3.outputs:out>
            float3 inputs:in2.connect = </Root/NormalFromHeightmap/Combine3_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (455.91394, 119.40798)
            int ui:nodegraph:node:stackingOrder = 213
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmap.inputs:TextureCoordinate>
            float2 ui:nodegraph:node:pos = (-1397.554, 66.74605)
            int ui:nodegraph:node:stackingOrder = 2035
        }
    }

    def NodeGraph "InputTextureCoordinate"
    {
        float2 inputs:TextureCoordinate (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (102, 220)
                    int stackingOrderInSubgraph = 2389
                }
            }
        )
        float2 inputs:TextureCoordinate.connect = None
        float2 outputs:Add_out.connect = </Root/InputTextureCoordinate/IfEqual.outputs:out>
        float2 ui:nodegraph:node:pos = (-364.71768, -231.75021)
        int ui:nodegraph:node:stackingOrder = 2030
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1748.25, 183.25)

        def Shader "ConstantFloat2"
        {
            uniform token info:id = "ND_constant_vector2"
            float2 inputs:value = (0, 0)
            float2 inputs:value.connect = </Root/InputTextureCoordinate.inputs:TextureCoordinate>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (362.26355, 231.64615)
            int ui:nodegraph:node:stackingOrder = 2503
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            int inputs:index = 0
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1007.6138, 233.69334)
            int ui:nodegraph:node:stackingOrder = 2540
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/InputTextureCoordinate/ConstantFloat2.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (541.9487, 82.03208)
            int ui:nodegraph:node:stackingOrder = 2505
        }

        def Shader "IfEqual_1"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:value1.connect = </Root/InputTextureCoordinate/Separate2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (733.5229, -66.11583)
            int ui:nodegraph:node:stackingOrder = 2533
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
        }

        def Shader "IfEqual_2"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:value1.connect = </Root/InputTextureCoordinate/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (733.79944, 116.4508)
            int ui:nodegraph:node:stackingOrder = 2536
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/InputTextureCoordinate/IfEqual_1.outputs:out>
            float inputs:in2.connect = </Root/InputTextureCoordinate/IfEqual_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1085.2476, 71.321846)
            int ui:nodegraph:node:stackingOrder = 2511
        }

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_vector2"
            float2 inputs:in1.connect = </Root/InputTextureCoordinate/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/InputTextureCoordinate/ConstantFloat2.outputs:out>
            float inputs:value1.connect = </Root/InputTextureCoordinate/Add.outputs:out>
            float inputs:value2.connect = None
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1398.7833, 292.74045)
            int ui:nodegraph:node:stackingOrder = 2538
        }
    }

    def NodeGraph "NormalFromHeightmapChaos" (
        active = true
    )
    {
        reorder nameChildren = ["Combine2", "Combine2_1", "Add", "Add_1", "UVTexture", "Convert", "DotProduct", "DotProduct_1", "Convert_1", "UVTexture_1", "DotProduct_2", "UVTexture_2", "Convert_2", "Subtract", "Subtract_1", "Multiply", "Multiply_1", "Combine3", "Combine3_1", "CrossProduct", "InputTextureCoordinate_1"]
        float inputs:Height = 8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-182.60843, 162.40535)
                    int stackingOrderInSubgraph = 2355
                }
            }
        )
        float inputs:HeightBias = 0.005 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1992.2212, 111.96069)
                    int stackingOrderInSubgraph = 2355
                }
            }
        )
        float2 inputs:TextureCoordinate = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1647.3922, 86.88366)
                    int stackingOrderInSubgraph = 2356
                }
            }
        )
        float3 outputs:Normal (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (97.3956, 180.89505)
                    int stackingOrderInSubgraph = 212
                }
            }
        )
        float3 outputs:Normal.connect = </Root/NormalFromHeightmapChaos/CrossProduct.outputs:out>
        float2 ui:nodegraph:node:pos = (-631.0861, 133.23294)
        int ui:nodegraph:node:stackingOrder = 1
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (735.79895, 133.74709)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 212

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/NormalFromHeightmapChaos.inputs:HeightBias>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1497.6055, -9.171875)
            int ui:nodegraph:node:stackingOrder = 2360
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/NormalFromHeightmapChaos.inputs:HeightBias>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1499.8828, 204.79688)
            int ui:nodegraph:node:stackingOrder = 2359
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Combine2.outputs:out>
            float2 inputs:in2.connect = </Root/NormalFromHeightmapChaos/InputTextureCoordinate_1.outputs:Add_out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1127.0687, -41.542545)
            int ui:nodegraph:node:stackingOrder = 2155
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/NormalFromHeightmapChaos/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Combine2_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1130.3477, 211.55078)
            int ui:nodegraph:node:stackingOrder = 28
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/NormalFromHeightmapChaos/Subtract_2.outputs:out>
            float inputs:in2.connect = </Root/NormalFromHeightmapChaos.inputs:Height>
            float outputs:out
            float2 ui:nodegraph:node:pos = (49.975502, 29.26704)
            int ui:nodegraph:node:stackingOrder = 2369
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/NormalFromHeightmapChaos.inputs:Height>
            float inputs:in2.connect = </Root/NormalFromHeightmapChaos/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (55.22138, 225.42062)
            int ui:nodegraph:node:stackingOrder = 2371
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1 = 1
            float inputs:in2
            float inputs:in3.connect = </Root/NormalFromHeightmapChaos/Multiply.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (248.24486, 28.635298)
            int ui:nodegraph:node:stackingOrder = 2363
        }

        def Shader "Combine3_1"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1
            float inputs:in2 = 1
            float inputs:in3.connect = </Root/NormalFromHeightmapChaos/Multiply_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (249.70345, 204.34573)
            int ui:nodegraph:node:stackingOrder = 2365
        }

        def Shader "CrossProduct"
        {
            uniform token info:id = "ND_crossproduct_vector3"
            float3 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Combine3.outputs:out>
            float3 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Combine3_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (455.91394, 119.40798)
            int ui:nodegraph:node:stackingOrder = 2372
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos.inputs:TextureCoordinate>
            float2 ui:nodegraph:node:pos = (-1404.6279, 88.48882)
            int ui:nodegraph:node:stackingOrder = 2494
        }

        def NodeGraph "Motion_4WayChaos"
        {
            float inputs:Divisor = 0.25 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-231.29219, 333.7716)
                        int stackingOrderInSubgraph = 351
                    }
                }
            )
            float inputs:Speed = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-1317.6787, 417.50687)
                        int stackingOrderInSubgraph = 873
                    }
                }
            )
            asset inputs:Texture = @../Texture/DefaultTexture1.png@ (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-926.99274, 539.58527)
                        int stackingOrderInSubgraph = 634
                    }
                }
            )
            asset inputs:Texture.connect = </Root/NormalFromHeightmapChaos/HeightMap.outputs:out>
            float2 inputs:TextureCoordinate = (0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-1456.6433, -271.10068)
                        int stackingOrderInSubgraph = 816
                    }
                }
            )
            float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Add.outputs:out>
            float3 outputs:Result.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Multiply.outputs:out>
            float2 ui:nodegraph:node:pos = (-776.5464, -141.19461)
            int ui:nodegraph:node:stackingOrder = 2495
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (219.03133, -27.371452)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 886

            def "Panner_1" (
                active = true
                instanceable = true
                references = </Root/Panner>
            )
            {
                float2 inputs:Speed = (0.1, 0.1)
                float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:TextureCoordinate>
                float inputs:Time.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Multiply_1.outputs:out>
                float2 ui:nodegraph:node:pos = (-956.33856, -298.5887)
                int ui:nodegraph:node:stackingOrder = 817
            }

            def "Panner_2" (
                active = true
                instanceable = true
                references = </Root/Panner>
            )
            {
                float2 inputs:Speed = (-0.1, -0.1)
                float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add_2.outputs:out>
                float inputs:Time.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Multiply_1.outputs:out>
                float2 ui:nodegraph:node:pos = (-951.30914, -111.23219)
                int ui:nodegraph:node:stackingOrder = 909
            }

            def Shader "Add_2"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:TextureCoordinate>
                float2 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/ConstantFloat2.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1178.9521, -136.77795)
                int ui:nodegraph:node:stackingOrder = 333
            }

            def Shader "ConstantFloat2"
            {
                uniform token info:id = "ND_constant_vector2"
                float2 inputs:value = (0.418, 0.3548)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1345.3597, -127.29697)
                int ui:nodegraph:node:stackingOrder = 333
            }

            def "Panner_3" (
                active = true
                instanceable = true
                references = </Root/Panner>
            )
            {
                float2 inputs:Speed = (-0.1, 0.1)
                float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add_3.outputs:out>
                float inputs:Time.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Multiply_1.outputs:out>
                float2 ui:nodegraph:node:pos = (-946.8168, 84.72011)
                int ui:nodegraph:node:stackingOrder = 631
            }

            def Shader "Add_3"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:TextureCoordinate>
                float2 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/ConstantFloat2_1.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1170.0529, 95.93252)
                int ui:nodegraph:node:stackingOrder = 561
            }

            def Shader "ConstantFloat2_1"
            {
                uniform token info:id = "ND_constant_vector2"
                float2 inputs:value = (0.8648, 0.14838)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1345.7959, 100.02505)
                int ui:nodegraph:node:stackingOrder = 561
            }

            def "Panner_4" (
                active = true
                instanceable = true
                references = </Root/Panner>
            )
            {
                float2 inputs:Speed = (0.1, -0.1)
                float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add_5.outputs:out>
                float inputs:Time.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Multiply_1.outputs:out>
                float2 ui:nodegraph:node:pos = (-949.9716, 260.35675)
                int ui:nodegraph:node:stackingOrder = 773
            }

            def Shader "ConstantFloat2_2"
            {
                uniform token info:id = "ND_constant_vector2"
                float2 inputs:value = (0.65134, 0.751638)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1356.5637, 260.5557)
                int ui:nodegraph:node:stackingOrder = 572
            }

            def Shader "Add_5"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:TextureCoordinate>
                float2 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/ConstantFloat2_2.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1159.5399, 263.73547)
                int ui:nodegraph:node:stackingOrder = 568
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_vector3FA"
                float3 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add.outputs:out>
                prepend float inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Divisor>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-55.287888, 109.62064)
                int ui:nodegraph:node:stackingOrder = 743
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @../Texture/DefaultTexture1.png@
                prepend asset inputs:file.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Texture>
                string inputs:filtertype = "linear"
                prepend float2 inputs:texcoord.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Panner_1.outputs:Result>
                string inputs:uaddressmode = "periodic"
                string inputs:vaddressmode = "periodic"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-629.8757, -606.02545)
                int ui:nodegraph:node:stackingOrder = 902
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Speed>
                float inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Time.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1172.9697, 418.93082)
                int ui:nodegraph:node:stackingOrder = 731
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1318.7048, 487.54507)
                int ui:nodegraph:node:stackingOrder = 872
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_vector3"
                prepend float3 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add_1.outputs:out>
                float3 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add_4.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-257.45703, 80.65418)
                int ui:nodegraph:node:stackingOrder = 769
            }

            def Shader "Image_3"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @../Texture/DefaultTexture1.png@
                prepend asset inputs:file.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Texture>
                string inputs:filtertype = "linear"
                prepend float2 inputs:texcoord.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Panner_3.outputs:Result>
                string inputs:uaddressmode = "periodic"
                string inputs:vaddressmode = "periodic"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-614.4748, 43.042473)
                int ui:nodegraph:node:stackingOrder = 897
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_vector3"
                float3 inputs:default
                asset inputs:file = @../Texture/DefaultTexture1.png@
                asset inputs:file.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Texture>
                string inputs:filtertype = "linear"
                float2 inputs:texcoord.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Panner_2.outputs:Result>
                string inputs:uaddressmode = "periodic"
                string inputs:vaddressmode = "periodic"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-517.6736, -353.8751)
                int ui:nodegraph:node:stackingOrder = 900
            }

            def Shader "Add_1"
            {
                uniform token info:id = "ND_add_vector3"
                prepend float3 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Image.outputs:out>
                float3 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Image_1.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-231.76506, -228.74396)
                int ui:nodegraph:node:stackingOrder = 840
            }

            def Shader "Image_4"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @../Texture/DefaultTexture1.png@
                prepend asset inputs:file.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Texture>
                string inputs:filtertype = "linear"
                prepend float2 inputs:texcoord.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Panner_4.outputs:Result>
                string inputs:uaddressmode = "periodic"
                string inputs:vaddressmode = "periodic"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-483.71893, 348.3796)
                int ui:nodegraph:node:stackingOrder = 869
            }

            def Shader "Add_4"
            {
                uniform token info:id = "ND_add_vector3"
                prepend float3 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Image_3.outputs:out>
                float3 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Image_4.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-306.89963, 274.40762)
                int ui:nodegraph:node:stackingOrder = 850
            }
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.outputs:Result>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-532.0221, -72.79432)
            int ui:nodegraph:node:stackingOrder = 2487
        }

        def Shader "Subtract_2"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/NormalFromHeightmapChaos/Separate3.outputs:outx>
            float inputs:in2.connect = </Root/NormalFromHeightmapChaos/Separate3_1.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-348.76654, -72.654045)
            int ui:nodegraph:node:stackingOrder = 2487
        }

        def "Motion_4WayChaos_1" (
            active = true
            instanceable = true
            references = </Root/NormalFromHeightmapChaos/Motion_4WayChaos>
        )
        {
            asset inputs:Texture.connect = </Root/NormalFromHeightmapChaos/HeightMap.outputs:out>
            float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/InputTextureCoordinate_1.outputs:Add_out>
            float2 ui:nodegraph:node:pos = (-774.7422, 56.08916)
            int ui:nodegraph:node:stackingOrder = 2487
        }

        def Shader "Separate3_1"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos_1.outputs:Result>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-521.9322, 105.37446)
            int ui:nodegraph:node:stackingOrder = 2491
        }

        def "Motion_4WayChaos_2" (
            active = true
            instanceable = true
            references = </Root/NormalFromHeightmapChaos/Motion_4WayChaos>
        )
        {
            asset inputs:Texture.connect = </Root/NormalFromHeightmapChaos/HeightMap.outputs:out>
            float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Add_1.outputs:out>
            float2 ui:nodegraph:node:pos = (-782.84467, 247.44806)
            int ui:nodegraph:node:stackingOrder = 2487
        }

        def Shader "Separate3_2"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos_2.outputs:Result>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-512.3706, 296.7813)
            int ui:nodegraph:node:stackingOrder = 2493
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/NormalFromHeightmapChaos/Separate3_2.outputs:outx>
            float inputs:in2.connect = </Root/NormalFromHeightmapChaos/Separate3_1.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-345.94598, 282.70505)
            int ui:nodegraph:node:stackingOrder = 2487
        }

        def Shader "HeightMap"
        {
            uniform token info:id = "ND_constant_filename"
            asset inputs:value = @../Texture/DefaultTexture1.png@
            asset outputs:out
            float2 ui:nodegraph:node:pos = (-1103.3353, 67.50774)
            int ui:nodegraph:node:stackingOrder = 2489
        }
    }

    def NodeGraph "Panner" (
        active = true
    )
    {
        float2 inputs:Speed = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-864.5945, -17.178223)
                    int stackingOrderInSubgraph = 2072
                }
            }
        )
        float2 inputs:TextureCoordinate = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-913.6235, -141.34178)
                    int stackingOrderInSubgraph = 2052
                }
            }
        )
        float inputs:Time = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-796.8127, 95.73418)
                    int stackingOrderInSubgraph = 2073
                }
            }
        )
        float2 outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-187.91405, -91.772125)
                    int stackingOrderInSubgraph = 2036
                }
            }
        )
        float2 outputs:Result.connect = </Root/Panner/Add.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (147.09917, -130.74405)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2049

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/Panner.inputs:TextureCoordinate>
            float2 ui:nodegraph:node:pos = (-617.29645, -151.0586)
            int ui:nodegraph:node:stackingOrder = 2047
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/Panner.inputs:Speed>
            float inputs:in2.connect = </Root/Panner.inputs:Time>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-612.6205, 38.8978)
            int ui:nodegraph:node:stackingOrder = 2059
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_vector2"
            float2 inputs:in.connect = </Root/Panner/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-406.75967, 85.55603)
            int ui:nodegraph:node:stackingOrder = 2066
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/Panner/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/Panner/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-153.45984, -121.54819)
            int ui:nodegraph:node:stackingOrder = 2062
        }
    }

    def NodeGraph "RadialGradientExponential" (
        active = true
    )
    {
        reorder nameChildren = ["MTLSelect", "InputTextureCoordinate_1", "MTLDistance", "Divide", "Oneminus", "ExponentialDensity_1"]
        float2 inputs:CenterPosition = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1506.5323, -27.999403)
                    int stackingOrderInSubgraph = 2095
                }
            }
        )
        float inputs:Density = 2.33 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1422.6837, 226.98267)
                    int stackingOrderInSubgraph = 2095
                }
            }
        )
        bool inputs:InvertDensity = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-795.2717, 388.53506)
                    int stackingOrderInSubgraph = 2195
                }
            }
        )
        float inputs:Radius = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1441.9808, 63.12706)
                    int stackingOrderInSubgraph = 2098
                }
            }
        )
        float2 inputs:UVs = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1742.797, -136.09937)
                    int stackingOrderInSubgraph = 2095
                }
            }
        )
        float outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-585, 126.5)
                    int stackingOrderInSubgraph = 4
                }
            }
        )
        float outputs:Result.connect = </Root/RadialGradientExponential/MTLSelect.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/RadialGradientExponential/Oneminus_1.outputs:out>
            float inputs:b.connect = </Root/RadialGradientExponential/ExponentialDensity_2.outputs:Result>
            bool inputs:c.connect = </Root/RadialGradientExponential.inputs:InvertDensity>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-279.20312, 70.53516)
            int ui:nodegraph:node:stackingOrder = 6
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/RadialGradientExponential.inputs:UVs>
            float2 ui:nodegraph:node:pos = (-1486.461, -150.98222)
            int ui:nodegraph:node:stackingOrder = 2095
        }

        def Shader "MTLDistance"
        {
            uniform token info:id = "ND_MTL_distance_vector2_float"
            float2 inputs:x.connect = </Root/RadialGradientExponential/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:y.connect = </Root/RadialGradientExponential.inputs:CenterPosition>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1265.7635, -92.36622)
            int ui:nodegraph:node:stackingOrder = 2095
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/RadialGradientExponential/MTLDistance.outputs:out>
            float inputs:in2.connect = </Root/RadialGradientExponential.inputs:Radius>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1115.8015, -22.846767)
            int ui:nodegraph:node:stackingOrder = 2100
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/RadialGradientExponential/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-935.5731, -23.994514)
            int ui:nodegraph:node:stackingOrder = 2186
        }

        def "ExponentialDensity_1" (
            active = true
            instanceable = true
            references = </Root/ExponentialDensity>
        )
        {
            float inputs:Density.connect = </Root/RadialGradientExponential.inputs:Density>
            float inputs:Depth.connect = </Root/RadialGradientExponential/Oneminus.outputs:out>
            bool inputs:UseExp2
            float2 ui:nodegraph:node:pos = (-689.39856, -48.903008)
            int ui:nodegraph:node:stackingOrder = 2188
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/RadialGradientExponential/ExponentialDensity_1.outputs:Result>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-515.92804, 0.79983246)
            int ui:nodegraph:node:stackingOrder = 2186
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Normal Density"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Oneminus_1", "p:Oneminus", "p:ExponentialDensity_1"]
        }

        def "ExponentialDensity_2" (
            active = true
            instanceable = true
            references = </Root/ExponentialDensity>
        )
        {
            float inputs:Density.connect = </Root/RadialGradientExponential.inputs:Density>
            float inputs:Depth.connect = </Root/RadialGradientExponential/Divide.outputs:out>
            bool inputs:UseExp2
            float2 ui:nodegraph:node:pos = (-743.68945, 187.0011)
            int ui:nodegraph:node:stackingOrder = 2192
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Inverted Density"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:ExponentialDensity_2"]
        }
    }

    def NodeGraph "ExponentialDensity" (
        active = true
    )
    {
        float inputs:Density = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-827.46875, 75.83594)
                    int stackingOrderInSubgraph = 72
                }
            }
        )
        float inputs:Depth = 0.66 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-823.4258, -61.14453)
                    int stackingOrderInSubgraph = 71
                }
            }
        )
        bool inputs:UseExp2 = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-834.8203, 156.03906)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-54, 46.5)
                    int stackingOrderInSubgraph = 50
                }
            }
        )
        float outputs:Result.connect = </Root/ExponentialDensity/IfGreater.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (430.78516, 88.74609)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 21

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/ExponentialDensity.inputs:Depth>
            float inputs:in2.connect = </Root/ExponentialDensity.inputs:Density>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-688.7344, 33.285156)
            int ui:nodegraph:node:stackingOrder = 6
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/ExponentialDensity/Multiply.outputs:out>
            float inputs:in2.connect = </Root/ExponentialDensity/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-575.504, 60.97754)
            int ui:nodegraph:node:stackingOrder = 75
        }

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/ExponentialDensity/Multiply.outputs:out>
            float inputs:b.connect = </Root/ExponentialDensity/Multiply_1.outputs:out>
            prepend bool inputs:c.connect = </Root/ExponentialDensity.inputs:UseExp2>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-406.77927, 35.85241)
            int ui:nodegraph:node:stackingOrder = 73
        }

        def Shader "Exp"
        {
            uniform token info:id = "ND_exp_float"
            float inputs:in.connect = </Root/ExponentialDensity/MTLSelect.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-219.08594, 109.783585)
            int ui:nodegraph:node:stackingOrder = 85
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/ExponentialDensity/ConstantFloat.outputs:out>
            float inputs:in2.connect = </Root/ExponentialDensity/Exp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-25.392578, 52.830765)
            int ui:nodegraph:node:stackingOrder = 82
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-209.85646, 45.53051)
            int ui:nodegraph:node:stackingOrder = 80
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1.connect = </Root/ExponentialDensity/Divide.outputs:out>
            float inputs:in2.connect = </Root/ExponentialDensity/ConstantFloat_1.outputs:out>
            float inputs:value1.connect = </Root/ExponentialDensity.inputs:Depth>
            float inputs:value2.connect = </Root/ExponentialDensity/ConstantFloat_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (237.91406, -65.984375)
            int ui:nodegraph:node:stackingOrder = 68
        }

        def Shader "ConstantFloat_1"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (7.6154027, 125.03763)
            int ui:nodegraph:node:stackingOrder = 87
        }

        def Shader "ConstantFloat_2"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0
            float outputs:out
            float2 ui:nodegraph:node:pos = (-94.73088, -26.531519)
            int ui:nodegraph:node:stackingOrder = 78
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Skip if depth less than 0"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:IfGreater"]
        }
    }

    def NodeGraph "DiamondGradient" (
        active = true
    )
    {
        float inputs:Falloff = 3 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-567.7656, 385.57812)
                    int stackingOrderInSubgraph = 9
                }
            }
        )
        float outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-398, 58.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Result.connect = </Root/DiamondGradient/Power.outputs:out>
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Result"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (-37.78125, 96.77734)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 7

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/DiamondGradient/Multiply.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient.inputs:Falloff>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-306.58203, 112.69922)
            int ui:nodegraph:node:stackingOrder = 5
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/DiamondGradient/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient/Oneminus_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-463.65625, 100.01953)
            int ui:nodegraph:node:stackingOrder = 11
        }

        def Shader "RampHorizontal"
        {
            uniform token info:id = "ND_ramplr_float"
            float2 inputs:texcoord
            float inputs:valuer = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1485.8318, -40.621353)
            int ui:nodegraph:node:stackingOrder = 75
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/DiamondGradient/RampHorizontal.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient/ConstantFloat.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1314.4142, -26.891853)
            int ui:nodegraph:node:stackingOrder = 112
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = -0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1489.3396, 277.49194)
            int ui:nodegraph:node:stackingOrder = 126
        }

        def Shader "RampVertical"
        {
            uniform token info:id = "ND_ramptb_float"
            float2 inputs:texcoord
            float inputs:valueb = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1488.7185, 132.33177)
            int ui:nodegraph:node:stackingOrder = 75
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/DiamondGradient/RampVertical.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient/ConstantFloat.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1307.2775, 158.47144)
            int ui:nodegraph:node:stackingOrder = 112
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/DiamondGradient/Add.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient/ConstantFloat_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1139.3967, -19.698673)
            int ui:nodegraph:node:stackingOrder = 119
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/DiamondGradient/Add_1.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient/ConstantFloat_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1137.7772, 158.40472)
            int ui:nodegraph:node:stackingOrder = 114
        }

        def Shader "ConstantFloat_1"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1309.4547, 349.36447)
            int ui:nodegraph:node:stackingOrder = 117
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/DiamondGradient/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-985.206, -20.795763)
            int ui:nodegraph:node:stackingOrder = 123
        }

        def Shader "Abs_1"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/DiamondGradient/Multiply_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-982.7079, 156.79947)
            int ui:nodegraph:node:stackingOrder = 121
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/DiamondGradient/Abs.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-784.344, -18.292883)
            int ui:nodegraph:node:stackingOrder = 124
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/DiamondGradient/Abs_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-774.9831, 153.36098)
            int ui:nodegraph:node:stackingOrder = 125
        }
    }

    def NodeGraph "SmoothCurve" (
        active = true
    )
    {
        float inputs:Tangent0 = 2 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1206.3759, -22.027498)
                    int stackingOrderInSubgraph = 86
                }
            }
        )
        float inputs:Tangent1 = 2 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1236.3954, 181.50896)
                    int stackingOrderInSubgraph = 131
                }
            }
        )
        float inputs:X = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1207.0067, -234.00653)
                    int stackingOrderInSubgraph = 227
                }
            }
        )
        float outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-609, 93.5)
                    int stackingOrderInSubgraph = 4
                }
            }
        )
        float outputs:Result.connect = </Root/SmoothCurve/Add.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 233

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/SmoothCurve/Multiply.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve/Add_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-197.05469, 94.07031)
            int ui:nodegraph:node:stackingOrder = 236
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SmoothCurve/RampHorizontal.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve.inputs:Tangent0>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-339.5078, -12.4296875)
            int ui:nodegraph:node:stackingOrder = 5
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/SmoothCurve/Multiply_1.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve/Multiply_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-272.875, 234.78516)
            int ui:nodegraph:node:stackingOrder = 235
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SmoothCurve/RampHorizontal.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve/Multiply_6.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-372.6544, 163.3252)
            int ui:nodegraph:node:stackingOrder = 75
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SmoothCurve/RampHorizontal.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve/Multiply_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-364.65573, 292.18558)
            int ui:nodegraph:node:stackingOrder = 34
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SmoothCurve/RampHorizontal.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve/Multiply_4.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-477.95105, 321.19894)
            int ui:nodegraph:node:stackingOrder = 36
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SmoothCurve/Subtract.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve.inputs:Tangent0>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-675.5531, 351.6344)
            int ui:nodegraph:node:stackingOrder = 37
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/SmoothCurve/Subtract_1.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve/ConstantFloat_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-814.83246, 385.6991)
            int ui:nodegraph:node:stackingOrder = 211
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/SmoothCurve/ConstantFloat.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve.inputs:Tangent1>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-951.8519, 390.9157)
            int ui:nodegraph:node:stackingOrder = 211
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 3
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1182.6691, 383.67313)
            int ui:nodegraph:node:stackingOrder = 211
        }

        def Shader "ConstantFloat_1"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1012.6909, 232.45567)
            int ui:nodegraph:node:stackingOrder = 131
        }

        def Shader "Add_2"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/SmoothCurve.inputs:Tangent0>
            float inputs:in2.connect = </Root/SmoothCurve.inputs:Tangent1>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-999.1681, 162.72028)
            int ui:nodegraph:node:stackingOrder = 131
        }

        def Shader "Subtract_2"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/SmoothCurve/Add_2.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve/ConstantFloat_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-785.20795, 186.74532)
            int ui:nodegraph:node:stackingOrder = 70
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SmoothCurve/RampHorizontal.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve/Subtract_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-635.4688, 176.26959)
            int ui:nodegraph:node:stackingOrder = 79
        }

        def Shader "Multiply_6"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SmoothCurve/RampHorizontal.outputs:out>
            float inputs:in2.connect = </Root/SmoothCurve/Multiply_5.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-497.33276, 166.97969)
            int ui:nodegraph:node:stackingOrder = 77
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "C"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["i:inputs:Tangent0"]
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "A"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["i:inputs:Tangent1", "p:Add_2", "p:ConstantFloat_1"]
        }

        def Scope "Group3" (
            kind = "group"
        )
        {
            string ui:group:annotation = "B"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Subtract", "p:ConstantFloat", "p:Subtract_1"]
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/SmoothCurve.inputs:X>
            float inputs:in2
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1013.9023, -230.00409)
            int ui:nodegraph:node:stackingOrder = 245
        }

        def Shader "RampHorizontal"
        {
            uniform token info:id = "ND_ramplr_float"
            float2 inputs:texcoord.connect = </Root/SmoothCurve/Combine2.outputs:out>
            float inputs:valuel
            float inputs:valuer = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-821.55396, -288.2892)
            int ui:nodegraph:node:stackingOrder = 240
        }
    }

    def NodeGraph "ValueStep" (
        active = true
    )
    {
        float inputs:Gradient = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1194.7964, -265.66528)
                    int stackingOrderInSubgraph = 114
                }
            }
        )
        float inputs:MaskOffsetValue = -1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-759.9348, -33.56316)
                    int stackingOrderInSubgraph = 170
                }
            }
        )
        float inputs:NumberBeforeWhiteResult = 2 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-761.99603, 102.954956)
                    int stackingOrderInSubgraph = 267
                }
            }
        )
        float outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-237, 58.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Result.connect = </Root/ValueStep/IfEqual.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (464.9129, 77.12109)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 136

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/ValueStep.inputs:Gradient>
            float inputs:in2.connect = </Root/ValueStep.inputs:MaskOffsetValue>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-438.3527, -51.5029)
            int ui:nodegraph:node:stackingOrder = 168
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/ValueStep/Add.outputs:out>
            float inputs:in2.connect = </Root/ValueStep/Add_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-331.20245, -20.147898)
            int ui:nodegraph:node:stackingOrder = 271
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/ValueStep.inputs:NumberBeforeWhiteResult>
            float inputs:in2.connect = </Root/ValueStep/ConstantFloat.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-499.95447, 66.529236)
            int ui:nodegraph:node:stackingOrder = 133
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-719.6239, 180.2421)
            int ui:nodegraph:node:stackingOrder = 268
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/ValueStep/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-148.78296, -22.146284)
            int ui:nodegraph:node:stackingOrder = 164
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/ValueStep/Fractional.outputs:out>
            float inputs:in2.connect = </Root/ValueStep/Add_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (6.7544127, 7.2363434)
            int ui:nodegraph:node:stackingOrder = 162
        }

        def Shader "Ceiling"
        {
            uniform token info:id = "ND_ceil_float"
            float inputs:in.connect = </Root/ValueStep/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (112.020935, 4.093989)
            int ui:nodegraph:node:stackingOrder = 187
        }

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1 = 1
            float inputs:in2
            float inputs:value1.connect = </Root/ValueStep/Ceiling.outputs:out>
            float inputs:value2.connect = </Root/ValueStep.inputs:NumberBeforeWhiteResult>
            float outputs:out
            float2 ui:nodegraph:node:pos = (272.71146, 45.555332)
            int ui:nodegraph:node:stackingOrder = 141
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/ValueStep/RampVertical.outputs:out>
            float inputs:in2.connect = </Root/ValueStep/ConstantFloat_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-541.8481, -271.3871)
            int ui:nodegraph:node:stackingOrder = 277
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/ValueStep.inputs:Gradient>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-964.01306, -335.97202)
            int ui:nodegraph:node:stackingOrder = 284
        }

        def Shader "RampVertical"
        {
            uniform token info:id = "ND_ramptb_float"
            float2 inputs:texcoord.connect = </Root/ValueStep/Combine2.outputs:out>
            float inputs:valueb = 1
            float inputs:valuet = 0
            float outputs:out
            float2 ui:nodegraph:node:pos = (-788.198, -368.03232)
            int ui:nodegraph:node:stackingOrder = 265
        }

        def Shader "ConstantFloat_1"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 3
            float outputs:out
            float2 ui:nodegraph:node:pos = (-764.2409, -237.59608)
            int ui:nodegraph:node:stackingOrder = 280
        }
    }

    def NodeGraph "FuzzyShading" (
        active = true
    )
    {
        float3 inputs:BaseColor = (0.5, 0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-243.63281, -15.300781)
                    int stackingOrderInSubgraph = 119
                }
            }
        )
        float inputs:CoreDarkness = 0.8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1282.8281, 309.34375)
                    int stackingOrderInSubgraph = 435
                }
            }
        )
        float inputs:EdgeBrightness = 0.8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1527.9324, 475.07663)
                    int stackingOrderInSubgraph = 590
                }
            }
        )
        float3 inputs:Normal = (0.5, 0.5, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1767.2695, 71.55078)
                    int stackingOrderInSubgraph = 380
                }
            }
        )
        float inputs:Power = 6 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1528.8191, 406.77194)
                    int stackingOrderInSubgraph = 590
                }
            }
        )
        float3 outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-568, 53.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Result.connect = </Root/FuzzyShading/Multiply.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/FuzzyShading.inputs:BaseColor>
            float inputs:in2.connect = </Root/FuzzyShading/Add.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-147.1914, 111.12109)
            int ui:nodegraph:node:stackingOrder = 126
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/FuzzyShading/Multiply_1.outputs:out>
            float inputs:in2.connect = </Root/FuzzyShading/Add_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-320.95444, 140.44937)
            int ui:nodegraph:node:stackingOrder = 592
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2", "outputs:out"]
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/FuzzyShading/Power.outputs:out>
            float inputs:in2.connect = </Root/FuzzyShading.inputs:EdgeBrightness>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-473.9835, 397.48022)
            int ui:nodegraph:node:stackingOrder = 549
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/FuzzyShading/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/FuzzyShading/ConstantFloat.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-453, 112.91797)
            int ui:nodegraph:node:stackingOrder = 330
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/FuzzyShading/Multiply_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-626.78906, 102.26953)
            int ui:nodegraph:node:stackingOrder = 113
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0
            float outputs:out
            float2 ui:nodegraph:node:pos = (-657.8594, 187.11719)
            int ui:nodegraph:node:stackingOrder = 132
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/FuzzyShading/Clamp.outputs:out>
            prepend float inputs:in2.connect = </Root/FuzzyShading.inputs:CoreDarkness>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-725.7539, 105.48047)
            int ui:nodegraph:node:stackingOrder = 473
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/FuzzyShading/DotProduct.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (-844.6836, 30.714844)
            int ui:nodegraph:node:stackingOrder = 312
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/FuzzyShading/ViewDirection.outputs:out>
            float3 inputs:in2.connect = </Root/FuzzyShading/NormalMap.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1016.7578, 5.1914062)
            int ui:nodegraph:node:stackingOrder = 315
        }

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/FuzzyShading/Oneminus_1.outputs:out>
            float inputs:in2.connect = </Root/FuzzyShading.inputs:Power>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-595.85065, 353.14038)
            int ui:nodegraph:node:stackingOrder = 549
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/FuzzyShading/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-734.85065, 319.25366)
            int ui:nodegraph:node:stackingOrder = 549
        }

        def Shader "NormalMap"
        {
            uniform token info:id = "ND_normalmap"
            float3 inputs:in.connect = </Root/FuzzyShading.inputs:Normal>
            float inputs:scale
            float3 inputs:tangent
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1337.2031, 152.69873)
            int ui:nodegraph:node:stackingOrder = 480
        }

        def Shader "ViewDirection"
        {
            uniform token info:id = "ND_realitykit_viewdirection_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1401.7319, -1.6616759)
            int ui:nodegraph:node:stackingOrder = 478
        }
    }

    def NodeGraph "FuzzyShadingGrass" (
        active = true
    )
    {
        reorder nameChildren = ["Multiply", "Multiply_1", "Add_1", "Oneminus", "ConstantFloat", "Multiply_2", "Clamp", "DotProduct", "Power", "Oneminus_1", "NormalMap", "ViewDirection", "Clamp_1", "Mix", "Multiply_3", "Desaturation"]
        float inputs:CoreDarkness = 0.8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1282.8281, 309.34375)
                    int stackingOrderInSubgraph = 435
                }
            }
        )
        float3 inputs:Diffuse = (0.5, 0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-602.8555, -49.673847)
                    int stackingOrderInSubgraph = 817
                }
            }
        )
        float inputs:EdgeBrightness = 0.8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1500.8129, 530.26447)
                    int stackingOrderInSubgraph = 812
                }
            }
        )
        float3 inputs:EdgeColor = (1.5, 1.5, 1.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-309.66577, -149.568)
                    int stackingOrderInSubgraph = 777
                }
            }
        )
        float inputs:EdgeDesat = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-588.87933, -338.56982)
                    int stackingOrderInSubgraph = 780
                }
            }
        )
        float3 inputs:Normal = (0.5, 0.5, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1767.2695, 71.55078)
                    int stackingOrderInSubgraph = 380
                }
            }
        )
        float inputs:Power = 6 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1501.6996, 461.95978)
                    int stackingOrderInSubgraph = 812
                }
            }
        )
        float3 outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-568, 53.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Result.connect = </Root/FuzzyShadingGrass/Mix.outputs:out>
        float2 ui:nodegraph:node:pos = (-874.75977, 80.140625)
        int ui:nodegraph:node:stackingOrder = 1
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (301.56857, -48.48062)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 509

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/FuzzyShadingGrass.inputs:Diffuse>
            float inputs:in2.connect = </Root/FuzzyShadingGrass/Add_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-173.75624, 111.12109)
            int ui:nodegraph:node:stackingOrder = 504
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/FuzzyShadingGrass/Power.outputs:out>
            float inputs:in2.connect = </Root/FuzzyShadingGrass.inputs:EdgeBrightness>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-438.9039, 389.09647)
            int ui:nodegraph:node:stackingOrder = 763
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/FuzzyShadingGrass/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/FuzzyShadingGrass/ConstantFloat.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-453, 112.91797)
            int ui:nodegraph:node:stackingOrder = 330
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/FuzzyShadingGrass/Multiply_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-626.78906, 102.26953)
            int ui:nodegraph:node:stackingOrder = 113
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0
            float outputs:out
            float2 ui:nodegraph:node:pos = (-657.8594, 187.11719)
            int ui:nodegraph:node:stackingOrder = 132
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/FuzzyShadingGrass/Clamp.outputs:out>
            float inputs:in2.connect = </Root/FuzzyShadingGrass.inputs:CoreDarkness>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-725.7539, 105.48047)
            int ui:nodegraph:node:stackingOrder = 473
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/FuzzyShadingGrass/DotProduct.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (-844.6836, 30.714844)
            int ui:nodegraph:node:stackingOrder = 312
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/FuzzyShadingGrass/ViewDirection.outputs:out>
            float3 inputs:in2.connect = </Root/FuzzyShadingGrass/NormalMap.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1016.7578, 5.1914062)
            int ui:nodegraph:node:stackingOrder = 315
        }

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/FuzzyShadingGrass/Oneminus_1.outputs:out>
            float inputs:in2.connect = </Root/FuzzyShadingGrass.inputs:Power>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-560.7711, 344.75662)
            int ui:nodegraph:node:stackingOrder = 763
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/FuzzyShadingGrass/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-699.7711, 310.8699)
            int ui:nodegraph:node:stackingOrder = 763
        }

        def Shader "NormalMap"
        {
            uniform token info:id = "ND_normalmap"
            float3 inputs:in.connect = </Root/FuzzyShadingGrass.inputs:Normal>
            float inputs:scale
            float3 inputs:tangent
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1337.2031, 152.69873)
            int ui:nodegraph:node:stackingOrder = 480
        }

        def Shader "ViewDirection"
        {
            uniform token info:id = "ND_realitykit_viewdirection_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1401.7319, -1.6616759)
            int ui:nodegraph:node:stackingOrder = 478
        }

        def Shader "Clamp_1"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/FuzzyShadingGrass/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-275.0988, 347.45447)
            int ui:nodegraph:node:stackingOrder = 763
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_vector3"
            float3 inputs:bg.connect = </Root/FuzzyShadingGrass/Multiply.outputs:out>
            float3 inputs:fg.connect = </Root/FuzzyShadingGrass/Multiply_3.outputs:out>
            prepend float inputs:mix.connect = </Root/FuzzyShadingGrass/Clamp_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (77.369804, 30.308006)
            int ui:nodegraph:node:stackingOrder = 518
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_vector3"
            float3 inputs:in1.connect = </Root/FuzzyShadingGrass/Desaturation_1.outputs:Mix_1_out>
            float3 inputs:in2.connect = </Root/FuzzyShadingGrass.inputs:EdgeColor>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-158.20692, -180.90167)
            int ui:nodegraph:node:stackingOrder = 768
        }

        def "Desaturation_1" (
            active = true
            instanceable = true
            references = </Root/Desaturation>
        )
        {
            float3 inputs:Color.connect = </Root/FuzzyShadingGrass.inputs:Diffuse>
            float inputs:Fraction.connect = </Root/FuzzyShadingGrass.inputs:EdgeDesat>
            float2 ui:nodegraph:node:pos = (-303.52817, -256.78995)
            int ui:nodegraph:node:stackingOrder = 782
        }
    }

    def NodeGraph "Desaturation"
    {
        float3 inputs:Color (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (73.527016, 244.5968)
                    int stackingOrderInSubgraph = 1022
                }
            }
        )
        float inputs:Fraction (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (506.718, 242.41565)
                    int stackingOrderInSubgraph = 1016
                }
            }
        )
        float3 outputs:Mix_1_out.connect = </Root/Desaturation/Mix_1.outputs:out>
        float2 ui:nodegraph:node:pos = (-289.77945, -286.87186)
        int ui:nodegraph:node:stackingOrder = 777
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Mix_1_out"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1034.25, 157)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1024

        def Shader "DotProduct_1"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/Desaturation/BrightFactor.outputs:out>
            float3 inputs:in2.connect = </Root/Desaturation.inputs:Color>
            float outputs:out
            float2 ui:nodegraph:node:pos = (290.56076, 155.64995)
            int ui:nodegraph:node:stackingOrder = 1009
        }

        def Shader "Mix_1"
        {
            uniform token info:id = "ND_mix_vector3"
            float3 inputs:bg.connect = </Root/Desaturation.inputs:Color>
            float3 inputs:fg.connect = </Root/Desaturation/Convert.outputs:out>
            float inputs:mix.connect = </Root/Desaturation.inputs:Fraction>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (781.5, 157)
            int ui:nodegraph:node:stackingOrder = 1020
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_vector3"
            float inputs:in.connect = </Root/Desaturation/DotProduct_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (509.56076, 155.64995)
            int ui:nodegraph:node:stackingOrder = 1009
        }

        def Shader "BrightFactor"
        {
            uniform token info:id = "ND_constant_vector3"
            float3 inputs:value = (0.212639, 0.715169, 0.072192)
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (82.55891, 142.59831)
            int ui:nodegraph:node:stackingOrder = 1025
        }
    }

    def NodeGraph "BlackBody_WIP_" (
        active = true
    )
    {
        float inputs:Temp_K = 1000 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1247.8112, -91.47907)
                    int stackingOrderInSubgraph = 1067
                }
            }
        )
        float3 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-521, 68.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Out.connect = </Root/BlackBody_WIP_/Multiply_4.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (627.04285, 131.03325)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 559

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high = 40000
            float inputs:in.connect = </Root/BlackBody_WIP_.inputs:Temp_K>
            float inputs:low = 1000
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1066.4313, -11.416207)
            int ui:nodegraph:node:stackingOrder = 1090
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Clamp.outputs:out>
            float inputs:in2 = 100
            float outputs:out
            float2 ui:nodegraph:node:pos = (-900.7795, -48.200657)
            int ui:nodegraph:node:stackingOrder = 891
        }

        def Shader "Remap"
        {
            uniform token info:id = "ND_remap_vector3"
            float3 inputs:in.connect = </Root/BlackBody_WIP_/IfGreater.outputs:out>
            float3 inputs:inhigh = (255, 255, 255)
            float3 inputs:inlow
            float3 inputs:outhigh
            float3 inputs:outlow
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (193.0256, 10.5726795)
            int ui:nodegraph:node:stackingOrder = 1080
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_vector3"
            float3 inputs:in1.connect = </Root/BlackBody_WIP_/Combine3.outputs:out>
            float3 inputs:in2.connect = </Root/BlackBody_WIP_/Combine3_1.outputs:out>
            float inputs:value1.connect = </Root/BlackBody_WIP_/Divide.outputs:out>
            float inputs:value2 = 66
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-57.987427, -48.228558)
            int ui:nodegraph:node:stackingOrder = 1088
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Multiply.outputs:out>
            float inputs:in2.connect = </Root/BlackBody_WIP_/Multiply_1.outputs:out>
            float inputs:in3 = 255
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-290.7301, -12.220539)
            int ui:nodegraph:node:stackingOrder = 1086
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Divide.outputs:out>
            float inputs:in2 = 60
            float outputs:out
            float2 ui:nodegraph:node:pos = (-784.60504, 10.323954)
            int ui:nodegraph:node:stackingOrder = 997
        }

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Subtract.outputs:out>
            float inputs:in2 = -0.13320476
            float outputs:out
            float2 ui:nodegraph:node:pos = (-625.0057, -4.5729046)
            int ui:nodegraph:node:stackingOrder = 997
        }

        def Shader "Power_1"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Subtract.outputs:out>
            float inputs:in2 = -0.075514846
            float outputs:out
            float2 ui:nodegraph:node:pos = (-627.09, 60.431995)
            int ui:nodegraph:node:stackingOrder = 997
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Power.outputs:out>
            float inputs:in2 = 329.69873
            float outputs:out
            float2 ui:nodegraph:node:pos = (-481.9064, -24.712324)
            int ui:nodegraph:node:stackingOrder = 997
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Power_1.outputs:out>
            float inputs:in2 = 288.12216
            float outputs:out
            float2 ui:nodegraph:node:pos = (-472.2278, 57.128056)
            int ui:nodegraph:node:stackingOrder = 997
        }

        def Shader "Combine3_1"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1 = 255
            float inputs:in2.connect = </Root/BlackBody_WIP_/Subtract_1.outputs:out>
            float inputs:in3.connect = </Root/BlackBody_WIP_/IfGreater_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-265.38214, 79.347015)
            int ui:nodegraph:node:stackingOrder = 1065
        }

        def Shader "Ln"
        {
            uniform token info:id = "ND_ln_float"
            float inputs:in.connect = </Root/BlackBody_WIP_/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-751.75037, 145.10014)
            int ui:nodegraph:node:stackingOrder = 1016
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Ln.outputs:out>
            float inputs:in2 = 99.4708
            float outputs:out
            float2 ui:nodegraph:node:pos = (-609.7881, 135.26122)
            int ui:nodegraph:node:stackingOrder = 1013
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Multiply_2.outputs:out>
            float inputs:in2 = 161.11957
            float outputs:out
            float2 ui:nodegraph:node:pos = (-516.3694, 156.05658)
            int ui:nodegraph:node:stackingOrder = 1018
        }

        def Shader "Subtract_2"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Divide.outputs:out>
            float inputs:in2 = 10
            float outputs:out
            float2 ui:nodegraph:node:pos = (-843.0118, 299.8457)
            int ui:nodegraph:node:stackingOrder = 1017
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Ln_1"
        {
            uniform token info:id = "ND_ln_float"
            float inputs:in.connect = </Root/BlackBody_WIP_/Subtract_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-709.3239, 350.60968)
            int ui:nodegraph:node:stackingOrder = 1060
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Ln_1.outputs:out>
            float inputs:in2 = 138.51773
            float outputs:out
            float2 ui:nodegraph:node:pos = (-554.2042, 351.3871)
            int ui:nodegraph:node:stackingOrder = 1060
        }

        def Shader "Subtract_3"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Multiply_3.outputs:out>
            float inputs:in2 = 305.0448
            float outputs:out
            float2 ui:nodegraph:node:pos = (-446.9284, 352.40256)
            int ui:nodegraph:node:stackingOrder = 1060
        }

        def Shader "IfGreater_1"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1.connect = </Root/BlackBody_WIP_/Subtract_3.outputs:out>
            float inputs:in2
            float inputs:value1.connect = </Root/BlackBody_WIP_/Subtract_2.outputs:out>
            float inputs:value2 = 9
            float outputs:out
            float2 ui:nodegraph:node:pos = (-312.79358, 292.66937)
            int ui:nodegraph:node:stackingOrder = 1063
        }

        def Shader "Range"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp = 1
            float inputs:in.connect = </Root/BlackBody_WIP_.inputs:Temp_K>
            float inputs:inhigh = 1000
            float inputs:inlow = 0
            float outputs:out
            float2 ui:nodegraph:node:pos = (-762.2257, -274.2905)
            int ui:nodegraph:node:stackingOrder = 1093
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/BlackBody_WIP_/Remap.outputs:out>
            float inputs:in2.connect = </Root/BlackBody_WIP_/Range.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (415.29135, -197.41089)
            int ui:nodegraph:node:stackingOrder = 1082
        }
    }

    def NodeGraph "_3ColorBlend" (
        active = true
    )
    {
        float3 inputs:A = (1, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-370.6764, -70.527504)
                    int stackingOrderInSubgraph = 394
                }
            }
        )
        float inputs:Alpha = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1131.7582, 61.065674)
                    int stackingOrderInSubgraph = 148
                }
            }
        )
        float3 inputs:B = (0, 1, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-354.9961, 48.76172)
                    int stackingOrderInSubgraph = 135
                }
            }
        )
        float3 inputs:C = (0, 0, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-349.89667, 131.67801)
                    int stackingOrderInSubgraph = 259
                }
            }
        )
        float3 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Out.connect = </Root/_3ColorBlend/Mix_1.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (572.4258, 11.0078125)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 81

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1110.8125, 156.63672)
            int ui:nodegraph:node:stackingOrder = 77
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/_3ColorBlend/TextureCoordinates.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-920.0469, 149.73438)
            int ui:nodegraph:node:stackingOrder = 70
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/_3ColorBlend/IfEqual.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-445.82724, -251.07112)
            int ui:nodegraph:node:stackingOrder = 460
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/_3ColorBlend/Multiply.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (-324.82584, -256.32504)
            int ui:nodegraph:node:stackingOrder = 460
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_vector3"
            float3 inputs:bg.connect = </Root/_3ColorBlend.inputs:A>
            float3 inputs:fg.connect = </Root/_3ColorBlend.inputs:B>
            prepend float inputs:mix.connect = </Root/_3ColorBlend/Clamp.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-109.53209, -247.91605)
            int ui:nodegraph:node:stackingOrder = 463
        }

        def Shader "Mix_1"
        {
            uniform token info:id = "ND_mix_vector3"
            float3 inputs:bg.connect = </Root/_3ColorBlend/Mix.outputs:out>
            float3 inputs:fg.connect = </Root/_3ColorBlend/Mix_2.outputs:out>
            float inputs:mix.connect = </Root/_3ColorBlend/IfEqual.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (321.98438, -54.722656)
            int ui:nodegraph:node:stackingOrder = 136
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/_3ColorBlend/IfEqual.outputs:out>
            float inputs:in2 = -0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (-428.69006, 335.59824)
            int ui:nodegraph:node:stackingOrder = 325
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/_3ColorBlend/Add.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-338.6145, 343.301)
            int ui:nodegraph:node:stackingOrder = 325
        }

        def Shader "Clamp_1"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/_3ColorBlend/Multiply_1.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (-235.9508, 342.08652)
            int ui:nodegraph:node:stackingOrder = 467
        }

        def Shader "Mix_2"
        {
            uniform token info:id = "ND_mix_vector3"
            float3 inputs:bg.connect = </Root/_3ColorBlend.inputs:B>
            float3 inputs:fg.connect = </Root/_3ColorBlend.inputs:C>
            prepend float inputs:mix.connect = </Root/_3ColorBlend/Clamp_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-40.89741, 329.78833)
            int ui:nodegraph:node:stackingOrder = 469
        }

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1.connect = </Root/_3ColorBlend.inputs:Alpha>
            float inputs:in2.connect = </Root/_3ColorBlend.inputs:Alpha>
            float inputs:value1.connect = </Root/_3ColorBlend.inputs:Alpha>
            float inputs:value2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-706.4922, 67.27734)
            int ui:nodegraph:node:stackingOrder = 74
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Isolate 0.5-1"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_1", "p:Mix_2", "p:Add", "p:Clamp_1"]
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Isolate 0-0.5"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Clamp", "p:Multiply", "p:Mix"]
        }
    }

    def NodeGraph "CheapContrast" (
        active = true
    )
    {
        float inputs:Contrast = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-839.91797, -136.2539)
                    int stackingOrderInSubgraph = 108
                }
            }
        )
        float inputs:In = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-869.1875, 81.53516)
                    int stackingOrderInSubgraph = 105
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-345, 128.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/CheapContrast/Clamp.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1.connect = </Root/CheapContrast/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/CheapContrast.inputs:In>
            float inputs:value1.connect = </Root/CheapContrast.inputs:In>
            float inputs:value2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-673.09766, 118.65234)
            int ui:nodegraph:node:stackingOrder = 105
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/CheapContrast/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-876.27734, 171.76172)
            int ui:nodegraph:node:stackingOrder = 105
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/CheapContrast/TextureCoordinates.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-999.54297, 164.82031)
            int ui:nodegraph:node:stackingOrder = 105
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1235.2656, 155.48828)
            int ui:nodegraph:node:stackingOrder = 105
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/CheapContrast/Subtract.outputs:out>
            float inputs:fg.connect = </Root/CheapContrast/Add.outputs:out>
            float inputs:mix.connect = </Root/CheapContrast.inputs:In>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-317.2461, 89.16016)
            int ui:nodegraph:node:stackingOrder = 27
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/CheapContrast/Mix.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (-144.1875, 84.78906)
            int ui:nodegraph:node:stackingOrder = 25
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/CheapContrast.inputs:Contrast>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-640.9453, -150.34766)
            int ui:nodegraph:node:stackingOrder = 110
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/CheapContrast.inputs:Contrast>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-644.64453, -43.578125)
            int ui:nodegraph:node:stackingOrder = 113
        }
    }

    def NodeGraph "CheapContrast_RGB" (
        active = true
    )
    {
        float inputs:Contrast = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-833.47266, -55.871094)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float3 inputs:In = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-816.9052, 71.171875)
                    int stackingOrderInSubgraph = 21
                }
            }
        )
        float3 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-256, 64.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Out.connect = </Root/CheapContrast_RGB/Clamp.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (267.41043, -87.440765)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 41

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/CheapContrast_RGB.inputs:Contrast>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-626.8789, -125.61328)
            int ui:nodegraph:node:stackingOrder = 7
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/CheapContrast_RGB.inputs:Contrast>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-649.28125, -37.20703)
            int ui:nodegraph:node:stackingOrder = 17
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/CheapContrast_RGB/Subtract.outputs:out>
            float inputs:fg.connect = </Root/CheapContrast_RGB/Add.outputs:out>
            float inputs:mix.connect = </Root/CheapContrast_RGB/Separate3.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-427.90994, -196.28575)
            int ui:nodegraph:node:stackingOrder = 29
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/CheapContrast_RGB.inputs:In>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-640.7776, 70.50423)
            int ui:nodegraph:node:stackingOrder = 24
        }

        def Shader "Mix_1"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/CheapContrast_RGB/Subtract.outputs:out>
            float inputs:fg.connect = </Root/CheapContrast_RGB/Add.outputs:out>
            float inputs:mix.connect = </Root/CheapContrast_RGB/Separate3.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-428.92004, -40.182373)
            int ui:nodegraph:node:stackingOrder = 33
        }

        def Shader "Mix_2"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/CheapContrast_RGB/Subtract.outputs:out>
            float inputs:fg.connect = </Root/CheapContrast_RGB/Add.outputs:out>
            float inputs:mix.connect = </Root/CheapContrast_RGB/Separate3.outputs:outz>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-423.23303, 115.800125)
            int ui:nodegraph:node:stackingOrder = 36
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            prepend float inputs:in1.connect = </Root/CheapContrast_RGB/Mix.outputs:out>
            prepend float inputs:in2.connect = </Root/CheapContrast_RGB/Mix_1.outputs:out>
            prepend float inputs:in3.connect = </Root/CheapContrast_RGB/Mix_2.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-206.78616, -75.255356)
            int ui:nodegraph:node:stackingOrder = 44
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_vector3"
            float3 inputs:high
            float3 inputs:in.connect = </Root/CheapContrast_RGB/Combine3.outputs:out>
            float3 inputs:low
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-23.46123, -69.0221)
            int ui:nodegraph:node:stackingOrder = 40
        }
    }

    def NodeGraph "SCurve" (
        active = true
    )
    {
        float3 inputs:In = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-831.25, -2.4179688)
                    int stackingOrderInSubgraph = 8
                }
            }
        )
        float inputs:Power = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-369.0039, 8.7734375)
                    int stackingOrderInSubgraph = 77
                }
            }
        )
        float3 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Out.connect = </Root/SCurve/Combine3.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1019.0625, 73.30859)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 113

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/SCurve.inputs:In>
            float inputs:in2 = 2
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-673.03906, -104.98828)
            int ui:nodegraph:node:stackingOrder = 14
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_vector3"
            float3 inputs:high
            float3 inputs:in.connect = </Root/SCurve/Multiply.outputs:out>
            float3 inputs:low
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-514.8867, -101.23828)
            int ui:nodegraph:node:stackingOrder = 17
        }

        def Shader "Power"
        {
            uniform token info:id = "ND_power_vector3FA"
            prepend float3 inputs:in1.connect = </Root/SCurve/Clamp.outputs:out>
            float inputs:in2.connect = </Root/SCurve.inputs:Power>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-188.26562, -74.03906)
            int ui:nodegraph:node:stackingOrder = 75
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/SCurve/Power.outputs:out>
            float inputs:in2 = 0.5
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-50.558594, -66.40625)
            int ui:nodegraph:node:stackingOrder = 75
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector3FA"
            prepend float3 inputs:in1.connect = </Root/SCurve.inputs:In>
            float inputs:in2 = -0.5
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-665.76953, 114.51172)
            int ui:nodegraph:node:stackingOrder = 27
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/SCurve/Add.outputs:out>
            float inputs:in2 = 2
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-575.9961, 123.625)
            int ui:nodegraph:node:stackingOrder = 30
        }

        def Shader "Clamp_1"
        {
            uniform token info:id = "ND_clamp_vector3"
            float3 inputs:high
            float3 inputs:in.connect = </Root/SCurve/Multiply_2.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-426.76172, 133.57812)
            int ui:nodegraph:node:stackingOrder = 33
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_vector3"
            float3 inputs:in.connect = </Root/SCurve/Clamp_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-280.8047, 184.4375)
            int ui:nodegraph:node:stackingOrder = 80
        }

        def Shader "Power_1"
        {
            uniform token info:id = "ND_power_vector3FA"
            prepend float3 inputs:in1.connect = </Root/SCurve/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/SCurve.inputs:Power>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-145.52734, 159.30078)
            int ui:nodegraph:node:stackingOrder = 83
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_vector3"
            float3 inputs:in.connect = </Root/SCurve/Power_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-34.64453, 159.09375)
            int ui:nodegraph:node:stackingOrder = 84
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/SCurve/Oneminus_1.outputs:out>
            float inputs:in2 = 0.5
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (64.30078, 118.28906)
            int ui:nodegraph:node:stackingOrder = 92
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector3FA"
            prepend float3 inputs:in1.connect = </Root/SCurve/Multiply_3.outputs:out>
            float inputs:in2 = 0.5
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (157.66797, 120.97266)
            int ui:nodegraph:node:stackingOrder = 90
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/SCurve/Oneminus_1.outputs:out>
            float inputs:in2 = 500
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (60.39453, 205.15625)
            int ui:nodegraph:node:stackingOrder = 93
        }

        def Shader "Clamp_2"
        {
            uniform token info:id = "ND_clamp_vector3"
            float3 inputs:high
            float3 inputs:in.connect = </Root/SCurve/Multiply_4.outputs:out>
            float3 inputs:low
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (217.50781, 238.89453)
            int ui:nodegraph:node:stackingOrder = 119
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/SCurve/Multiply_1.outputs:out>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (103.75781, -56.0625)
            int ui:nodegraph:node:stackingOrder = 104
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/SCurve/Separate3.outputs:outx>
            float inputs:fg.connect = </Root/SCurve/Separate3_1.outputs:outx>
            float inputs:mix.connect = </Root/SCurve/Separate3_2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (573.8164, -96.35547)
            int ui:nodegraph:node:stackingOrder = 121
        }

        def Shader "Separate3_1"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/SCurve/Add_1.outputs:out>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (281.41016, 103.55078)
            int ui:nodegraph:node:stackingOrder = 111
        }

        def Shader "Separate3_2"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/SCurve/Clamp_2.outputs:out>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (400.66797, 262.83984)
            int ui:nodegraph:node:stackingOrder = 120
        }

        def Shader "Mix_1"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/SCurve/Separate3.outputs:outy>
            float inputs:fg.connect = </Root/SCurve/Separate3_1.outputs:outy>
            float inputs:mix.connect = </Root/SCurve/Separate3_2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (616.86084, 66.41679)
            int ui:nodegraph:node:stackingOrder = 126
        }

        def Shader "Mix_2"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/SCurve/Separate3.outputs:outz>
            float inputs:fg.connect = </Root/SCurve/Separate3_1.outputs:outz>
            float inputs:mix.connect = </Root/SCurve/Separate3_2.outputs:outz>
            float outputs:out
            float2 ui:nodegraph:node:pos = (650.62006, 215.02489)
            int ui:nodegraph:node:stackingOrder = 129
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            prepend float inputs:in1.connect = </Root/SCurve/Mix.outputs:out>
            prepend float inputs:in2.connect = </Root/SCurve/Mix_1.outputs:out>
            prepend float inputs:in3.connect = </Root/SCurve/Mix_2.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (834.7498, 30.215057)
            int ui:nodegraph:node:stackingOrder = 130
        }
    }

    def NodeGraph "_3PointLevels" (
        active = true
    )
    {
        bool inputs:DefineInterpolationCurve = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-66.18064, -250.45079)
                    int stackingOrderInSubgraph = 329
                }
            }
        )
        float inputs:InterpolationPower = 2 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-457.08795, 365.34802)
                    int stackingOrderInSubgraph = 164
                }
            }
        )
        bool inputs:InvertInterpolationPower = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-699.6427, -264.2625)
                    int stackingOrderInSubgraph = 328
                }
            }
        )
        float inputs:MiddlePoint = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1088.4297, 125.83594)
                    int stackingOrderInSubgraph = 47
                }
            }
        )
        float inputs:NewBlackValue = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (421.64795, -342.07367)
                    int stackingOrderInSubgraph = 297
                }
            }
        )
        float inputs:NewMiddleValue = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (416.40967, -249.3687)
                    int stackingOrderInSubgraph = 336
                }
            }
        )
        float inputs:NewWhiteValue = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (410.17123, -151.98692)
                    int stackingOrderInSubgraph = 334
                }
            }
        )
        float inputs:Texture = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1118.2031, 24.140625)
                    int stackingOrderInSubgraph = 44
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/_3PointLevels/Mix_2.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1230.6364, 96.597275)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 307

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/_3PointLevels.inputs:Texture>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-953.25, 7.6523438)
            int ui:nodegraph:node:stackingOrder = 51
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/_3PointLevels.inputs:MiddlePoint>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-954.65625, 50.51953)
            int ui:nodegraph:node:stackingOrder = 66
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/_3PointLevels/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/_3PointLevels/Oneminus_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-871.83203, 23.5625)
            int ui:nodegraph:node:stackingOrder = 64
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/_3PointLevels.inputs:Texture>
            float inputs:in2.connect = </Root/_3PointLevels.inputs:MiddlePoint>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-913.6328, 134.3789)
            int ui:nodegraph:node:stackingOrder = 62
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/_3PointLevels/Divide.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (-774.4531, 29.633709)
            int ui:nodegraph:node:stackingOrder = 260
        }

        def Shader "Clamp_1"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/_3PointLevels/Divide_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-780.2578, 219.82167)
            int ui:nodegraph:node:stackingOrder = 258
        }

        def Shader "Oneminus_2"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/_3PointLevels/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-635.4219, 10.9140625)
            int ui:nodegraph:node:stackingOrder = 88
        }

        def Shader "Oneminus_3"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/_3PointLevels/Clamp_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-649.02734, 161.09375)
            int ui:nodegraph:node:stackingOrder = 150
        }

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_floatB"
            float inputs:in1.connect = </Root/_3PointLevels/Oneminus_2.outputs:out>
            float inputs:in2.connect = </Root/_3PointLevels/Clamp.outputs:out>
            bool inputs:value1.connect = </Root/_3PointLevels.inputs:InvertInterpolationPower>
            bool inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-445.67188, -28.316406)
            int ui:nodegraph:node:stackingOrder = 145
        }

        def Shader "IfEqual_1"
        {
            uniform token info:id = "ND_ifequal_floatB"
            prepend float inputs:in1.connect = </Root/_3PointLevels/Oneminus_3.outputs:out>
            float inputs:in2.connect = </Root/_3PointLevels/Clamp_1.outputs:out>
            bool inputs:value1.connect = </Root/_3PointLevels.inputs:InvertInterpolationPower>
            bool inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-451.79297, 176.78601)
            int ui:nodegraph:node:stackingOrder = 264
        }

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/_3PointLevels/IfEqual.outputs:out>
            float inputs:in2.connect = </Root/_3PointLevels.inputs:InterpolationPower>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-264.0957, 10.481952)
            int ui:nodegraph:node:stackingOrder = 157
        }

        def Shader "Power_1"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/_3PointLevels/IfEqual_1.outputs:out>
            float inputs:in2.connect = </Root/_3PointLevels.inputs:InterpolationPower>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-240.53679, 190.65631)
            int ui:nodegraph:node:stackingOrder = 327
        }

        def Shader "Oneminus_4"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/_3PointLevels/Power.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-145.47133, -34.264687)
            int ui:nodegraph:node:stackingOrder = 232
        }

        def Shader "Oneminus_5"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/_3PointLevels/Power_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-114.42701, 164.79083)
            int ui:nodegraph:node:stackingOrder = 236
        }

        def Shader "IfEqual_2"
        {
            uniform token info:id = "ND_ifequal_floatB"
            float inputs:in1.connect = </Root/_3PointLevels/Oneminus_4.outputs:out>
            float inputs:in2.connect = </Root/_3PointLevels/Power.outputs:out>
            bool inputs:value1.connect = </Root/_3PointLevels.inputs:InvertInterpolationPower>
            bool inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-17.960665, -56.206966)
            int ui:nodegraph:node:stackingOrder = 246
        }

        def Shader "IfEqual_3"
        {
            uniform token info:id = "ND_ifequal_floatB"
            float inputs:in1.connect = </Root/_3PointLevels/Oneminus_5.outputs:out>
            float inputs:in2.connect = </Root/_3PointLevels/Power_1.outputs:out>
            bool inputs:value1.connect = </Root/_3PointLevels.inputs:InvertInterpolationPower>
            bool inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (20.515352, 158.22034)
            int ui:nodegraph:node:stackingOrder = 242
        }

        def Shader "IfEqual_4"
        {
            uniform token info:id = "ND_ifequal_floatB"
            float inputs:in1.connect = </Root/_3PointLevels/IfEqual_2.outputs:out>
            float inputs:in2.connect = </Root/_3PointLevels/Clamp.outputs:out>
            bool inputs:value1.connect = </Root/_3PointLevels.inputs:DefineInterpolationCurve>
            bool inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (210.18422, 10.582746)
            int ui:nodegraph:node:stackingOrder = 262
        }

        def Shader "IfEqual_5"
        {
            uniform token info:id = "ND_ifequal_floatB"
            float inputs:in1.connect = </Root/_3PointLevels/IfEqual_3.outputs:out>
            float inputs:in2.connect = </Root/_3PointLevels/Clamp_1.outputs:out>
            bool inputs:value1.connect = </Root/_3PointLevels.inputs:DefineInterpolationCurve>
            bool inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (214.5676, 226.9821)
            int ui:nodegraph:node:stackingOrder = 256
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/_3PointLevels.inputs:NewBlackValue>
            float inputs:fg.connect = </Root/_3PointLevels.inputs:NewMiddleValue>
            float inputs:mix.connect = </Root/_3PointLevels/IfEqual_5.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (723.3393, -272.7771)
            int ui:nodegraph:node:stackingOrder = 329
        }

        def Shader "Mix_1"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/_3PointLevels.inputs:NewWhiteValue>
            float inputs:fg.connect = </Root/_3PointLevels.inputs:NewMiddleValue>
            float inputs:mix.connect = </Root/_3PointLevels/IfEqual_4.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (723.9461, -57.963955)
            int ui:nodegraph:node:stackingOrder = 331
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_float"
            float inputs:in.connect = </Root/_3PointLevels/IfEqual_5.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (672.88916, 256.06415)
            int ui:nodegraph:node:stackingOrder = 305
        }

        def Shader "Mix_2"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/_3PointLevels/Mix.outputs:out>
            float inputs:fg.connect = </Root/_3PointLevels/Mix_1.outputs:out>
            float inputs:mix.connect = </Root/_3PointLevels/Floor.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (980.29614, 51.417114)
            int ui:nodegraph:node:stackingOrder = 317
        }
    }

    def NodeGraph "HueShift" (
        active = true
    )
    {
        float inputs:HueShiftPercentage = 180 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-823.6719, -4.6367188)
                    int stackingOrderInSubgraph = 27
                }
            }
        )
        float3 inputs:Texture = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-685.9375, 168.76953)
                    int stackingOrderInSubgraph = 28
                }
            }
        )
        float3 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-377, 69.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Out.connect = </Root/HueShift/Add.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)

        def Shader "Rotate3D"
        {
            uniform token info:id = "ND_rotate3d_vector3"
            float inputs:amount.connect = </Root/HueShift/Multiply_1.outputs:out>
            float3 inputs:axis.connect = </Root/HueShift/Normalize.outputs:out>
            float3 inputs:in.connect = </Root/HueShift.inputs:Texture>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-359.7578, 12.6875)
            int ui:nodegraph:node:stackingOrder = 22
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector3"
            float3 inputs:in1.connect = </Root/HueShift/Rotate3D.outputs:out>
            float3 inputs:in2.connect = None
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-190.28125, 66.55469)
            int ui:nodegraph:node:stackingOrder = 6
        }

        def Shader "Normalize"
        {
            uniform token info:id = "ND_normalize_vector3"
            float3 inputs:in = (1, 1, 1)
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-657.25, 95.02344)
            int ui:nodegraph:node:stackingOrder = 24
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/HueShift.inputs:HueShiftPercentage>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-656.1797, -0.8203125)
            int ui:nodegraph:node:stackingOrder = 45
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/HueShift/Multiply.outputs:out>
            float inputs:in2 = 180
            float outputs:out
            float2 ui:nodegraph:node:pos = (-552.72656, -5.6445312)
            int ui:nodegraph:node:stackingOrder = 46
        }
    }

    def NodeGraph "SmoothThreshold" (
        active = true
    )
    {
        float inputs:CutoffValue = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-822.1719, 245.59375)
                    int stackingOrderInSubgraph = 6
                }
            }
        )
        float inputs:Gradient = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-764.96094, 14.441406)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float inputs:LerpValue = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-746.16016, -81.98047)
                    int stackingOrderInSubgraph = 4
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-625, 94.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/SmoothThreshold/IfGreater.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (503.35938, 101.05078)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 29

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/SmoothThreshold.inputs:CutoffValue>
            float inputs:in2.connect = </Root/SmoothThreshold.inputs:CutoffValue>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-649.28516, 223.04297)
            int ui:nodegraph:node:stackingOrder = 9
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in2.connect = </Root/SmoothThreshold/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-658.09766, 116.89453)
            int ui:nodegraph:node:stackingOrder = 43
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SmoothThreshold.inputs:Gradient>
            float inputs:in2.connect = </Root/SmoothThreshold/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-563.96094, -35.484375)
            int ui:nodegraph:node:stackingOrder = 41
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/SmoothThreshold.inputs:LerpValue>
            float inputs:fg = 1
            float inputs:mix.connect = </Root/SmoothThreshold/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-401.0547, -69.84766)
            int ui:nodegraph:node:stackingOrder = 33
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SmoothThreshold/Mix.outputs:out>
            float inputs:in2.connect = </Root/SmoothThreshold/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-236.875, 168.66797)
            int ui:nodegraph:node:stackingOrder = 38
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1.connect = </Root/SmoothThreshold.inputs:Gradient>
            float inputs:in2.connect = </Root/SmoothThreshold/Multiply_1.outputs:out>
            float inputs:value1.connect = </Root/SmoothThreshold.inputs:Gradient>
            float inputs:value2.connect = </Root/SmoothThreshold/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (82.61328, 53.07422)
            int ui:nodegraph:node:stackingOrder = 31
        }
    }

    def NodeGraph "SoftOpacity" (
        active = true
    )
    {
        reorder nameChildren = ["SphereMask_1", "Fresnel_1"]
        float inputs:DepthFadeDistance = 0.64 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-872.83594, -246.48047)
                    int stackingOrderInSubgraph = 959
                }
            }
        )
        float inputs:FadeDistance = 1.28 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-944.9375, 58.70703)
                    int stackingOrderInSubgraph = 970
                }
            }
        )
        float inputs:OpacityIn = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-705.0664, 153.66797)
                    int stackingOrderInSubgraph = 799
                }
            }
        )
        float outputs:OutputNoDepthBias (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-286, 78.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:OutputNoDepthBias.connect = </Root/SoftOpacity/Multiply_1.outputs:out>
        float outputs:OutputUsesDepthBias (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-286, 78.5)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float outputs:OutputUsesDepthBias.connect = </Root/SoftOpacity/Multiply_2.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)

        def "SphereMask_1" (
            active = true
            instanceable = true
            references = </Root/SphereMask>
        )
        {
            float2 inputs:A
            float2 inputs:B.connect = </Root/SoftOpacity/Combine2.outputs:out>
            float inputs:Hardness = 10
            float inputs:Radius.connect = </Root/SoftOpacity.inputs:FadeDistance>
            float2 ui:nodegraph:node:pos = (-558.8519, 17.805893)
            int ui:nodegraph:node:stackingOrder = 953
        }

        def "Fresnel_1" (
            active = true
            instanceable = true
            references = </Root/Fresnel>
        )
        {
            float inputs:BaseReflectFraction
            float inputs:Exp = 1
            float2 ui:nodegraph:node:pos = (-710.8594, 251.7461)
            int ui:nodegraph:node:stackingOrder = 794
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/SoftOpacity/Fresnel_1.outputs:Exp_out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-568.6172, 298.08984)
            int ui:nodegraph:node:stackingOrder = 804
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SoftOpacity.inputs:OpacityIn>
            float inputs:in2.connect = </Root/SoftOpacity/Oneminus.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-502.90625, 201.51172)
            int ui:nodegraph:node:stackingOrder = 806
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SoftOpacity/Oneminus_1.outputs:out>
            float inputs:in2.connect = </Root/SoftOpacity/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-331.5625, 130.73047)
            int ui:nodegraph:node:stackingOrder = 973
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1153.893, -34.18927)
            int ui:nodegraph:node:stackingOrder = 953
        }

        def Shader "CameraPosition"
        {
            uniform token info:id = "ND_realitykit_cameraposition_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1126.2648, -103.80438)
            int ui:nodegraph:node:stackingOrder = 953
        }

        def Shader "MTLDistance"
        {
            uniform token info:id = "ND_MTL_distance_vector3_float"
            float3 inputs:x.connect = </Root/SoftOpacity/CameraPosition.outputs:out>
            float3 inputs:y.connect = </Root/SoftOpacity/Position.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-910.5143, -74.50635)
            int ui:nodegraph:node:stackingOrder = 956
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/SoftOpacity/MTLDistance.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-732.16016, -9.84375)
            int ui:nodegraph:node:stackingOrder = 953
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/SoftOpacity/SphereMask_1.outputs:Oneminus_out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-429.35938, 85.40234)
            int ui:nodegraph:node:stackingOrder = 953
        }

        def Shader "Range"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp = 0
            float inputs:gamma
            float inputs:in.connect = </Root/SoftOpacity/MTLDistance.outputs:out>
            float inputs:inhigh.connect = </Root/SoftOpacity.inputs:FadeDistance>
            float inputs:inlow.connect = </Root/SoftOpacity.inputs:DepthFadeDistance>
            float inputs:outlow
            float outputs:out
            float2 ui:nodegraph:node:pos = (-506.73438, -216.48047)
            int ui:nodegraph:node:stackingOrder = 977
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SoftOpacity/Clamp.outputs:out>
            float inputs:in2.connect = </Root/SoftOpacity/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-209.22266, 21.074219)
            int ui:nodegraph:node:stackingOrder = 975
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:in.connect = </Root/SoftOpacity/Range.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-346.02884, -113.772125)
            int ui:nodegraph:node:stackingOrder = 982
        }
    }

    def NodeGraph "VectorToRadialValue" (
        active = true
    )
    {
        bool inputs:SwizzleCoordinateOutput = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-895.58594, -244.03516)
                    int stackingOrderInSubgraph = 83
                }
            }
        )
        float2 inputs:VectorOrUVs = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1346.6055, -33.67578)
                    int stackingOrderInSubgraph = 42
                }
            }
        )
        float outputs:LinearDistance (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 3
                }
            }
        )
        float outputs:LinearDistance.connect = </Root/VectorToRadialValue/Magnitude.outputs:out>
        float2 outputs:RadialCoordinates (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float2 outputs:RadialCoordinates.connect = </Root/VectorToRadialValue/IfEqual.outputs:out>
        float outputs:VectorConvertedToAngle (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float outputs:VectorConvertedToAngle.connect = </Root/VectorToRadialValue/Fractional.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (-128.34375, -100.48828)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 55

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/VectorToRadialValue.inputs:VectorOrUVs>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-1131.332, 17.859375)
            int ui:nodegraph:node:stackingOrder = 37
        }

        def Shader "Atan2"
        {
            uniform token info:id = "ND_atan2_float"
            float inputs:inx.connect = </Root/VectorToRadialValue/Separate2.outputs:outx>
            float inputs:iny.connect = </Root/VectorToRadialValue/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-997.6758, 23.046875)
            int ui:nodegraph:node:stackingOrder = 66
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/VectorToRadialValue.inputs:VectorOrUVs>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-997.4258, -126.82422)
            int ui:nodegraph:node:stackingOrder = 95
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/VectorToRadialValue/Atan2.outputs:out>
            float inputs:in2 = 6.283185
            float outputs:out
            float2 ui:nodegraph:node:pos = (-913.9297, 42.441406)
            int ui:nodegraph:node:stackingOrder = 68
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/VectorToRadialValue/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-761.65234, 37.03125)
            int ui:nodegraph:node:stackingOrder = 70
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/VectorToRadialValue/Magnitude.outputs:out>
            float inputs:in2.connect = </Root/VectorToRadialValue/Fractional.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-559.5156, -41.566406)
            int ui:nodegraph:node:stackingOrder = 93
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/VectorToRadialValue/Fractional.outputs:out>
            float inputs:in2.connect = </Root/VectorToRadialValue/Magnitude.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-585.84766, -180.45703)
            int ui:nodegraph:node:stackingOrder = 91
        }

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_vector2B"
            float2 inputs:in1.connect = </Root/VectorToRadialValue/Combine2_1.outputs:out>
            float2 inputs:in2.connect = </Root/VectorToRadialValue/Combine2.outputs:out>
            prepend bool inputs:value1.connect = </Root/VectorToRadialValue.inputs:SwizzleCoordinateOutput>
            bool inputs:value2 = 1
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-354.07812, -199.70312)
            int ui:nodegraph:node:stackingOrder = 89
        }
    }

    def NodeGraph "LinearSine" (
        active = true
    )
    {
        bool inputs:Negative1To1 = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (832.4214, 54.80626)
                    int stackingOrderInSubgraph = 601
                }
            }
        )
        float inputs:Period = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-713.28516, 56.82422)
                    int stackingOrderInSubgraph = 10
                }
            }
        )
        bool inputs:SinePhase = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-669.21875, -196.41016)
                    int stackingOrderInSubgraph = 15
                }
            }
        )
        float inputs:Value = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-692.59375, -115.08984)
                    int stackingOrderInSubgraph = 21
                }
            }
        )
        float outputs:Direction (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-325, 72.5)
                    int stackingOrderInSubgraph = 3
                }
            }
        )
        float outputs:Direction.connect = </Root/LinearSine/Mix_1.outputs:out>
        float outputs:LinearSine (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-325, 72.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:LinearSine.connect = </Root/LinearSine/IfEqual_1.outputs:out>
        float outputs:RoundedLinearSine (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-325, 72.5)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float outputs:RoundedLinearSine.connect = </Root/LinearSine/IfEqual_2.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1493.6184, 39.336067)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 75

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1 = 0.25
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/LinearSine.inputs:Period>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-602.91016, 7.3515625)
            int ui:nodegraph:node:stackingOrder = 26
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/LinearSine.inputs:Value>
            float inputs:in2.connect = </Root/LinearSine/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-540.1133, -64.19531)
            int ui:nodegraph:node:stackingOrder = 11
        }

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_floatB"
            float inputs:in1.connect = </Root/LinearSine/Add.outputs:out>
            float inputs:in2.connect = </Root/LinearSine.inputs:Value>
            bool inputs:value1.connect = </Root/LinearSine.inputs:SinePhase>
            bool inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-395.01953, -158.33594)
            int ui:nodegraph:node:stackingOrder = 23
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/LinearSine/IfEqual.outputs:out>
            float inputs:in2.connect = </Root/LinearSine.inputs:Period>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-273.52344, -36.816406)
            int ui:nodegraph:node:stackingOrder = 29
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/LinearSine/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-127.4375, -37.3125)
            int ui:nodegraph:node:stackingOrder = 30
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/LinearSine/Fractional.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (49.792152, -95.757256)
            int ui:nodegraph:node:stackingOrder = 221
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-124.08408, 96.29294)
            int ui:nodegraph:node:stackingOrder = 152
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/LinearSine/Fractional.outputs:out>
            float inputs:in2.connect = </Root/LinearSine/ConstantFloat.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (115.03323, -9.622797)
            int ui:nodegraph:node:stackingOrder = 187
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/LinearSine/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/LinearSine/ConstantFloat.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (154.4484, -108.59319)
            int ui:nodegraph:node:stackingOrder = 221
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_float"
            float inputs:in.connect = </Root/LinearSine/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (256.66632, -249.14516)
            int ui:nodegraph:node:stackingOrder = 304
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/LinearSine/Multiply_1.outputs:out>
            float inputs:fg.connect = </Root/LinearSine/Multiply_2.outputs:out>
            float inputs:mix.connect = </Root/LinearSine/Floor.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (328.8714, -89.82017)
            int ui:nodegraph:node:stackingOrder = 487
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/LinearSine/Mix.outputs:out>
            float inputs:in2 = -0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (800.7885, -62.019646)
            int ui:nodegraph:node:stackingOrder = 601
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/LinearSine/Add_1.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (890.11273, -62.418083)
            int ui:nodegraph:node:stackingOrder = 601
        }

        def Shader "IfEqual_1"
        {
            uniform token info:id = "ND_ifequal_floatB"
            float inputs:in1.connect = </Root/LinearSine/Multiply_3.outputs:out>
            float inputs:in2.connect = </Root/LinearSine/Mix.outputs:out>
            bool inputs:value1.connect = </Root/LinearSine.inputs:Negative1To1>
            bool inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (1093.9, -2.1077378)
            int ui:nodegraph:node:stackingOrder = 601
        }

        def Shader "Mix_1"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg = 1
            float inputs:fg.connect = None
            float inputs:mix.connect = </Root/LinearSine/Floor.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1023.6309, -168.14221)
            int ui:nodegraph:node:stackingOrder = 601
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/LinearSine/Add_2.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (925.41394, 180.28786)
            int ui:nodegraph:node:stackingOrder = 601
        }

        def Shader "IfEqual_2"
        {
            uniform token info:id = "ND_ifequal_floatB"
            float inputs:in1.connect = </Root/LinearSine/Multiply_4.outputs:out>
            float inputs:in2.connect = </Root/LinearSine/Multiply_5.outputs:out>
            bool inputs:value1.connect = </Root/LinearSine.inputs:Negative1To1>
            bool inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (1103.2806, 178.33055)
            int ui:nodegraph:node:stackingOrder = 601
        }

        def Shader "Add_2"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/LinearSine/Multiply_5.outputs:out>
            float inputs:in2 = -0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (836.0897, 180.6863)
            int ui:nodegraph:node:stackingOrder = 601
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/LinearSine/Mix.outputs:out>
            float inputs:in2.connect = </Root/LinearSine/Multiply_6.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (731.38855, 212.94826)
            int ui:nodegraph:node:stackingOrder = 601
        }

        def Shader "Multiply_6"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/LinearSine/Mix.outputs:out>
            float inputs:in2.connect = </Root/LinearSine/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (656.42114, 219.2015)
            int ui:nodegraph:node:stackingOrder = 601
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1 = 3
            float inputs:in2.connect = </Root/LinearSine/Multiply_7.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (557.65845, 222.01671)
            int ui:nodegraph:node:stackingOrder = 604
        }

        def Shader "Multiply_7"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/LinearSine/Mix.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (462.58502, 225.38232)
            int ui:nodegraph:node:stackingOrder = 610
        }
    }

    def NodeGraph "ViewAlignedReflection" (
        active = true
    )
    {
        asset inputs:ReflectionTexture (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-219.63672, -56.5625)
                    int stackingOrderInSubgraph = 15
                }
            }
        )
        float3 inputs:ReflectionVector = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1119.6445, 33.203125)
                    int stackingOrderInSubgraph = 32
                }
            }
        )
        float3 outputs:Texture (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Texture.connect = </Root/ViewAlignedReflection/Image.outputs:out>
        float2 outputs:UVs (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float2 outputs:UVs.connect = </Root/ViewAlignedReflection/Add.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (320.64453, 150.22266)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 22

        def Shader "Image"
        {
            uniform token info:id = "ND_image_vector3"
            float3 inputs:default
            prepend asset inputs:file.connect = </Root/ViewAlignedReflection.inputs:ReflectionTexture>
            string inputs:filtertype
            float2 inputs:texcoord.connect = </Root/ViewAlignedReflection/Add.outputs:out>
            string inputs:uaddressmode
            string inputs:vaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (33.83203, -12.816406)
            int ui:nodegraph:node:stackingOrder = 22
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2FA"
            prepend float2 inputs:in1.connect = </Root/ViewAlignedReflection/Multiply.outputs:out>
            float inputs:in2.connect = </Root/ViewAlignedReflection/ConstantFloat.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-231.6836, 54.910156)
            int ui:nodegraph:node:stackingOrder = 26
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/ViewAlignedReflection/Combine2.outputs:out>
            float inputs:in2.connect = </Root/ViewAlignedReflection/ConstantFloat.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-387.91016, 3.0898438)
            int ui:nodegraph:node:stackingOrder = 27
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (-543.97266, 65.27734)
            int ui:nodegraph:node:stackingOrder = 33
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/ViewAlignedReflection/Separate3.outputs:outx>
            float inputs:in2.connect = </Root/ViewAlignedReflection/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-557.34375, -25.828125)
            int ui:nodegraph:node:stackingOrder = 36
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/ViewAlignedReflection.inputs:ReflectionVector>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-939.9297, 32.48828)
            int ui:nodegraph:node:stackingOrder = 37
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/ViewAlignedReflection/Separate3.outputs:outy>
            float inputs:in2 = -1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-758.03906, 30.386719)
            int ui:nodegraph:node:stackingOrder = 38
        }
    }

    def NodeGraph "CylindricalUVs" (
        active = true
    )
    {
        reorder nameChildren = ["NormalMap", "Multiply", "Add", "Separate3", "Abs", "CheapContrast_1", "Mix", "Image", "Image_1", "Position", "Divide", "Separate3_1", "Combine2", "Combine2_1", "VectorToRadialValue_1"]
        float inputs:In = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1220.3309, -82.03018)
                    int stackingOrderInSubgraph = 261
                }
            }
        )
        float3 inputs:Normal = (0, 0, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1107.2219, 228.8041)
                    int stackingOrderInSubgraph = 176
                }
            }
        )
        asset inputs:TextureObject (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1038.9178, 85.33751)
                    int stackingOrderInSubgraph = 268
                }
            }
        )
        float3 outputs:CylinderProjection (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 6
                }
            }
        )
        float3 outputs:CylinderProjection.connect = </Root/CylindricalUVs/Image_1.outputs:out>
        float3 outputs:CylinderProjectionWTop (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 5
                }
            }
        )
        float3 outputs:CylinderProjectionWTop.connect = </Root/CylindricalUVs/Mix.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (428.66983, 25.656017)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 204

        def Shader "NormalMap"
        {
            uniform token info:id = "ND_normalmap"
            float3 inputs:in.connect = </Root/CylindricalUVs/Add.outputs:out>
            float3 inputs:normal
            float inputs:scale
            string inputs:space
            float3 inputs:tangent
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-715.09686, 254.52675)
            int ui:nodegraph:node:stackingOrder = 369
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/CylindricalUVs.inputs:Normal>
            float inputs:in2 = 0.5
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-951.01874, 227.48769)
            int ui:nodegraph:node:stackingOrder = 176
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector3FA"
            prepend float3 inputs:in1.connect = </Root/CylindricalUVs/Multiply.outputs:out>
            float inputs:in2 = 0.5
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-865.03046, 230.19081)
            int ui:nodegraph:node:stackingOrder = 176
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/CylindricalUVs/NormalMap.outputs:out>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-525.425, 325.19473)
            int ui:nodegraph:node:stackingOrder = 176
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/CylindricalUVs/Separate3.outputs:outz>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-357.32733, 345.8549)
            int ui:nodegraph:node:stackingOrder = 176
        }

        def "CheapContrast_1" (
            active = true
            instanceable = true
            references = </Root/CheapContrast>
        )
        {
            float inputs:Contrast = 1
            float inputs:In.connect = </Root/CylindricalUVs/Abs.outputs:out>
            float2 ui:nodegraph:node:pos = (-186.4819, 316.1826)
            int ui:nodegraph:node:stackingOrder = 182
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_vector3"
            float3 inputs:bg.connect = </Root/CylindricalUVs/Image_1.outputs:out>
            float3 inputs:fg.connect = </Root/CylindricalUVs/Image.outputs:out>
            prepend float inputs:mix.connect = </Root/CylindricalUVs/CheapContrast_1.outputs:Out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (155.0811, 157.01602)
            int ui:nodegraph:node:stackingOrder = 200
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_vector3"
            float3 inputs:default
            prepend asset inputs:file.connect = </Root/CylindricalUVs.inputs:TextureObject>
            string inputs:filtertype
            float2 inputs:texcoord.connect = </Root/CylindricalUVs/Combine2.outputs:out>
            string inputs:uaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-169.82205, 79.25585)
            int ui:nodegraph:node:stackingOrder = 367
        }

        def Shader "Image_1"
        {
            uniform token info:id = "ND_image_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/CylindricalUVs.inputs:TextureObject>
            string inputs:filtertype
            float2 inputs:texcoord.connect = </Root/CylindricalUVs/Combine2_1.outputs:out>
            string inputs:uaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-49.10162, -169.9355)
            int ui:nodegraph:node:stackingOrder = 365
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1366.5275, -175.72473)
            int ui:nodegraph:node:stackingOrder = 355
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_vector3FA"
            prepend float3 inputs:in1.connect = </Root/CylindricalUVs/Position.outputs:out>
            float inputs:in2.connect = </Root/CylindricalUVs.inputs:In>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1014.0028, -96.57774)
            int ui:nodegraph:node:stackingOrder = 261
        }

        def Shader "Separate3_1"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/CylindricalUVs/Divide.outputs:out>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-870.2389, -94.58094)
            int ui:nodegraph:node:stackingOrder = 265
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/CylindricalUVs/Separate3_1.outputs:outx>
            float inputs:in2.connect = </Root/CylindricalUVs/Separate3_1.outputs:outy>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-657.38684, -73.85909)
            int ui:nodegraph:node:stackingOrder = 266
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/CylindricalUVs/VectorToRadialValue_1.outputs:VectorConvertedToAngle>
            float inputs:in2.connect = </Root/CylindricalUVs/Separate3_1.outputs:outz>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-274.047, -210.19402)
            int ui:nodegraph:node:stackingOrder = 304
        }

        def "VectorToRadialValue_1" (
            active = true
            instanceable = true
            references = </Root/VectorToRadialValue>
        )
        {
            bool inputs:SwizzleCoordinateOutput
            float2 inputs:VectorOrUVs.connect = </Root/CylindricalUVs/Combine2_2.outputs:out>
            float2 ui:nodegraph:node:pos = (-497.36716, -300.83475)
            int ui:nodegraph:node:stackingOrder = 306
        }

        def Shader "Combine2_2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/CylindricalUVs/Separate3_2.outputs:outx>
            float inputs:in2.connect = </Root/CylindricalUVs/Separate3_2.outputs:outy>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-700.3209, -300.1594)
            int ui:nodegraph:node:stackingOrder = 351
        }

        def Shader "Separate3_2"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/CylindricalUVs/Subtract.outputs:out>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-905.5081, -301.23547)
            int ui:nodegraph:node:stackingOrder = 351
        }

        def Shader "TransformVector"
        {
            uniform token info:id = "ND_transformvector_vector3"
            string inputs:fromspace = "object"
            float3 inputs:in.connect = None
            string inputs:tospace = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1341.6278, -288.88065)
            int ui:nodegraph:node:stackingOrder = 370
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector3"
            float3 inputs:in1.connect = </Root/CylindricalUVs/Position.outputs:out>
            float3 inputs:in2.connect = </Root/CylindricalUVs/TransformVector.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1070.2009, -304.41193)
            int ui:nodegraph:node:stackingOrder = 362
        }
    }
}

