#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["InputTextureCoordinate", "Panner", "SphereMask", "Fresnel", "CameraDepthFade", "GeneratedBand", "GeneratedOffsetBands", "NormalFromHeightmap", "NormalFromHeightmapChaos", "RadialGradientExponential", "ExponentialDensity", "DiamondGradient", "Cube"]
    def NodeGraph "SphereMask"
    {
        reorder nameChildren = ["Multiply", "Subtract", "Magnitude", "Group", "Group2", "Divide", "Abs", "MTLCospi", "Multiply_3", "Clamp_1", "Range_1", "Clamp", "Fractional", "UV", "InputTextureCoordinate_1"]
        float2 inputs:A = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-93.94556, -85.53709)
                    int stackingOrderInSubgraph = 2055
                }
            }
        )
        float2 inputs:B = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-0.5617834, 230.23872)
                    int stackingOrderInSubgraph = 1646
                }
            }
        )
        float inputs:Hardness = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (2.6202536, 475.79825)
                    int stackingOrderInSubgraph = 1529
                }
            }
        )
        float inputs:Radius = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2.7921915, 358.8785)
                    int stackingOrderInSubgraph = 1649
                }
            }
        )
        float outputs:Oneminus_out.connect = </Root/SphereMask/MTLCospi.outputs:out>
        float2 ui:nodegraph:node:pos = (-714.68396, 25.64183)
        int ui:nodegraph:node:stackingOrder = 785
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1571.9099, 82.907974)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2024

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SphereMask.inputs:Hardness>
            float inputs:in2 = 0.01
            float inputs:in2.connect = None
            float outputs:out
            float2 ui:nodegraph:node:pos = (170.8795, 472.86765)
            int ui:nodegraph:node:stackingOrder = 1529
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/SphereMask/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/SphereMask.inputs:B>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (450.05792, -84.117294)
            int ui:nodegraph:node:stackingOrder = 1281
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/SphereMask/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (586.58307, -76.7678)
            int ui:nodegraph:node:stackingOrder = 1283
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Custom Coordinates"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["i:inputs:A"]
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Center"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["i:inputs:B"]
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/SphereMask/Magnitude.outputs:out>
            float inputs:in2.connect = </Root/SphereMask/Abs.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (737.24396, -42.28077)
            int ui:nodegraph:node:stackingOrder = 1407
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/SphereMask.inputs:Radius>
            float outputs:out
            float2 ui:nodegraph:node:pos = (191.05048, 326.92395)
            int ui:nodegraph:node:stackingOrder = 1651
        }

        def Shader "MTLCospi"
        {
            uniform token info:id = "ND_MTL_cospi_float"
            float inputs:x.connect = </Root/SphereMask/Range_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1391.1366, 89.5694)
            int ui:nodegraph:node:stackingOrder = 2023
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SphereMask/Clamp_1.outputs:out>
            float inputs:in2.connect = </Root/SphereMask/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (670.4945, 335.81085)
            int ui:nodegraph:node:stackingOrder = 1643
        }

        def Shader "Clamp_1"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/SphereMask/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (842.2626, -37.560177)
            int ui:nodegraph:node:stackingOrder = 1472
        }

        def Shader "Range_1"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp = 0
            float inputs:gamma
            float inputs:in.connect = </Root/SphereMask/Clamp_1.outputs:out>
            float inputs:inhigh = 1
            float inputs:inlow.connect = </Root/SphereMask/Fractional.outputs:out>
            float inputs:outhigh = 0.5
            float inputs:outlow
            float outputs:out
            float2 ui:nodegraph:node:pos = (1197.9062, 56.660774)
            int ui:nodegraph:node:stackingOrder = 1654
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/SphereMask/Multiply.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (398.56467, 379.87082)
            int ui:nodegraph:node:stackingOrder = 1713
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/SphereMask/Multiply_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (941.67725, 245.65057)
            int ui:nodegraph:node:stackingOrder = 1715
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/SphereMask.inputs:A>
            float2 ui:nodegraph:node:pos = (166.79086, -112.980446)
            int ui:nodegraph:node:stackingOrder = 2054
        }
    }

    def NodeGraph "Fresnel"
    {
        float inputs:BaseReflectFraction = 0.04 (
            colorSpace = ""
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (881.9404, 169.66081)
                    int stackingOrderInSubgraph = 371
                }
            }
        )
        float inputs:Exp = 5 (
            colorSpace = ""
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (850.32837, 349.24)
                    int stackingOrderInSubgraph = 365
                }
            }
        )
        float outputs:Exp_out.connect = </Root/Fresnel/Add.outputs:out>
        float2 ui:nodegraph:node:pos = (-974.91406, -57.359375)
        int ui:nodegraph:node:stackingOrder = 707
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1478.4657, 253.6973)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 369

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/Fresnel/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/Fresnel.inputs:Exp>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1053.6631, 333.0475)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "ViewDirection"
        {
            uniform token info:id = "ND_realitykit_viewdirection_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (344.9641, 328.0443)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Fresnel/Oneminus_1.outputs:out>
            float inputs:in2.connect = </Root/Fresnel/Power.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1239.6238, 289.70642)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/Fresnel/Normal.outputs:out>
            float3 inputs:in2.connect = </Root/Fresnel/ViewDirection.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (578.22144, 291.79297)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/Fresnel/Max.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (894.1604, 291.67957)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/Fresnel.inputs:BaseReflectFraction>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1100.9023, 190.06544)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Fresnel/Multiply.outputs:out>
            float inputs:in2.connect = </Root/Fresnel.inputs:BaseReflectFraction>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1346.3232, 280.7932)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Max"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1
            float inputs:in2.connect = </Root/Fresnel/DotProduct.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (779.81323, 287.67432)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Normal"
        {
            uniform token info:id = "ND_normal_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (359.81482, 247.60356)
            int ui:nodegraph:node:stackingOrder = 367
        }
    }

    def NodeGraph "GeneratedBand" (
        references = None
    )
    {
        reorder nameChildren = ["InputTextureCoordinate_1", "Convert_4", "Separate2", "MTLSelect", "Fractional_1", "Combine2", "Convert", "Add", "SphereMask_1"]
        float inputs:Compare = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (621.64124, 319.25262)
                    int stackingOrderInSubgraph = 1760
                }
            }
        )
        bool inputs:Direction_Switch = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (521.07104, 221.2182)
                    int stackingOrderInSubgraph = 1892
                }
            }
        )
        float inputs:Offset = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (346.79556, 134.9079)
                    int stackingOrderInSubgraph = 1905
                }
            }
        )
        float inputs:Offset.connect = None
        float inputs:Sharpness = 5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (618.0296, 414.06967)
                    int stackingOrderInSubgraph = 1760
                }
            }
        )
        float2 inputs:TextureCoordinate = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (187.04388, -19.879124)
                    int stackingOrderInSubgraph = 2088
                }
            }
        )
        float inputs:Width = 0.25 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (609.3762, 513.85455)
                    int stackingOrderInSubgraph = 1760
                }
            }
        )
        float outputs:SphereMask_Oneminus_out.connect = </Root/GeneratedBand/SphereMask_1.outputs:Oneminus_out>
        float2 ui:nodegraph:node:pos = (-1144.0477, 1066.399)
        int ui:nodegraph:node:stackingOrder = 960
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1871.5, 343)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1760

        def Shader "Convert_4"
        {
            uniform token info:id = "ND_convert_float_vector2"
            float inputs:in.connect = </Root/GeneratedBand.inputs:Compare>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1004.8723, 328.79047)
            int ui:nodegraph:node:stackingOrder = 1760
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/GeneratedBand/Add.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (752.12805, 50.18009)
            int ui:nodegraph:node:stackingOrder = 1894
        }

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/GeneratedBand/Separate2.outputs:outy>
            float inputs:b.connect = </Root/GeneratedBand/Separate2.outputs:outx>
            bool inputs:c.connect = </Root/GeneratedBand.inputs:Direction_Switch>
            float outputs:out
            float2 ui:nodegraph:node:pos = (939.6931, 69.18269)
            int ui:nodegraph:node:stackingOrder = 1886
        }

        def Shader "Fractional_1"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/GeneratedBand/MTLSelect.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1162.0714, 163.93248)
            int ui:nodegraph:node:stackingOrder = 1910
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/GeneratedBand/Fractional_1.outputs:out>
            float inputs:in2.connect = </Root/GeneratedBand.inputs:Compare>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1428.9279, 199.14738)
            int ui:nodegraph:node:stackingOrder = 1909
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_vector2"
            prepend float inputs:in.connect = </Root/GeneratedBand.inputs:Offset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (492.21823, 72.9517)
            int ui:nodegraph:node:stackingOrder = 1898
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/GeneratedBand/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/GeneratedBand/Convert.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (620.30585, 43.90564)
            int ui:nodegraph:node:stackingOrder = 1906
        }

        def "SphereMask_1" (
            active = true
            instanceable = true
            references = </Root/SphereMask>
        )
        {
            float2 inputs:A.connect = </Root/GeneratedBand/Combine2.outputs:out>
            float2 inputs:B.connect = </Root/GeneratedBand/Convert_4.outputs:out>
            float inputs:Hardness.connect = </Root/GeneratedBand.inputs:Sharpness>
            float inputs:Radius.connect = </Root/GeneratedBand.inputs:Width>
            float2 ui:nodegraph:node:pos = (1634.558, 304.95367)
            int ui:nodegraph:node:stackingOrder = 1912
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/GeneratedBand.inputs:TextureCoordinate>
            float2 ui:nodegraph:node:pos = (427.5223, -48.61487)
            int ui:nodegraph:node:stackingOrder = 2036
        }
    }

    def NodeGraph "CameraDepthFade" (
        active = true
    )
    {
        float inputs:FadeLength = 100 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-435.15732, 164.45984)
                    int stackingOrderInSubgraph = 193
                }
            }
        )
        float inputs:FadeOffset = 30 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-429.82578, 67.02295)
                    int stackingOrderInSubgraph = 204
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 188
                }
            }
        )
        float outputs:Out.connect = </Root/CameraDepthFade/Clamp.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (207.7312, 92.099)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 190

        def Shader "MTLDistance"
        {
            uniform token info:id = "ND_MTL_distance_vector3_float"
            float3 inputs:x.connect = </Root/CameraDepthFade/CameraPosition.outputs:out>
            float3 inputs:y.connect = </Root/CameraDepthFade/Position.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-286.67075, -55.701416)
            int ui:nodegraph:node:stackingOrder = 187
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/CameraDepthFade.inputs:FadeOffset>
            float inputs:in2 = 0.01
            float outputs:out
            float2 ui:nodegraph:node:pos = (-258.97006, 60.900208)
            int ui:nodegraph:node:stackingOrder = 202
        }

        def Shader "Range"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp = 0
            float inputs:gamma
            float inputs:in.connect = </Root/CameraDepthFade/MTLDistance.outputs:out>
            float inputs:inhigh.connect = </Root/CameraDepthFade/Multiply_1.outputs:out>
            float inputs:inlow.connect = </Root/CameraDepthFade/Multiply.outputs:out>
            float inputs:outhigh = 0
            float inputs:outlow = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-86.05966, 38.831665)
            int ui:nodegraph:node:stackingOrder = 216
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-550.43616, -4.9819946)
            int ui:nodegraph:node:stackingOrder = 206
        }

        def Shader "CameraPosition"
        {
            uniform token info:id = "ND_realitykit_cameraposition_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-522.808, -74.59711)
            int ui:nodegraph:node:stackingOrder = 205
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/CameraDepthFade.inputs:FadeLength>
            float inputs:in2 = 0.01
            float outputs:out
            float2 ui:nodegraph:node:pos = (-255.45712, 164.9129)
            int ui:nodegraph:node:stackingOrder = 203
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/CameraDepthFade/Range.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (53.737793, 153.42682)
            int ui:nodegraph:node:stackingOrder = 217
        }
    }

    def NodeGraph "GeneratedOffsetBands"
    {
        reorder nameChildren = ["Convert_4", "InputTextureCoordinate_2", "Separate2", "MTLSelect", "Multiply", "Convert", "Abs", "Add", "MTLSinpi", "Convert_1", "Multiply_1", "SphereMask_1", "InputTextureCoordinate_1"]
        float inputs:Bands = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-93.555786, 77.791374)
                    int stackingOrderInSubgraph = 2343
                }
            }
        )
        float inputs:Compare = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (650.083, 407.90686)
                    int stackingOrderInSubgraph = 1987
                }
            }
        )
        bool inputs:Direction_Switch = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (548.9916, 263.5766)
                    int stackingOrderInSubgraph = 2121
                }
            }
        )
        float inputs:Offset = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (104.55174, 180.27872)
                    int stackingOrderInSubgraph = 2347
                }
            }
        )
        float inputs:Offset.connect = None
        float inputs:Sharpness = 0.25 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (648.2649, 495.8301)
                    int stackingOrderInSubgraph = 1989
                }
            }
        )
        float2 inputs:TextureCoordinate = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-88.35181, -39.95572)
                    int stackingOrderInSubgraph = 2343
                }
            }
        )
        float inputs:Width = 0.25 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (659.5469, 576.16907)
                    int stackingOrderInSubgraph = 2303
                }
            }
        )
        float outputs:SphereMask_Oneminus_out.connect = </Root/GeneratedOffsetBands/SphereMask_1.outputs:Oneminus_out>
        float2 ui:nodegraph:node:pos = (-1124.0477, 1086.399)
        int ui:nodegraph:node:stackingOrder = 961
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2037.8438, 369.0013)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2341

        def Shader "Convert_4"
        {
            uniform token info:id = "ND_convert_float_vector2"
            float inputs:in.connect = </Root/GeneratedOffsetBands.inputs:Compare>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1280.7853, 322.56915)
            int ui:nodegraph:node:stackingOrder = 2301
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/GeneratedOffsetBands/Abs.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (913.21326, 69.784256)
            int ui:nodegraph:node:stackingOrder = 2314
        }

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/GeneratedOffsetBands/Separate2.outputs:outy>
            float inputs:b.connect = </Root/GeneratedOffsetBands/Separate2.outputs:outx>
            bool inputs:c.connect = </Root/GeneratedOffsetBands.inputs:Direction_Switch>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1140.5723, 68.99843)
            int ui:nodegraph:node:stackingOrder = 2247
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/GeneratedOffsetBands/InputTextureCoordinate_2.outputs:Add_out>
            float inputs:in2.connect = </Root/GeneratedOffsetBands.inputs:Bands>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (310.94894, 2.4574347)
            int ui:nodegraph:node:stackingOrder = 2332
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_vector2"
            float inputs:in.connect = </Root/GeneratedOffsetBands.inputs:Offset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (463.4557, 133.76013)
            int ui:nodegraph:node:stackingOrder = 2286
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_vector2"
            float2 inputs:in.connect = </Root/GeneratedOffsetBands/Add.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (755.95056, 62.996548)
            int ui:nodegraph:node:stackingOrder = 2316
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/GeneratedOffsetBands/MTLSinpi.outputs:out>
            float2 inputs:in2.connect = </Root/GeneratedOffsetBands/Convert.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (640.8457, 70.0029)
            int ui:nodegraph:node:stackingOrder = 2251
        }

        def Shader "MTLSinpi"
        {
            uniform token info:id = "ND_MTL_sinpi_vector2"
            float2 inputs:x.connect = </Root/GeneratedOffsetBands/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (521.74805, -55.74726)
            int ui:nodegraph:node:stackingOrder = 2336
        }

        def Shader "Convert_1"
        {
            uniform token info:id = "ND_convert_float_vector2"
            prepend float inputs:in.connect = </Root/GeneratedOffsetBands/MTLSelect.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1425.2584, 182.40935)
            int ui:nodegraph:node:stackingOrder = 2321
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/GeneratedOffsetBands/Multiply.outputs:out>
            float inputs:in2 = 2
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (402.68948, 19.011396)
            int ui:nodegraph:node:stackingOrder = 2337
        }

        def "SphereMask_1" (
            active = true
            instanceable = true
            references = </Root/SphereMask>
        )
        {
            float2 inputs:A.connect = </Root/GeneratedOffsetBands/Convert_1.outputs:out>
            float2 inputs:B.connect = </Root/GeneratedOffsetBands/Convert_4.outputs:out>
            float inputs:Hardness.connect = </Root/GeneratedOffsetBands.inputs:Sharpness>
            float inputs:Radius.connect = </Root/GeneratedOffsetBands.inputs:Width>
            float2 ui:nodegraph:node:pos = (1725.0178, 346.44482)
            int ui:nodegraph:node:stackingOrder = 2339
        }

        def "InputTextureCoordinate_2" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/GeneratedOffsetBands.inputs:TextureCoordinate>
            float2 ui:nodegraph:node:pos = (127.38694, -58.875954)
            int ui:nodegraph:node:stackingOrder = 2344
        }
    }

    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube/DefaultMaterial>
        double size = 0.2

        def Material "DefaultMaterial" (
            references = None
        )
        {
            reorder nameChildren = ["GeneratedBand_1", "DefaultSurfaceShader", "PreviewSurface", "Convert", "GeneratedOffsetBands_1", "NormalFromHeightmapChaos_1", "Convert_1", "Convert_2", "DiamondGradient_1"]
            token outputs:mtlx:surface.connect = </Root/Cube/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube/DefaultMaterial/Convert_2.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def "GeneratedBand_1" (
                active = true
                instanceable = true
                references = </Root/GeneratedBand>
            )
            {
                float inputs:Compare
                bool inputs:Direction_Switch
                float inputs:Offset
                float inputs:Sharpness
                float inputs:Width
                float outputs:SphereMask_Oneminus_out.connect = </Root/Cube/DefaultMaterial/GeneratedBand_1/SphereMask_1.outputs:Oneminus_out>
                float2 ui:nodegraph:node:pos = (-1246.1019, 83.5001)
                int ui:nodegraph:node:stackingOrder = 2388
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube/DefaultMaterial/GeneratedOffsetBands_1.outputs:SphereMask_Oneminus_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-506.32373, 369.30585)
                int ui:nodegraph:node:stackingOrder = 2357
            }

            def "GeneratedOffsetBands_1" (
                active = true
                instanceable = true
                references = </Root/GeneratedOffsetBands>
            )
            {
                float inputs:Bands
                float inputs:Compare
                bool inputs:Direction_Switch
                float inputs:Offset
                float inputs:Sharpness
                float2 inputs:TextureCoordinate
                float inputs:Width
                float outputs:SphereMask_Oneminus_out.connect = </Root/Cube/DefaultMaterial/GeneratedOffsetBands_1/SphereMask_1.outputs:Oneminus_out>
                float2 ui:nodegraph:node:pos = (-934.18884, 306.99118)
                int ui:nodegraph:node:stackingOrder = 1281
            }

            def "NormalFromHeightmapChaos_1" (
                active = true
                instanceable = true
                references = </Root/NormalFromHeightmapChaos>
            )
            {
                float inputs:Height = 8
                float inputs:HeightBias = 0.5
                float2 inputs:TextureCoordinate = (0, 0)
                float2 ui:nodegraph:node:pos = (-884.10284, 94.39017)
                int ui:nodegraph:node:stackingOrder = 2497
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Normal"]
            }

            def Shader "Convert_1"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube/DefaultMaterial/NormalFromHeightmapChaos_1.outputs:Normal>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-569.007, 133.7517)
                int ui:nodegraph:node:stackingOrder = 2370
            }

            def Shader "Convert_2"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube/DefaultMaterial/DiamondGradient_1.outputs:Result>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-688.1407, -51.110497)
                int ui:nodegraph:node:stackingOrder = 2504
            }

            def "DiamondGradient_1" (
                active = true
                instanceable = true
                references = </Root/DiamondGradient>
            )
            {
                float inputs:Falloff = 3 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-567.7656, 385.57812)
                            int stackingOrderInSubgraph = 9
                        }
                    }
                )
                float2 ui:nodegraph:node:pos = (-964.19324, -128.14442)
                int ui:nodegraph:node:stackingOrder = 2509
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Result", "inputs:Falloff"]
            }
        }
    }

    def NodeGraph "NormalFromHeightmap" (
        active = true
    )
    {
        reorder nameChildren = ["Combine2", "Combine2_1", "Add", "Add_1", "UVTexture", "Convert", "DotProduct", "DotProduct_1", "Convert_1", "UVTexture_1", "DotProduct_2", "UVTexture_2", "Convert_2", "Subtract", "Subtract_1", "Multiply", "Multiply_1", "Combine3", "Combine3_1", "CrossProduct", "InputTextureCoordinate_1"]
        asset inputs:HeightMap = @../Texture/DefaultTexture1.png@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1162.6179, 72.852135)
                    int stackingOrderInSubgraph = 214
                }
            }
        )
        float4 inputs:HeightMapChannelSelector = (1, 0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-740.99414, 439.71875)
                    int stackingOrderInSubgraph = 163
                }
            }
        )
        float inputs:HeightMapUVOffset = 0.005 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1992.2212, 111.96069)
                    int stackingOrderInSubgraph = 2095
                }
            }
        )
        float inputs:NormalMapIntensity = 8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-182.60843, 162.40535)
                    int stackingOrderInSubgraph = 189
                }
            }
        )
        float2 inputs:TextureCoordinate = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1634.3265, 108.18056)
                    int stackingOrderInSubgraph = 2093
                }
            }
        )
        float3 outputs:Normal (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (97.3956, 180.89505)
                    int stackingOrderInSubgraph = 212
                }
            }
        )
        float3 outputs:Normal.connect = </Root/NormalFromHeightmap/CrossProduct.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (735.79895, 133.74709)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 212

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/NormalFromHeightmap.inputs:HeightMapUVOffset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1497.6055, -9.171875)
            int ui:nodegraph:node:stackingOrder = 16
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/NormalFromHeightmap.inputs:HeightMapUVOffset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1499.8828, 204.79688)
            int ui:nodegraph:node:stackingOrder = 19
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/NormalFromHeightmap/Combine2.outputs:out>
            float2 inputs:in2.connect = </Root/NormalFromHeightmap/InputTextureCoordinate_1.outputs:Add_out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1115.2305, -5.9375)
            int ui:nodegraph:node:stackingOrder = 25
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/NormalFromHeightmap/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/NormalFromHeightmap/Combine2_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1130.3477, 211.55078)
            int ui:nodegraph:node:stackingOrder = 28
        }

        def Shader "UVTexture"
        {
            uniform token info:id = "ND_UsdUVTexture"
            asset inputs:file.connect = </Root/NormalFromHeightmap.inputs:HeightMap>
            color4f inputs:scale
            float2 inputs:st.connect = </Root/NormalFromHeightmap/Add.outputs:out>
            string inputs:wrapS
            string inputs:wrapT
            color4f outputs:rgba
            float2 ui:nodegraph:node:pos = (-865.6335, -99.25285)
            int ui:nodegraph:node:stackingOrder = 169
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_color4_vector4"
            color4f inputs:in.connect = </Root/NormalFromHeightmap/UVTexture.outputs:rgba>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-704.8242, -22.40625)
            int ui:nodegraph:node:stackingOrder = 144
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector4"
            float4 inputs:in1.connect = </Root/NormalFromHeightmap/Convert.outputs:out>
            float4 inputs:in2.connect = </Root/NormalFromHeightmap.inputs:HeightMapChannelSelector>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-448.60004, 1.7942768)
            int ui:nodegraph:node:stackingOrder = 181
        }

        def Shader "DotProduct_1"
        {
            uniform token info:id = "ND_dotproduct_vector4"
            float4 inputs:in1.connect = </Root/NormalFromHeightmap/Convert_1.outputs:out>
            float4 inputs:in2.connect = </Root/NormalFromHeightmap.inputs:HeightMapChannelSelector>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-454.20557, 166.41826)
            int ui:nodegraph:node:stackingOrder = 183
        }

        def Shader "Convert_1"
        {
            uniform token info:id = "ND_convert_color4_vector4"
            color4f inputs:in.connect = </Root/NormalFromHeightmap/UVTexture_1.outputs:rgba>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-686.5374, 178.91458)
            int ui:nodegraph:node:stackingOrder = 165
        }

        def Shader "UVTexture_1"
        {
            uniform token info:id = "ND_UsdUVTexture"
            color4f inputs:bias
            color4f inputs:fallback
            asset inputs:file.connect = </Root/NormalFromHeightmap.inputs:HeightMap>
            color4f inputs:scale
            float2 inputs:st.connect = </Root/NormalFromHeightmap/InputTextureCoordinate_1.outputs:Add_out>
            string inputs:wrapS
            string inputs:wrapT
            color4f outputs:rgba
            float2 ui:nodegraph:node:pos = (-918.2689, 75.27363)
            int ui:nodegraph:node:stackingOrder = 171
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "DotProduct_2"
        {
            uniform token info:id = "ND_dotproduct_vector4"
            float4 inputs:in1.connect = </Root/NormalFromHeightmap/Convert_2.outputs:out>
            float4 inputs:in2.connect = </Root/NormalFromHeightmap.inputs:HeightMapChannelSelector>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-457.61075, 298.31555)
            int ui:nodegraph:node:stackingOrder = 157
        }

        def Shader "UVTexture_2"
        {
            uniform token info:id = "ND_UsdUVTexture"
            color4f inputs:bias
            color4f inputs:fallback
            asset inputs:file.connect = </Root/NormalFromHeightmap.inputs:HeightMap>
            color4f inputs:scale
            float2 inputs:st.connect = </Root/NormalFromHeightmap/Add_1.outputs:out>
            string inputs:wrapS
            string inputs:wrapT
            color4f outputs:rgba
            float2 ui:nodegraph:node:pos = (-921.7803, 301.15244)
            int ui:nodegraph:node:stackingOrder = 173
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Convert_2"
        {
            uniform token info:id = "ND_convert_color4_vector4"
            color4f inputs:in.connect = </Root/NormalFromHeightmap/UVTexture_2.outputs:rgba>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-694.9302, 312.36072)
            int ui:nodegraph:node:stackingOrder = 163
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/NormalFromHeightmap/DotProduct.outputs:out>
            float inputs:in2.connect = </Root/NormalFromHeightmap/DotProduct_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-252.97327, -1.3399274)
            int ui:nodegraph:node:stackingOrder = 184
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/NormalFromHeightmap/DotProduct_2.outputs:out>
            float inputs:in2.connect = </Root/NormalFromHeightmap/DotProduct_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-269.60233, 302.47845)
            int ui:nodegraph:node:stackingOrder = 187
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/NormalFromHeightmap/Subtract.outputs:out>
            float inputs:in2.connect = </Root/NormalFromHeightmap.inputs:NormalMapIntensity>
            float outputs:out
            float2 ui:nodegraph:node:pos = (90.37684, 2.1156042)
            int ui:nodegraph:node:stackingOrder = 190
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/NormalFromHeightmap.inputs:NormalMapIntensity>
            float inputs:in2.connect = </Root/NormalFromHeightmap/Subtract_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (76.44848, 303.77008)
            int ui:nodegraph:node:stackingOrder = 191
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1 = 1
            float inputs:in2
            prepend float inputs:in3.connect = </Root/NormalFromHeightmap/Multiply.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (250.90251, -7.255707)
            int ui:nodegraph:node:stackingOrder = 209
        }

        def Shader "Combine3_1"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1
            float inputs:in2 = 1
            prepend float inputs:in3.connect = </Root/NormalFromHeightmap/Multiply_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (237.30962, 291.46884)
            int ui:nodegraph:node:stackingOrder = 210
        }

        def Shader "CrossProduct"
        {
            uniform token info:id = "ND_crossproduct_vector3"
            float3 inputs:in1.connect = </Root/NormalFromHeightmap/Combine3.outputs:out>
            float3 inputs:in2.connect = </Root/NormalFromHeightmap/Combine3_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (455.91394, 119.40798)
            int ui:nodegraph:node:stackingOrder = 213
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmap.inputs:TextureCoordinate>
            float2 ui:nodegraph:node:pos = (-1397.554, 66.74605)
            int ui:nodegraph:node:stackingOrder = 2035
        }
    }

    def NodeGraph "InputTextureCoordinate"
    {
        float2 inputs:TextureCoordinate (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (102, 220)
                    int stackingOrderInSubgraph = 2389
                }
            }
        )
        float2 inputs:TextureCoordinate.connect = None
        float2 outputs:Add_out.connect = </Root/InputTextureCoordinate/IfEqual.outputs:out>
        float2 ui:nodegraph:node:pos = (-364.71768, -231.75021)
        int ui:nodegraph:node:stackingOrder = 2030
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1748.25, 183.25)

        def Shader "ConstantFloat2"
        {
            uniform token info:id = "ND_constant_vector2"
            float2 inputs:value = (0, 0)
            float2 inputs:value.connect = </Root/InputTextureCoordinate.inputs:TextureCoordinate>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (362.26355, 231.64615)
            int ui:nodegraph:node:stackingOrder = 2503
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            int inputs:index = 0
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1007.6138, 233.69334)
            int ui:nodegraph:node:stackingOrder = 2540
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/InputTextureCoordinate/ConstantFloat2.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (541.9487, 82.03208)
            int ui:nodegraph:node:stackingOrder = 2505
        }

        def Shader "IfEqual_1"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:value1.connect = </Root/InputTextureCoordinate/Separate2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (733.5229, -66.11583)
            int ui:nodegraph:node:stackingOrder = 2533
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
        }

        def Shader "IfEqual_2"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:value1.connect = </Root/InputTextureCoordinate/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (733.79944, 116.4508)
            int ui:nodegraph:node:stackingOrder = 2536
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/InputTextureCoordinate/IfEqual_1.outputs:out>
            float inputs:in2.connect = </Root/InputTextureCoordinate/IfEqual_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1085.2476, 71.321846)
            int ui:nodegraph:node:stackingOrder = 2511
        }

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_vector2"
            float2 inputs:in1.connect = </Root/InputTextureCoordinate/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/InputTextureCoordinate/ConstantFloat2.outputs:out>
            float inputs:value1.connect = </Root/InputTextureCoordinate/Add.outputs:out>
            float inputs:value2.connect = None
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1398.7833, 292.74045)
            int ui:nodegraph:node:stackingOrder = 2538
        }
    }

    def NodeGraph "NormalFromHeightmapChaos" (
        active = true
    )
    {
        reorder nameChildren = ["Combine2", "Combine2_1", "Add", "Add_1", "UVTexture", "Convert", "DotProduct", "DotProduct_1", "Convert_1", "UVTexture_1", "DotProduct_2", "UVTexture_2", "Convert_2", "Subtract", "Subtract_1", "Multiply", "Multiply_1", "Combine3", "Combine3_1", "CrossProduct", "InputTextureCoordinate_1"]
        float inputs:Height = 8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-182.60843, 162.40535)
                    int stackingOrderInSubgraph = 2355
                }
            }
        )
        float inputs:HeightBias = 0.005 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1992.2212, 111.96069)
                    int stackingOrderInSubgraph = 2355
                }
            }
        )
        float2 inputs:TextureCoordinate = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1647.3922, 86.88366)
                    int stackingOrderInSubgraph = 2356
                }
            }
        )
        float3 outputs:Normal (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (97.3956, 180.89505)
                    int stackingOrderInSubgraph = 212
                }
            }
        )
        float3 outputs:Normal.connect = </Root/NormalFromHeightmapChaos/CrossProduct.outputs:out>
        float2 ui:nodegraph:node:pos = (-631.0861, 133.23294)
        int ui:nodegraph:node:stackingOrder = 1
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (735.79895, 133.74709)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 212

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/NormalFromHeightmapChaos.inputs:HeightBias>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1497.6055, -9.171875)
            int ui:nodegraph:node:stackingOrder = 2360
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/NormalFromHeightmapChaos.inputs:HeightBias>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1499.8828, 204.79688)
            int ui:nodegraph:node:stackingOrder = 2359
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Combine2.outputs:out>
            float2 inputs:in2.connect = </Root/NormalFromHeightmapChaos/InputTextureCoordinate_1.outputs:Add_out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1127.0687, -41.542545)
            int ui:nodegraph:node:stackingOrder = 2155
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/NormalFromHeightmapChaos/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Combine2_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1130.3477, 211.55078)
            int ui:nodegraph:node:stackingOrder = 28
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/NormalFromHeightmapChaos/Subtract_2.outputs:out>
            float inputs:in2.connect = </Root/NormalFromHeightmapChaos.inputs:Height>
            float outputs:out
            float2 ui:nodegraph:node:pos = (49.975502, 29.26704)
            int ui:nodegraph:node:stackingOrder = 2369
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/NormalFromHeightmapChaos.inputs:Height>
            float inputs:in2.connect = </Root/NormalFromHeightmapChaos/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (55.22138, 225.42062)
            int ui:nodegraph:node:stackingOrder = 2371
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1 = 1
            float inputs:in2
            float inputs:in3.connect = </Root/NormalFromHeightmapChaos/Multiply.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (248.24486, 28.635298)
            int ui:nodegraph:node:stackingOrder = 2363
        }

        def Shader "Combine3_1"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1
            float inputs:in2 = 1
            float inputs:in3.connect = </Root/NormalFromHeightmapChaos/Multiply_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (249.70345, 204.34573)
            int ui:nodegraph:node:stackingOrder = 2365
        }

        def Shader "CrossProduct"
        {
            uniform token info:id = "ND_crossproduct_vector3"
            float3 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Combine3.outputs:out>
            float3 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Combine3_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (455.91394, 119.40798)
            int ui:nodegraph:node:stackingOrder = 2372
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos.inputs:TextureCoordinate>
            float2 ui:nodegraph:node:pos = (-1404.6279, 88.48882)
            int ui:nodegraph:node:stackingOrder = 2494
        }

        def NodeGraph "Motion_4WayChaos"
        {
            float inputs:Divisor = 0.25 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-231.29219, 333.7716)
                        int stackingOrderInSubgraph = 351
                    }
                }
            )
            float inputs:Speed = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-1317.6787, 417.50687)
                        int stackingOrderInSubgraph = 873
                    }
                }
            )
            asset inputs:Texture = @../Texture/DefaultTexture1.png@ (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-926.99274, 539.58527)
                        int stackingOrderInSubgraph = 634
                    }
                }
            )
            asset inputs:Texture.connect = </Root/NormalFromHeightmapChaos/HeightMap.outputs:out>
            float2 inputs:TextureCoordinate = (0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-1456.6433, -271.10068)
                        int stackingOrderInSubgraph = 816
                    }
                }
            )
            float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Add.outputs:out>
            float3 outputs:Result.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Multiply.outputs:out>
            float2 ui:nodegraph:node:pos = (-776.5464, -141.19461)
            int ui:nodegraph:node:stackingOrder = 2495
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (219.03133, -27.371452)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 886

            def "Panner_1" (
                active = true
                instanceable = true
                references = </Root/Panner>
            )
            {
                float2 inputs:Speed = (0.1, 0.1)
                float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:TextureCoordinate>
                float inputs:Time.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Multiply_1.outputs:out>
                float2 ui:nodegraph:node:pos = (-956.33856, -298.5887)
                int ui:nodegraph:node:stackingOrder = 817
            }

            def "Panner_2" (
                active = true
                instanceable = true
                references = </Root/Panner>
            )
            {
                float2 inputs:Speed = (-0.1, -0.1)
                float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add_2.outputs:out>
                float inputs:Time.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Multiply_1.outputs:out>
                float2 ui:nodegraph:node:pos = (-951.30914, -111.23219)
                int ui:nodegraph:node:stackingOrder = 909
            }

            def Shader "Add_2"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:TextureCoordinate>
                float2 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/ConstantFloat2.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1178.9521, -136.77795)
                int ui:nodegraph:node:stackingOrder = 333
            }

            def Shader "ConstantFloat2"
            {
                uniform token info:id = "ND_constant_vector2"
                float2 inputs:value = (0.418, 0.3548)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1345.3597, -127.29697)
                int ui:nodegraph:node:stackingOrder = 333
            }

            def "Panner_3" (
                active = true
                instanceable = true
                references = </Root/Panner>
            )
            {
                float2 inputs:Speed = (-0.1, 0.1)
                float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add_3.outputs:out>
                float inputs:Time.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Multiply_1.outputs:out>
                float2 ui:nodegraph:node:pos = (-946.8168, 84.72011)
                int ui:nodegraph:node:stackingOrder = 631
            }

            def Shader "Add_3"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:TextureCoordinate>
                float2 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/ConstantFloat2_1.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1170.0529, 95.93252)
                int ui:nodegraph:node:stackingOrder = 561
            }

            def Shader "ConstantFloat2_1"
            {
                uniform token info:id = "ND_constant_vector2"
                float2 inputs:value = (0.8648, 0.14838)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1345.7959, 100.02505)
                int ui:nodegraph:node:stackingOrder = 561
            }

            def "Panner_4" (
                active = true
                instanceable = true
                references = </Root/Panner>
            )
            {
                float2 inputs:Speed = (0.1, -0.1)
                float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add_5.outputs:out>
                float inputs:Time.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Multiply_1.outputs:out>
                float2 ui:nodegraph:node:pos = (-949.9716, 260.35675)
                int ui:nodegraph:node:stackingOrder = 773
            }

            def Shader "ConstantFloat2_2"
            {
                uniform token info:id = "ND_constant_vector2"
                float2 inputs:value = (0.65134, 0.751638)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1356.5637, 260.5557)
                int ui:nodegraph:node:stackingOrder = 572
            }

            def Shader "Add_5"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:TextureCoordinate>
                float2 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/ConstantFloat2_2.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-1159.5399, 263.73547)
                int ui:nodegraph:node:stackingOrder = 568
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_vector3FA"
                float3 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add.outputs:out>
                prepend float inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Divisor>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-55.287888, 109.62064)
                int ui:nodegraph:node:stackingOrder = 743
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @../Texture/DefaultTexture1.png@
                prepend asset inputs:file.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Texture>
                string inputs:filtertype = "linear"
                prepend float2 inputs:texcoord.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Panner_1.outputs:Result>
                string inputs:uaddressmode = "periodic"
                string inputs:vaddressmode = "periodic"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-629.8757, -606.02545)
                int ui:nodegraph:node:stackingOrder = 902
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Speed>
                float inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Time.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1172.9697, 418.93082)
                int ui:nodegraph:node:stackingOrder = 731
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1318.7048, 487.54507)
                int ui:nodegraph:node:stackingOrder = 872
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_vector3"
                prepend float3 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add_1.outputs:out>
                float3 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Add_4.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-257.45703, 80.65418)
                int ui:nodegraph:node:stackingOrder = 769
            }

            def Shader "Image_3"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @../Texture/DefaultTexture1.png@
                prepend asset inputs:file.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Texture>
                string inputs:filtertype = "linear"
                prepend float2 inputs:texcoord.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Panner_3.outputs:Result>
                string inputs:uaddressmode = "periodic"
                string inputs:vaddressmode = "periodic"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-614.4748, 43.042473)
                int ui:nodegraph:node:stackingOrder = 897
            }

            def Shader "Image_1"
            {
                uniform token info:id = "ND_image_vector3"
                float3 inputs:default
                asset inputs:file = @../Texture/DefaultTexture1.png@
                asset inputs:file.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Texture>
                string inputs:filtertype = "linear"
                float2 inputs:texcoord.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Panner_2.outputs:Result>
                string inputs:uaddressmode = "periodic"
                string inputs:vaddressmode = "periodic"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-517.6736, -353.8751)
                int ui:nodegraph:node:stackingOrder = 900
            }

            def Shader "Add_1"
            {
                uniform token info:id = "ND_add_vector3"
                prepend float3 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Image.outputs:out>
                float3 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Image_1.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-231.76506, -228.74396)
                int ui:nodegraph:node:stackingOrder = 840
            }

            def Shader "Image_4"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @../Texture/DefaultTexture1.png@
                prepend asset inputs:file.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.inputs:Texture>
                string inputs:filtertype = "linear"
                prepend float2 inputs:texcoord.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Panner_4.outputs:Result>
                string inputs:uaddressmode = "periodic"
                string inputs:vaddressmode = "periodic"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-483.71893, 348.3796)
                int ui:nodegraph:node:stackingOrder = 869
            }

            def Shader "Add_4"
            {
                uniform token info:id = "ND_add_vector3"
                prepend float3 inputs:in1.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Image_3.outputs:out>
                float3 inputs:in2.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos/Image_4.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-306.89963, 274.40762)
                int ui:nodegraph:node:stackingOrder = 850
            }
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos.outputs:Result>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-532.0221, -72.79432)
            int ui:nodegraph:node:stackingOrder = 2487
        }

        def Shader "Subtract_2"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/NormalFromHeightmapChaos/Separate3.outputs:outx>
            float inputs:in2.connect = </Root/NormalFromHeightmapChaos/Separate3_1.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-348.76654, -72.654045)
            int ui:nodegraph:node:stackingOrder = 2487
        }

        def "Motion_4WayChaos_1" (
            active = true
            instanceable = true
            references = </Root/NormalFromHeightmapChaos/Motion_4WayChaos>
        )
        {
            asset inputs:Texture.connect = </Root/NormalFromHeightmapChaos/HeightMap.outputs:out>
            float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/InputTextureCoordinate_1.outputs:Add_out>
            float2 ui:nodegraph:node:pos = (-774.7422, 56.08916)
            int ui:nodegraph:node:stackingOrder = 2487
        }

        def Shader "Separate3_1"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos_1.outputs:Result>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-521.9322, 105.37446)
            int ui:nodegraph:node:stackingOrder = 2491
        }

        def "Motion_4WayChaos_2" (
            active = true
            instanceable = true
            references = </Root/NormalFromHeightmapChaos/Motion_4WayChaos>
        )
        {
            asset inputs:Texture.connect = </Root/NormalFromHeightmapChaos/HeightMap.outputs:out>
            float2 inputs:TextureCoordinate.connect = </Root/NormalFromHeightmapChaos/Add_1.outputs:out>
            float2 ui:nodegraph:node:pos = (-782.84467, 247.44806)
            int ui:nodegraph:node:stackingOrder = 2487
        }

        def Shader "Separate3_2"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/NormalFromHeightmapChaos/Motion_4WayChaos_2.outputs:Result>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-512.3706, 296.7813)
            int ui:nodegraph:node:stackingOrder = 2493
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/NormalFromHeightmapChaos/Separate3_2.outputs:outx>
            float inputs:in2.connect = </Root/NormalFromHeightmapChaos/Separate3_1.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-345.94598, 282.70505)
            int ui:nodegraph:node:stackingOrder = 2487
        }

        def Shader "HeightMap"
        {
            uniform token info:id = "ND_constant_filename"
            asset inputs:value = @../Texture/DefaultTexture1.png@
            asset outputs:out
            float2 ui:nodegraph:node:pos = (-1103.3353, 67.50774)
            int ui:nodegraph:node:stackingOrder = 2489
        }
    }

    def NodeGraph "Panner" (
        active = true
    )
    {
        float2 inputs:Speed = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-864.5945, -17.178223)
                    int stackingOrderInSubgraph = 2072
                }
            }
        )
        float2 inputs:TextureCoordinate = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-913.6235, -141.34178)
                    int stackingOrderInSubgraph = 2052
                }
            }
        )
        float inputs:Time = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-796.8127, 95.73418)
                    int stackingOrderInSubgraph = 2073
                }
            }
        )
        float2 outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-187.91405, -91.772125)
                    int stackingOrderInSubgraph = 2036
                }
            }
        )
        float2 outputs:Result.connect = </Root/Panner/Add.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (147.09917, -130.74405)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2049

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/Panner.inputs:TextureCoordinate>
            float2 ui:nodegraph:node:pos = (-617.29645, -151.0586)
            int ui:nodegraph:node:stackingOrder = 2047
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/Panner.inputs:Speed>
            float inputs:in2.connect = </Root/Panner.inputs:Time>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-612.6205, 38.8978)
            int ui:nodegraph:node:stackingOrder = 2059
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_vector2"
            float2 inputs:in.connect = </Root/Panner/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-406.75967, 85.55603)
            int ui:nodegraph:node:stackingOrder = 2066
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/Panner/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/Panner/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-153.45984, -121.54819)
            int ui:nodegraph:node:stackingOrder = 2062
        }
    }

    def NodeGraph "RadialGradientExponential" (
        active = true
    )
    {
        reorder nameChildren = ["MTLSelect", "InputTextureCoordinate_1", "MTLDistance", "Divide", "Oneminus", "ExponentialDensity_1"]
        float2 inputs:CenterPosition = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1506.5323, -27.999403)
                    int stackingOrderInSubgraph = 2095
                }
            }
        )
        float inputs:Density = 2.33 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1422.6837, 226.98267)
                    int stackingOrderInSubgraph = 2095
                }
            }
        )
        bool inputs:InvertDensity = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-795.2717, 388.53506)
                    int stackingOrderInSubgraph = 2195
                }
            }
        )
        float inputs:Radius = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1441.9808, 63.12706)
                    int stackingOrderInSubgraph = 2098
                }
            }
        )
        float2 inputs:UVs = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1742.797, -136.09937)
                    int stackingOrderInSubgraph = 2095
                }
            }
        )
        float outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-585, 126.5)
                    int stackingOrderInSubgraph = 4
                }
            }
        )
        float outputs:Result.connect = </Root/RadialGradientExponential/MTLSelect.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/RadialGradientExponential/Oneminus_1.outputs:out>
            float inputs:b.connect = </Root/RadialGradientExponential/ExponentialDensity_2.outputs:Result>
            bool inputs:c.connect = </Root/RadialGradientExponential.inputs:InvertDensity>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-279.20312, 70.53516)
            int ui:nodegraph:node:stackingOrder = 6
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/RadialGradientExponential.inputs:UVs>
            float2 ui:nodegraph:node:pos = (-1486.461, -150.98222)
            int ui:nodegraph:node:stackingOrder = 2095
        }

        def Shader "MTLDistance"
        {
            uniform token info:id = "ND_MTL_distance_vector2_float"
            float2 inputs:x.connect = </Root/RadialGradientExponential/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:y.connect = </Root/RadialGradientExponential.inputs:CenterPosition>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1265.7635, -92.36622)
            int ui:nodegraph:node:stackingOrder = 2095
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/RadialGradientExponential/MTLDistance.outputs:out>
            float inputs:in2.connect = </Root/RadialGradientExponential.inputs:Radius>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1115.8015, -22.846767)
            int ui:nodegraph:node:stackingOrder = 2100
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/RadialGradientExponential/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-935.5731, -23.994514)
            int ui:nodegraph:node:stackingOrder = 2186
        }

        def "ExponentialDensity_1" (
            active = true
            instanceable = true
            references = </Root/ExponentialDensity>
        )
        {
            float inputs:Density.connect = </Root/RadialGradientExponential.inputs:Density>
            float inputs:Depth.connect = </Root/RadialGradientExponential/Oneminus.outputs:out>
            bool inputs:UseExp2
            float2 ui:nodegraph:node:pos = (-689.39856, -48.903008)
            int ui:nodegraph:node:stackingOrder = 2188
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/RadialGradientExponential/ExponentialDensity_1.outputs:Result>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-515.92804, 0.79983246)
            int ui:nodegraph:node:stackingOrder = 2186
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Normal Density"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Oneminus_1", "p:Oneminus", "p:ExponentialDensity_1"]
        }

        def "ExponentialDensity_2" (
            active = true
            instanceable = true
            references = </Root/ExponentialDensity>
        )
        {
            float inputs:Density.connect = </Root/RadialGradientExponential.inputs:Density>
            float inputs:Depth.connect = </Root/RadialGradientExponential/Divide.outputs:out>
            bool inputs:UseExp2
            float2 ui:nodegraph:node:pos = (-743.68945, 187.0011)
            int ui:nodegraph:node:stackingOrder = 2192
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Inverted Density"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:ExponentialDensity_2"]
        }
    }

    def NodeGraph "ExponentialDensity" (
        active = true
    )
    {
        float inputs:Density = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-827.46875, 75.83594)
                    int stackingOrderInSubgraph = 72
                }
            }
        )
        float inputs:Depth = 0.66 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-823.4258, -61.14453)
                    int stackingOrderInSubgraph = 71
                }
            }
        )
        bool inputs:UseExp2 = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-834.8203, 156.03906)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-54, 46.5)
                    int stackingOrderInSubgraph = 50
                }
            }
        )
        float outputs:Result.connect = </Root/ExponentialDensity/IfGreater.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (430.78516, 88.74609)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 21

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/ExponentialDensity.inputs:Depth>
            float inputs:in2.connect = </Root/ExponentialDensity.inputs:Density>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-688.7344, 33.285156)
            int ui:nodegraph:node:stackingOrder = 6
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/ExponentialDensity/Multiply.outputs:out>
            float inputs:in2.connect = </Root/ExponentialDensity/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-575.504, 60.97754)
            int ui:nodegraph:node:stackingOrder = 75
        }

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/ExponentialDensity/Multiply.outputs:out>
            float inputs:b.connect = </Root/ExponentialDensity/Multiply_1.outputs:out>
            prepend bool inputs:c.connect = </Root/ExponentialDensity.inputs:UseExp2>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-406.77927, 35.85241)
            int ui:nodegraph:node:stackingOrder = 73
        }

        def Shader "Exp"
        {
            uniform token info:id = "ND_exp_float"
            float inputs:in.connect = </Root/ExponentialDensity/MTLSelect.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-219.08594, 109.783585)
            int ui:nodegraph:node:stackingOrder = 85
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/ExponentialDensity/ConstantFloat.outputs:out>
            float inputs:in2.connect = </Root/ExponentialDensity/Exp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-25.392578, 52.830765)
            int ui:nodegraph:node:stackingOrder = 82
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-209.85646, 45.53051)
            int ui:nodegraph:node:stackingOrder = 80
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1.connect = </Root/ExponentialDensity/Divide.outputs:out>
            float inputs:in2.connect = </Root/ExponentialDensity/ConstantFloat_1.outputs:out>
            float inputs:value1.connect = </Root/ExponentialDensity.inputs:Depth>
            float inputs:value2.connect = </Root/ExponentialDensity/ConstantFloat_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (237.91406, -65.984375)
            int ui:nodegraph:node:stackingOrder = 68
        }

        def Shader "ConstantFloat_1"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (7.6154027, 125.03763)
            int ui:nodegraph:node:stackingOrder = 87
        }

        def Shader "ConstantFloat_2"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0
            float outputs:out
            float2 ui:nodegraph:node:pos = (-94.73088, -26.531519)
            int ui:nodegraph:node:stackingOrder = 78
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Skip if depth less than 0"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:IfGreater"]
        }
    }

    def NodeGraph "DiamondGradient" (
        active = true
    )
    {
        float inputs:Falloff = 3 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-567.7656, 385.57812)
                    int stackingOrderInSubgraph = 9
                }
            }
        )
        float outputs:Result (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-398, 58.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Result.connect = </Root/DiamondGradient/Power.outputs:out>
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Result"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (-37.78125, 96.77734)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 7

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/DiamondGradient/Multiply.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient.inputs:Falloff>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-306.58203, 112.69922)
            int ui:nodegraph:node:stackingOrder = 5
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/DiamondGradient/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient/Oneminus_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-463.65625, 100.01953)
            int ui:nodegraph:node:stackingOrder = 11
        }

        def Shader "RampHorizontal"
        {
            uniform token info:id = "ND_ramplr_float"
            float2 inputs:texcoord
            float inputs:valuer = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1485.8318, -40.621353)
            int ui:nodegraph:node:stackingOrder = 75
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/DiamondGradient/RampHorizontal.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient/ConstantFloat.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1314.4142, -26.891853)
            int ui:nodegraph:node:stackingOrder = 112
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = -0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1489.3396, 277.49194)
            int ui:nodegraph:node:stackingOrder = 126
        }

        def Shader "RampVertical"
        {
            uniform token info:id = "ND_ramptb_float"
            float2 inputs:texcoord
            float inputs:valueb = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1488.7185, 132.33177)
            int ui:nodegraph:node:stackingOrder = 75
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/DiamondGradient/RampVertical.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient/ConstantFloat.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1307.2775, 158.47144)
            int ui:nodegraph:node:stackingOrder = 112
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/DiamondGradient/Add.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient/ConstantFloat_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1139.3967, -19.698673)
            int ui:nodegraph:node:stackingOrder = 119
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/DiamondGradient/Add_1.outputs:out>
            float inputs:in2.connect = </Root/DiamondGradient/ConstantFloat_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1137.7772, 158.40472)
            int ui:nodegraph:node:stackingOrder = 114
        }

        def Shader "ConstantFloat_1"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1309.4547, 349.36447)
            int ui:nodegraph:node:stackingOrder = 117
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/DiamondGradient/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-985.206, -20.795763)
            int ui:nodegraph:node:stackingOrder = 123
        }

        def Shader "Abs_1"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/DiamondGradient/Multiply_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-982.7079, 156.79947)
            int ui:nodegraph:node:stackingOrder = 121
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/DiamondGradient/Abs.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-784.344, -18.292883)
            int ui:nodegraph:node:stackingOrder = 124
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/DiamondGradient/Abs_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-774.9831, 153.36098)
            int ui:nodegraph:node:stackingOrder = 125
        }
    }
}

