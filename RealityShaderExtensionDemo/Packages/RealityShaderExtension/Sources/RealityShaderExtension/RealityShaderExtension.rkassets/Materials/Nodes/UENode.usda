#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["SphereMask", "Fresnel", "GeneratedBand", "CurveLinear", "CameraDepthFade", "GeneratedOffsetBands"]
    def NodeGraph "SphereMask"
    {
        float2 inputs:A = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-404.85837, -147.8678)
                    int stackingOrderInSubgraph = 1477
                }
            }
        )
        float2 inputs:B = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-0.5617834, 230.23872)
                    int stackingOrderInSubgraph = 1646
                }
            }
        )
        float inputs:Hardness = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (2.6202536, 475.79825)
                    int stackingOrderInSubgraph = 1529
                }
            }
        )
        float inputs:Radius = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2.7921915, 358.8785)
                    int stackingOrderInSubgraph = 1649
                }
            }
        )
        bool inputs:UseCustomA = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-352.3573, 29.584417)
                    int stackingOrderInSubgraph = 1500
                }
            }
        )
        float outputs:Oneminus_out.connect = </Root/SphereMask/MTLCospi.outputs:out>
        float2 ui:nodegraph:node:pos = (-714.68396, 25.64183)
        int ui:nodegraph:node:stackingOrder = 785
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1571.9099, 82.907974)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1564

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SphereMask.inputs:Hardness>
            float inputs:in2 = 0.01
            float inputs:in2.connect = None
            float outputs:out
            float2 ui:nodegraph:node:pos = (170.8795, 472.86765)
            int ui:nodegraph:node:stackingOrder = 1529
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/SphereMask/Add.outputs:out>
            float2 inputs:in2.connect = </Root/SphereMask.inputs:B>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (450.05792, -84.117294)
            int ui:nodegraph:node:stackingOrder = 1281
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/SphereMask/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (586.58307, -76.7678)
            int ui:nodegraph:node:stackingOrder = 1283
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            int inputs:index = 0
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-112.00531, -90.85475)
            int ui:nodegraph:node:stackingOrder = 1490
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/SphereMask/MTLSelect.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (53.56439, 41.39299)
            int ui:nodegraph:node:stackingOrder = 1498
        }

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:b
            bool inputs:c.connect = </Root/SphereMask.inputs:UseCustomA>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-117.71107, 28.279898)
            int ui:nodegraph:node:stackingOrder = 1496
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/SphereMask.inputs:A>
            float inputs:in2.connect = </Root/SphereMask/MTLSelect.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (138.24591, -116.93707)
            int ui:nodegraph:node:stackingOrder = 1264
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/SphereMask/TextureCoordinates.outputs:out>
            float inputs:in2.connect = </Root/SphereMask/Oneminus_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (130.78592, -38.81667)
            int ui:nodegraph:node:stackingOrder = 1493
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/SphereMask/Multiply_1.outputs:out>
            float2 inputs:in2.connect = </Root/SphereMask/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (296.59943, -112.74668)
            int ui:nodegraph:node:stackingOrder = 1264
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Custom Coordinates"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["i:inputs:A"]
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Center"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["i:inputs:B"]
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/SphereMask/Magnitude.outputs:out>
            float inputs:in2.connect = </Root/SphereMask/Abs.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (737.24396, -42.28077)
            int ui:nodegraph:node:stackingOrder = 1407
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/SphereMask.inputs:Radius>
            float outputs:out
            float2 ui:nodegraph:node:pos = (191.05048, 326.92395)
            int ui:nodegraph:node:stackingOrder = 1651
        }

        def Shader "MTLCospi"
        {
            uniform token info:id = "ND_MTL_cospi_float"
            float inputs:x.connect = </Root/SphereMask/Range_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1405.1165, 84.95503)
            int ui:nodegraph:node:stackingOrder = 1564
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SphereMask/Clamp_1.outputs:out>
            float inputs:in2.connect = </Root/SphereMask/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (670.4945, 335.81085)
            int ui:nodegraph:node:stackingOrder = 1643
        }

        def Shader "Clamp_1"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/SphereMask/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (842.2626, -37.560177)
            int ui:nodegraph:node:stackingOrder = 1472
        }

        def Shader "Range_1"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp = 0
            float inputs:gamma
            float inputs:in.connect = </Root/SphereMask/Clamp_1.outputs:out>
            float inputs:inhigh = 1
            float inputs:inlow.connect = </Root/SphereMask/Fractional.outputs:out>
            float inputs:outhigh = 0.5
            float inputs:outlow
            float outputs:out
            float2 ui:nodegraph:node:pos = (1197.9062, 56.660774)
            int ui:nodegraph:node:stackingOrder = 1654
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/SphereMask/Multiply.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (398.56467, 379.87082)
            int ui:nodegraph:node:stackingOrder = 1713
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/SphereMask/Multiply_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (941.67725, 245.65057)
            int ui:nodegraph:node:stackingOrder = 1715
        }
    }

    def NodeGraph "Fresnel"
    {
        float inputs:BaseReflectFraction = 0.04 (
            colorSpace = ""
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (881.9404, 169.66081)
                    int stackingOrderInSubgraph = 371
                }
            }
        )
        float inputs:Exp = 5 (
            colorSpace = ""
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (850.32837, 349.24)
                    int stackingOrderInSubgraph = 365
                }
            }
        )
        float outputs:Exp_out.connect = </Root/Fresnel/Add.outputs:out>
        float2 ui:nodegraph:node:pos = (-974.91406, -57.359375)
        int ui:nodegraph:node:stackingOrder = 707
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1478.4657, 253.6973)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 369

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/Fresnel/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/Fresnel.inputs:Exp>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1053.6631, 333.0475)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "ViewDirection"
        {
            uniform token info:id = "ND_realitykit_viewdirection_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (344.9641, 328.0443)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Fresnel/Oneminus_1.outputs:out>
            float inputs:in2.connect = </Root/Fresnel/Power.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1239.6238, 289.70642)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/Fresnel/Normal.outputs:out>
            float3 inputs:in2.connect = </Root/Fresnel/ViewDirection.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (578.22144, 291.79297)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/Fresnel/Max.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (894.1604, 291.67957)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/Fresnel.inputs:BaseReflectFraction>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1100.9023, 190.06544)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Fresnel/Multiply.outputs:out>
            float inputs:in2.connect = </Root/Fresnel.inputs:BaseReflectFraction>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1346.3232, 280.7932)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Max"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1
            float inputs:in2.connect = </Root/Fresnel/DotProduct.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (779.81323, 287.67432)
            int ui:nodegraph:node:stackingOrder = 366
        }

        def Shader "Normal"
        {
            uniform token info:id = "ND_normal_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (359.81482, 247.60356)
            int ui:nodegraph:node:stackingOrder = 367
        }
    }

    def NodeGraph "GeneratedBand"
    {
        reorder nameChildren = ["SphereMask_1", "Convert_3", "Convert_4", "Subtract_1", "Subtract", "Separate2", "MTLSelect", "TextureCoordinates", "Fractional_1", "SphereMask"]
        float inputs:Compare = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (621.64124, 319.25262)
                    int stackingOrderInSubgraph = 1760
                }
            }
        )
        bool inputs:Direction_Switch = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (521.07104, 221.2182)
                    int stackingOrderInSubgraph = 1892
                }
            }
        )
        float inputs:Offset = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (346.79556, 134.9079)
                    int stackingOrderInSubgraph = 1905
                }
            }
        )
        float inputs:Offset.connect = None
        float inputs:Sharpness = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (618.0296, 414.06967)
                    int stackingOrderInSubgraph = 1760
                }
            }
        )
        float inputs:Width = 0.25 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (609.3762, 513.85455)
                    int stackingOrderInSubgraph = 1760
                }
            }
        )
        float outputs:SphereMask_Oneminus_out.connect = </Root/GeneratedBand/SphereMask.outputs:Oneminus_out>
        float2 ui:nodegraph:node:pos = (-1144.0477, 1066.399)
        int ui:nodegraph:node:stackingOrder = 960
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1871.5, 343)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1760

        def Shader "Convert_4"
        {
            uniform token info:id = "ND_convert_float_vector2"
            float inputs:in.connect = </Root/GeneratedBand.inputs:Compare>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1004.8723, 328.79047)
            int ui:nodegraph:node:stackingOrder = 1760
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/GeneratedBand/Add.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (752.12805, 50.18009)
            int ui:nodegraph:node:stackingOrder = 1894
        }

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/GeneratedBand/Separate2.outputs:outy>
            float inputs:b.connect = </Root/GeneratedBand/Separate2.outputs:outx>
            bool inputs:c.connect = </Root/GeneratedBand.inputs:Direction_Switch>
            float outputs:out
            float2 ui:nodegraph:node:pos = (939.6931, 69.18269)
            int ui:nodegraph:node:stackingOrder = 1886
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (412.6306, 5.4287777)
            int ui:nodegraph:node:stackingOrder = 1902
        }

        def Shader "Fractional_1"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/GeneratedBand/MTLSelect.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1162.0714, 163.93248)
            int ui:nodegraph:node:stackingOrder = 1910
        }

        def "SphereMask" (
            active = true
            instanceable = true
            references = @UENode.usda@</Root/SphereMask>
        )
        {
            float2 inputs:A.connect = </Root/GeneratedBand/Combine2.outputs:out>
            float2 inputs:B.connect = </Root/GeneratedBand/Convert_4.outputs:out>
            float inputs:Hardness.connect = </Root/GeneratedBand.inputs:Sharpness>
            float inputs:Radius.connect = </Root/GeneratedBand.inputs:Width>
            bool inputs:UseCustomA = 1
            float2 ui:nodegraph:node:pos = (1638.75, 343)
            int ui:nodegraph:node:stackingOrder = 1912
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/GeneratedBand/Fractional_1.outputs:out>
            float inputs:in2.connect = </Root/GeneratedBand.inputs:Compare>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1428.9279, 199.14738)
            int ui:nodegraph:node:stackingOrder = 1909
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_vector2"
            prepend float inputs:in.connect = </Root/GeneratedBand.inputs:Offset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (492.21823, 72.9517)
            int ui:nodegraph:node:stackingOrder = 1898
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/GeneratedBand/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/GeneratedBand/Convert.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (620.30585, 43.90564)
            int ui:nodegraph:node:stackingOrder = 1906
        }
    }

    def NodeGraph "CurveLinear" (
        active = true
    )
    {
        float4 inputs:Begin = (0, 0.45, 2, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-706.25037, -90.62828)
                    int stackingOrderInSubgraph = 110
                }
            }
        )
        float4 inputs:End = (0, 1.45, 2, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-704.0486, -12.060043)
                    int stackingOrderInSubgraph = 110
                }
            }
        )
        float inputs:TimeCurve = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-702.8972, 64.39418)
                    int stackingOrderInSubgraph = 110
                }
            }
        )
        float inputs:TimeHigh = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-699.30334, 185.24916)
                    int stackingOrderInSubgraph = 110
                }
            }
        )
        float inputs:TimeLow = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-700.4585, 124.18977)
                    int stackingOrderInSubgraph = 110
                }
            }
        )
        float4 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-195, 80.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float4 outputs:Out.connect = </Root/CurveLinear/Mix.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (-47.25879, -8.304016)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 112

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_vector4"
            float4 inputs:bg.connect = </Root/CurveLinear.inputs:Begin>
            float4 inputs:fg.connect = </Root/CurveLinear.inputs:End>
            float inputs:mix.connect = </Root/CurveLinear/Clamp.outputs:out>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-319.27213, -44.014206)
            int ui:nodegraph:node:stackingOrder = 110
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high.connect = </Root/CurveLinear.inputs:TimeHigh>
            float inputs:in.connect = </Root/CurveLinear.inputs:TimeCurve>
            float inputs:low.connect = </Root/CurveLinear.inputs:TimeLow>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-528.27576, 107.27034)
            int ui:nodegraph:node:stackingOrder = 110
        }
    }

    def NodeGraph "CameraDepthFade" (
        active = true
    )
    {
        float inputs:FadeLength = 100 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-435.15732, 164.45984)
                    int stackingOrderInSubgraph = 193
                }
            }
        )
        float inputs:FadeOffset = 30 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-429.82578, 67.02295)
                    int stackingOrderInSubgraph = 204
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 188
                }
            }
        )
        float outputs:Out.connect = </Root/CameraDepthFade/Clamp.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (207.7312, 92.099)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 190

        def Shader "MTLDistance"
        {
            uniform token info:id = "ND_MTL_distance_vector3_float"
            float3 inputs:x.connect = </Root/CameraDepthFade/CameraPosition.outputs:out>
            float3 inputs:y.connect = </Root/CameraDepthFade/Position.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-286.67075, -55.701416)
            int ui:nodegraph:node:stackingOrder = 187
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/CameraDepthFade.inputs:FadeOffset>
            float inputs:in2 = 0.01
            float outputs:out
            float2 ui:nodegraph:node:pos = (-258.97006, 60.900208)
            int ui:nodegraph:node:stackingOrder = 202
        }

        def Shader "Range"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp = 0
            float inputs:gamma
            float inputs:in.connect = </Root/CameraDepthFade/MTLDistance.outputs:out>
            float inputs:inhigh.connect = </Root/CameraDepthFade/Multiply_1.outputs:out>
            float inputs:inlow.connect = </Root/CameraDepthFade/Multiply.outputs:out>
            float inputs:outhigh = 0
            float inputs:outlow = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-86.05966, 38.831665)
            int ui:nodegraph:node:stackingOrder = 216
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-550.43616, -4.9819946)
            int ui:nodegraph:node:stackingOrder = 206
        }

        def Shader "CameraPosition"
        {
            uniform token info:id = "ND_realitykit_cameraposition_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-522.808, -74.59711)
            int ui:nodegraph:node:stackingOrder = 205
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/CameraDepthFade.inputs:FadeLength>
            float inputs:in2 = 0.01
            float outputs:out
            float2 ui:nodegraph:node:pos = (-255.45712, 164.9129)
            int ui:nodegraph:node:stackingOrder = 203
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/CameraDepthFade/Range.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (53.737793, 153.42682)
            int ui:nodegraph:node:stackingOrder = 217
        }
    }

    def NodeGraph "GeneratedOffsetBands"
    {
        reorder nameChildren = ["SphereMask_1", "Convert_3", "Convert_4", "Subtract_1", "Subtract", "Separate2", "MTLSelect", "TextureCoordinates", "Fractional_1", "SphereMask"]
        float inputs:Bands = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (177.86731, 106.45092)
                    int stackingOrderInSubgraph = 2263
                }
            }
        )
        float inputs:Compare = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (650.083, 407.90686)
                    int stackingOrderInSubgraph = 1987
                }
            }
        )
        bool inputs:Direction_Switch = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (548.9916, 263.5766)
                    int stackingOrderInSubgraph = 2121
                }
            }
        )
        float inputs:Offset = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (185.90422, 204.85092)
                    int stackingOrderInSubgraph = 2223
                }
            }
        )
        float inputs:Offset.connect = None
        float inputs:Sharpness = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (648.2649, 495.8301)
                    int stackingOrderInSubgraph = 1989
                }
            }
        )
        float inputs:Width = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (659.5469, 576.16907)
                    int stackingOrderInSubgraph = 2303
                }
            }
        )
        float outputs:SphereMask_Oneminus_out.connect = </Root/GeneratedOffsetBands/NodeGraph.outputs:Oneminus_out>
        float2 ui:nodegraph:node:pos = (-1124.0477, 1086.399)
        int ui:nodegraph:node:stackingOrder = 961
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2037.8438, 369.0013)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2313

        def Shader "Convert_4"
        {
            uniform token info:id = "ND_convert_float_vector2"
            float inputs:in.connect = </Root/GeneratedOffsetBands.inputs:Compare>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1280.7853, 322.56915)
            int ui:nodegraph:node:stackingOrder = 2301
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/GeneratedOffsetBands/Add.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (850.564, 84.81352)
            int ui:nodegraph:node:stackingOrder = 2275
        }

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/GeneratedOffsetBands/Separate2.outputs:outy>
            float inputs:b.connect = </Root/GeneratedOffsetBands/Separate2.outputs:outx>
            bool inputs:c.connect = </Root/GeneratedOffsetBands.inputs:Direction_Switch>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1140.5723, 68.99843)
            int ui:nodegraph:node:stackingOrder = 2247
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1
            float inputs:in2.connect = </Root/GeneratedOffsetBands.inputs:Bands>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (366.1654, 60.112503)
            int ui:nodegraph:node:stackingOrder = 2294
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_vector2"
            float inputs:in.connect = </Root/GeneratedOffsetBands.inputs:Offset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (463.4557, 133.76013)
            int ui:nodegraph:node:stackingOrder = 2286
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_vector2"
            float2 inputs:in.connect = </Root/GeneratedOffsetBands/Add.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (750.5295, -17.021132)
            int ui:nodegraph:node:stackingOrder = 2273
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/GeneratedOffsetBands/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/GeneratedOffsetBands/Convert.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (640.8457, 70.0029)
            int ui:nodegraph:node:stackingOrder = 2251
        }

        def Shader "MTLSinpi"
        {
            uniform token info:id = "ND_MTL_sinpi_vector2"
            float2 inputs:x.connect = </Root/GeneratedOffsetBands/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (505.2568, -71.811615)
            int ui:nodegraph:node:stackingOrder = 2296
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/GeneratedOffsetBands/MTLSelect.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1342.6411, 125.40384)
            int ui:nodegraph:node:stackingOrder = 2292
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/GeneratedOffsetBands/Fractional.outputs:out>
            float inputs:in2.connect = </Root/GeneratedOffsetBands.inputs:Compare>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1552.2479, 143.22255)
            int ui:nodegraph:node:stackingOrder = 2289
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (228.78473, -38.943836)
            int ui:nodegraph:node:stackingOrder = 2299
        }

        def NodeGraph "NodeGraph" (
            references = @UENode.usda@</Root/SphereMask>
        )
        {
            float2 inputs:A.connect = </Root/GeneratedOffsetBands/Combine2.outputs:out>
            float2 inputs:B.connect = </Root/GeneratedOffsetBands/Convert_4.outputs:out>
            float inputs:Hardness.connect = </Root/GeneratedOffsetBands.inputs:Sharpness>
            float inputs:Radius.connect = </Root/GeneratedOffsetBands.inputs:Width>
            bool inputs:UseCustomA = 1
            float2 ui:nodegraph:node:pos = (1768.4214, 290.6663)
            int ui:nodegraph:node:stackingOrder = 2311
        }
    }

    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube/DefaultMaterial>
        double size = 0.2

        def Material "DefaultMaterial" (
            references = None
        )
        {
            reorder nameChildren = ["GeneratedOffsetBands_1", "GeneratedBand_1", "DefaultSurfaceShader", "PreviewSurface", "Convert"]
            token outputs:mtlx:surface.connect = </Root/Cube/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube/DefaultMaterial/Convert.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def "GeneratedBand_1" (
                active = true
                instanceable = true
                references = </Root/GeneratedBand>
            )
            {
                float inputs:Compare
                bool inputs:Direction_Switch
                float inputs:Offset
                float inputs:Sharpness
                float inputs:Width
                float2 ui:nodegraph:node:pos = (-677.74634, -107.61353)
                int ui:nodegraph:node:stackingOrder = 1028
            }

            def "GeneratedOffsetBands_1" (
                active = true
                instanceable = true
                references = </Root/GeneratedOffsetBands>
            )
            {
                float inputs:Bands
                float inputs:Compare
                bool inputs:Direction_Switch
                float inputs:Offset
                float inputs:Sharpness
                float inputs:Width
                float2 ui:nodegraph:node:pos = (-764.16034, 125.75148)
                int ui:nodegraph:node:stackingOrder = 1052
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Cube/DefaultMaterial/GeneratedOffsetBands_1.outputs:SphereMask_Oneminus_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-503.6073, 160.21027)
                int ui:nodegraph:node:stackingOrder = 1046
            }
        }
    }
}

