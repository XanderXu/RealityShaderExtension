#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["InputTextureCoordinate", "Cube", "PolarCoordinates", "RadialShear", "Rotate", "Spherize", "TilingAndOffset", "Twirl", "Ellipse", "Polygon", "Rectangle", "RoundedRectangle", "Checkerboard", "RoundedPolygon", "FresnelEffect", "SphereMask", "NoiseSinWave", "SawtoothWave", "SquareWave", "TriangleWave", "ChannelMixer", "Contrast", "Hue"]
    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube/DefaultMaterial>
        double size = 0.2

        def Material "DefaultMaterial"
        {
            reorder nameChildren = ["DefaultSurfaceShader", "PreviewSurface", "Hue_1", "ConstantString", "Time", "Group", "PolarCoordinates_1", "Convert", "Convert_1", "RadialShear_1"]
            token outputs:mtlx:surface.connect = </Root/Cube/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube/DefaultMaterial/Convert_1.outputs:out>
                float inputs:metallic
                float3 inputs:normal.connect = None
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
            }

            def Shader "ConstantString"
            {
                uniform token info:id = "ND_constant_string"
                string inputs:value = ""
                float2 ui:nodegraph:node:pos = (-700.0922, -173.96997)
                int ui:nodegraph:node:stackingOrder = 5
            }

            def Scope "Group" (
                kind = "group"
            )
            {
                string ui:group:annotation = "WIP"
                string ui:group:annotationDescription = "UV,Procedural,Math-Vector,Math-Wave,Artistic"
                string[] ui:group:members = ["p:ConstantString"]
            }

            def "PolarCoordinates_1" (
                active = true
                instanceable = true
                references = </Root/PolarCoordinates>
            )
            {
                float2 inputs:Center
                float inputs:LengthScale
                float inputs:RadialScale
                float2 inputs:UV
                float2 ui:nodegraph:node:pos = (-1083.1676, -261.39255)
                int ui:nodegraph:node:stackingOrder = 71
            }

            def Shader "Convert_1"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube/DefaultMaterial/Hue_1.outputs:Out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-453.0749, 71.935974)
                int ui:nodegraph:node:stackingOrder = 34
            }

            def "RadialShear_1" (
                active = true
                instanceable = true
                references = </Root/RadialShear>
            )
            {
                float2 inputs:Center = (0.5, 0.5)
                float2 inputs:Offset
                float2 inputs:Strength
                float2 inputs:UV
                float2 ui:nodegraph:node:pos = (-1317.7125, -165.83524)
                int ui:nodegraph:node:stackingOrder = 107
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_vector3"
                float inputs:in.connect = </Root/Cube/DefaultMaterial/TriangleWave_1.outputs:Out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-618.6961, 85.5661)
                int ui:nodegraph:node:stackingOrder = 36
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1251.8628, 69.276855)
                int ui:nodegraph:node:stackingOrder = 110
            }

            def "Hue_1" (
                active = true
                instanceable = true
                references = </Root/Hue>
            )
            {
                float3 inputs:In = (1, 0, 0)
                bool inputs:isOffsetInRadians = 0
                float inputs:Offset = -90
                float2 ui:nodegraph:node:pos = (-972.4822, -12.262449)
                int ui:nodegraph:node:stackingOrder = 156
            }

            def "TriangleWave_1"
            {
            }
        }
    }

    def NodeGraph "PolarCoordinates" (
        active = true
    )
    {
        float2 inputs:Center = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-798.5862, 134.26282)
                    int stackingOrderInSubgraph = 2110
                }
            }
        )
        float inputs:LengthScale = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-433.87387, 221.04208)
                    int stackingOrderInSubgraph = 2118
                }
            }
        )
        float inputs:RadialScale = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-470.07562, -78.48267)
                    int stackingOrderInSubgraph = 2126
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-901.45435, 17.386755)
                    int stackingOrderInSubgraph = 2110
                }
            }
        )
        float2 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-303, 81.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float2 outputs:Out.connect = </Root/PolarCoordinates/Combine2.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (293.80685, 36.921177)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2129

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/PolarCoordinates.inputs:UV>
            float2 ui:nodegraph:node:pos = (-691.3842, 13.322373)
            int ui:nodegraph:node:stackingOrder = 2110
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/PolarCoordinates/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/PolarCoordinates.inputs:Center>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-521.1915, 53.315464)
            int ui:nodegraph:node:stackingOrder = 2110
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/PolarCoordinates/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-357.99072, 26.55211)
            int ui:nodegraph:node:stackingOrder = 2112
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PolarCoordinates/Magnitude.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-142.60857, 27.854683)
            int ui:nodegraph:node:stackingOrder = 2061
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PolarCoordinates.inputs:RadialScale>
            float inputs:in2.connect = </Root/PolarCoordinates/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-57.95714, 10.618171)
            int ui:nodegraph:node:stackingOrder = 2063
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PolarCoordinates/Multiply_1.outputs:out>
            float inputs:in2.connect = </Root/PolarCoordinates/Multiply_3.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (100.36627, 62.973747)
            int ui:nodegraph:node:stackingOrder = 2057
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PolarCoordinates/Subtract.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-365.12347, 94.60844)
            int ui:nodegraph:node:stackingOrder = 2114
        }

        def Shader "Atan2"
        {
            uniform token info:id = "ND_atan2_float"
            float inputs:inx.connect = </Root/PolarCoordinates/Separate2.outputs:outy>
            float inputs:iny.connect = </Root/PolarCoordinates/Separate2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-220.04721, 92.95368)
            int ui:nodegraph:node:stackingOrder = 2116
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PolarCoordinates/Atan2.outputs:out>
            float inputs:in2.connect = </Root/PolarCoordinates.inputs:LengthScale>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-131.22784, 119.57918)
            int ui:nodegraph:node:stackingOrder = 2120
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PolarCoordinates/Multiply_2.outputs:out>
            float inputs:in2.connect = </Root/PolarCoordinates/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-34.08166, 110.81551)
            int ui:nodegraph:node:stackingOrder = 2122
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in2 = 6.28
            float outputs:out
            float2 ui:nodegraph:node:pos = (-180.84576, 212.11124)
            int ui:nodegraph:node:stackingOrder = 2124
        }
    }

    def NodeGraph "InputTextureCoordinate"
    {
        float2 inputs:TextureCoordinate (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (102, 220)
                    int stackingOrderInSubgraph = 2389
                }
            }
        )
        float2 inputs:TextureCoordinate.connect = None
        float2 outputs:Add_out.connect = </Root/InputTextureCoordinate/IfEqual.outputs:out>
        float2 ui:nodegraph:node:pos = (-344.71768, -211.75021)
        int ui:nodegraph:node:stackingOrder = 2031
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1748.25, 183.25)

        def Shader "ConstantFloat2"
        {
            uniform token info:id = "ND_constant_vector2"
            float2 inputs:value = (0, 0)
            float2 inputs:value.connect = </Root/InputTextureCoordinate.inputs:TextureCoordinate>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (362.26355, 231.64615)
            int ui:nodegraph:node:stackingOrder = 2503
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            int inputs:index = 0
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1007.6138, 233.69334)
            int ui:nodegraph:node:stackingOrder = 2540
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/InputTextureCoordinate/ConstantFloat2.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (541.9487, 82.03208)
            int ui:nodegraph:node:stackingOrder = 2505
        }

        def Shader "IfEqual_1"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:value1.connect = </Root/InputTextureCoordinate/Separate2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (733.5229, -66.11583)
            int ui:nodegraph:node:stackingOrder = 2533
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
        }

        def Shader "IfEqual_2"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1 = 0
            float inputs:in2 = 1
            float inputs:value1.connect = </Root/InputTextureCoordinate/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (733.79944, 116.4508)
            int ui:nodegraph:node:stackingOrder = 2536
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/InputTextureCoordinate/IfEqual_1.outputs:out>
            float inputs:in2.connect = </Root/InputTextureCoordinate/IfEqual_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1085.2476, 71.321846)
            int ui:nodegraph:node:stackingOrder = 2511
        }

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_vector2"
            float2 inputs:in1.connect = </Root/InputTextureCoordinate/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/InputTextureCoordinate/ConstantFloat2.outputs:out>
            float inputs:value1.connect = </Root/InputTextureCoordinate/Add.outputs:out>
            float inputs:value2.connect = None
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (1398.7833, 292.74045)
            int ui:nodegraph:node:stackingOrder = 2538
        }
    }

    def NodeGraph "RadialShear" (
        active = true
    )
    {
        float2 inputs:Center = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-665.2361, 102.634766)
                    int stackingOrderInSubgraph = 2367
                }
            }
        )
        float2 inputs:Offset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-23.453537, 238.43636)
                    int stackingOrderInSubgraph = 2379
                }
            }
        )
        float2 inputs:Strength = (10, 10) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-306.97177, -76.83507)
                    int stackingOrderInSubgraph = 2392
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-903.8132, -25.62869)
                    int stackingOrderInSubgraph = 2367
                }
            }
        )
        float2 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-487, 89.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float2 outputs:Out.connect = </Root/RadialShear/Add.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (444.0372, 13.229301)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2396

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/RadialShear.inputs:UV>
            float2 ui:nodegraph:node:pos = (-685.4553, -36.37286)
            int ui:nodegraph:node:stackingOrder = 2367
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/RadialShear/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/RadialShear.inputs:Center>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-514.1585, 82.87109)
            int ui:nodegraph:node:stackingOrder = 2367
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector2"
            float2 inputs:in1.connect = </Root/RadialShear/Subtract.outputs:out>
            float2 inputs:in2.connect = </Root/RadialShear/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-322.12173, 49.758778)
            int ui:nodegraph:node:stackingOrder = 2367
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/RadialShear.inputs:Strength>
            float inputs:in2.connect = </Root/RadialShear/DotProduct.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-118.96663, 52.17666)
            int ui:nodegraph:node:stackingOrder = 2394
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/RadialShear/Multiply_1.outputs:out>
            float2 inputs:in2.connect = </Root/RadialShear.inputs:Offset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (214.18326, 71.503555)
            int ui:nodegraph:node:stackingOrder = 2400
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/RadialShear/Multiply.outputs:out>
            float2 inputs:in2.connect = </Root/RadialShear/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (80.78538, 72.67731)
            int ui:nodegraph:node:stackingOrder = 2402
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/RadialShear/Multiply_2.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-245.58545, 126.467545)
            int ui:nodegraph:node:stackingOrder = 2372
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/RadialShear/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/RadialShear/Separate2.outputs:outx>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-39.5652, 119.42054)
            int ui:nodegraph:node:stackingOrder = 2370
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/RadialShear/Subtract.outputs:out>
            float2 inputs:in2 = (-1, 1)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-382.62787, 124.12244)
            int ui:nodegraph:node:stackingOrder = 2367
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/RadialShear/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/RadialShear/Add_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (286.53717, 37.278114)
            int ui:nodegraph:node:stackingOrder = 2390
        }
    }

    def NodeGraph "Rotate" (
        active = true
    )
    {
        float2 inputs:Center = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-521.9799, 30.21246)
                    int stackingOrderInSubgraph = 2045
                }
            }
        )
        float inputs:Rotation = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-683.05396, 113.83434)
                    int stackingOrderInSubgraph = 2054
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-757.22455, -44.16199)
                    int stackingOrderInSubgraph = 2036
                }
            }
        )
        float2 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-260, 76.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float2 outputs:Out.connect = </Root/Rotate/Add.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (880.33435, -44.48817)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2140

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/Rotate.inputs:UV>
            float2 ui:nodegraph:node:pos = (-546.4586, -70.06983)
            int ui:nodegraph:node:stackingOrder = 2038
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/Rotate/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/Rotate.inputs:Center>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-369.57858, -14.40851)
            int ui:nodegraph:node:stackingOrder = 2043
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Rotate.inputs:Rotation>
            float inputs:in2.connect = </Root/Rotate/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-503.6098, 140.89691)
            int ui:nodegraph:node:stackingOrder = 2062
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 3.1415925
            float inputs:in2 = 180
            float outputs:out
            float2 ui:nodegraph:node:pos = (-624.9619, 172.42236)
            int ui:nodegraph:node:stackingOrder = 2059
        }

        def Shader "Sin"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/Rotate/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-369.69812, 110.216064)
            int ui:nodegraph:node:stackingOrder = 2132
        }

        def Shader "Cos"
        {
            uniform token info:id = "ND_cos_float"
            float inputs:in.connect = </Root/Rotate/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-360.99512, 164.59982)
            int ui:nodegraph:node:stackingOrder = 2100
        }

        def Shader "ConstantMatrix2x2"
        {
            uniform token info:id = "ND_constant_matrix22"
            matrix2d inputs:value.connect = </Root/Rotate/Combine2.outputs:out>
            matrix2d outputs:out
            float2 ui:nodegraph:node:pos = (355.473, 103.28551)
            int ui:nodegraph:node:stackingOrder = 2120
        }

        def Shader "TransformMatrix"
        {
            uniform token info:id = "ND_transformmatrix_vector2"
            float2 inputs:in.connect = </Root/Rotate/Subtract.outputs:out>
            matrix2d inputs:mat.connect = </Root/Rotate/ConstantMatrix2x2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (574.6821, 46.80951)
            int ui:nodegraph:node:stackingOrder = 2138
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/Rotate.inputs:Center>
            float2 inputs:in2.connect = </Root/Rotate/TransformMatrix.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (732.5793, -4.5643353)
            int ui:nodegraph:node:stackingOrder = 2136
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_realitykit_combine2_matrix22"
            float2 inputs:in1.connect = </Root/Rotate/Combine2_1.outputs:out>
            float2 inputs:in2.connect = </Root/Rotate/Combine2_2.outputs:out>
            matrix2d outputs:out
            float2 ui:nodegraph:node:pos = (147.21626, 107.055336)
            int ui:nodegraph:node:stackingOrder = 2122
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Rotate/Sin.outputs:out>
            float inputs:in2 = -1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-242.36505, 93.36784)
            int ui:nodegraph:node:stackingOrder = 2126
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/Rotate/Cos.outputs:out>
            float inputs:in2.connect = </Root/Rotate/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-79.50441, 79.200294)
            int ui:nodegraph:node:stackingOrder = 2124
        }

        def Shader "Combine2_2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/Rotate/Sin.outputs:out>
            float inputs:in2.connect = </Root/Rotate/Cos.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-46.079548, 162.10396)
            int ui:nodegraph:node:stackingOrder = 2130
        }
    }

    def NodeGraph "Spherize" (
        active = true
    )
    {
        float2 inputs:Center = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-719.08356, 48.940907)
                    int stackingOrderInSubgraph = 2083
                }
            }
        )
        float2 inputs:Offset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-200.43156, 117.50646)
                    int stackingOrderInSubgraph = 2087
                }
            }
        )
        float2 inputs:Strength = (10, 10) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-250.82455, -134.9484)
                    int stackingOrderInSubgraph = 2067
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-932.3616, -45.376945)
                    int stackingOrderInSubgraph = 2052
                }
            }
        )
        float2 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-460, 65.5)
                    int stackingOrderInSubgraph = 2033
                }
            }
        )
        float2 outputs:Out.connect = </Root/Spherize/Add_1.outputs:out>
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Out"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (241.38972, 78.745705)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2061

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/Spherize.inputs:UV>
            float2 ui:nodegraph:node:pos = (-729.69653, -62.28566)
            int ui:nodegraph:node:stackingOrder = 2050
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/Spherize/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/Spherize.inputs:Center>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-533.878, -41.580894)
            int ui:nodegraph:node:stackingOrder = 2079
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector2"
            float2 inputs:in1.connect = </Root/Spherize/Subtract.outputs:out>
            float2 inputs:in2.connect = </Root/Spherize/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-379.08035, -70.69061)
            int ui:nodegraph:node:stackingOrder = 2081
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Spherize/DotProduct.outputs:out>
            float inputs:in2.connect = </Root/Spherize/DotProduct.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-220.0063, -49.981777)
            int ui:nodegraph:node:stackingOrder = 2062
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/Spherize.inputs:Strength>
            prepend float inputs:in2.connect = </Root/Spherize/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-109.71002, -47.010593)
            int ui:nodegraph:node:stackingOrder = 2065
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/Spherize/Multiply_1.outputs:out>
            float2 inputs:in2.connect = </Root/Spherize/Subtract.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-45.975704, 47.883713)
            int ui:nodegraph:node:stackingOrder = 2070
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/Spherize/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/Spherize.inputs:Offset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-41.80392, 105.54899)
            int ui:nodegraph:node:stackingOrder = 2077
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/Spherize/Multiply_2.outputs:out>
            float2 inputs:in2.connect = </Root/Spherize/Add.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (87.676346, 82.05982)
            int ui:nodegraph:node:stackingOrder = 2088
        }
    }

    def NodeGraph "TilingAndOffset" (
        active = true
    )
    {
        float2 inputs:Offset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-342.61145, 141.84949)
                    int stackingOrderInSubgraph = 2049
                }
            }
        )
        float2 inputs:Tiling = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-547.97284, 113.28711)
                    int stackingOrderInSubgraph = 2046
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-850.7864, 25.024834)
                    int stackingOrderInSubgraph = 2043
                }
            }
        )
        float2 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-453, 88.5)
                    int stackingOrderInSubgraph = 2033
                }
            }
        )
        float2 outputs:Out.connect = </Root/TilingAndOffset/Add.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/TilingAndOffset.inputs:UV>
            float2 ui:nodegraph:node:pos = (-636.6439, 2.4760132)
            int ui:nodegraph:node:stackingOrder = 2044
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/TilingAndOffset/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/TilingAndOffset.inputs:Tiling>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-385.4264, 42.96216)
            int ui:nodegraph:node:stackingOrder = 2047
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/TilingAndOffset/Multiply.outputs:out>
            float2 inputs:in2.connect = </Root/TilingAndOffset.inputs:Offset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-198.9834, 54.523804)
            int ui:nodegraph:node:stackingOrder = 2050
        }
    }

    def NodeGraph "Twirl" (
        active = true
    )
    {
        float2 inputs:Center = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-554.3662, 193.19702)
                    int stackingOrderInSubgraph = 2158
                }
            }
        )
        float2 inputs:Offset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (265.1618, 245.21173)
                    int stackingOrderInSubgraph = 2183
                }
            }
        )
        float inputs:Strength = 10 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-282.2708, -38.83435)
                    int stackingOrderInSubgraph = 2065
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-797.8099, 28.46167)
                    int stackingOrderInSubgraph = 2046
                }
            }
        )
        float2 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 2033
                }
            }
        )
        float2 outputs:Out.connect = </Root/Twirl/Add_1.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (680.64417, 76.78351)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2149

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/Twirl.inputs:UV>
            float2 ui:nodegraph:node:pos = (-574.71936, -13.388336)
            int ui:nodegraph:node:stackingOrder = 2043
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/Twirl/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:in2.connect = </Root/Twirl.inputs:Center>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-404.45117, 65.91791)
            int ui:nodegraph:node:stackingOrder = 2062
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/Twirl/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-269.68896, 30.536682)
            int ui:nodegraph:node:stackingOrder = 2057
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/Twirl/Subtract.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-22.715454, 145.69147)
            int ui:nodegraph:node:stackingOrder = 2089
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Twirl.inputs:Strength>
            prepend float inputs:in2.connect = </Root/Twirl/Magnitude.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-129.4538, 16.506714)
            int ui:nodegraph:node:stackingOrder = 2060
        }

        def Shader "Sin"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/Twirl/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-20.80542, -12.18927)
            int ui:nodegraph:node:stackingOrder = 2066
        }

        def Shader "Cos"
        {
            uniform token info:id = "ND_cos_float"
            float inputs:in.connect = </Root/Twirl/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-21.03711, 43.585632)
            int ui:nodegraph:node:stackingOrder = 2069
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Twirl/Cos.outputs:out>
            float inputs:in2.connect = </Root/Twirl/Separate2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (162.02081, -25.753845)
            int ui:nodegraph:node:stackingOrder = 2143
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Twirl/Sin.outputs:out>
            float inputs:in2.connect = </Root/Twirl/Separate2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (161.9624, 100.85205)
            int ui:nodegraph:node:stackingOrder = 2138
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Twirl/Sin.outputs:out>
            float inputs:in2.connect = </Root/Twirl/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (159.14246, 27.882568)
            int ui:nodegraph:node:stackingOrder = 2145
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Twirl/Cos.outputs:out>
            float inputs:in2.connect = </Root/Twirl/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (154.54285, 145.85864)
            int ui:nodegraph:node:stackingOrder = 2129
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/Twirl/Multiply_1.outputs:out>
            float inputs:in2.connect = </Root/Twirl/Multiply_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (261.99402, 19.663635)
            int ui:nodegraph:node:stackingOrder = 2171
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Twirl/Multiply_2.outputs:out>
            float inputs:in2.connect = </Root/Twirl/Multiply_4.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (267.35596, 106.32123)
            int ui:nodegraph:node:stackingOrder = 2174
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/Twirl/Combine2.outputs:out>
            float2 inputs:in2.connect = </Root/Twirl/Add_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (552.78186, 109.25531)
            int ui:nodegraph:node:stackingOrder = 2154
        }

        def Shader "Add_2"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/Twirl.inputs:Center>
            float2 inputs:in2.connect = </Root/Twirl.inputs:Offset>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (438.03064, 212.96924)
            int ui:nodegraph:node:stackingOrder = 2181
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/Twirl/Subtract_1.outputs:out>
            float inputs:in2.connect = </Root/Twirl/Add.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (404.63306, 57.966614)
            int ui:nodegraph:node:stackingOrder = 2178
        }
    }

    def NodeGraph "Ellipse" (
        active = true
    )
    {
        float inputs:Height = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1062.4619, 121.99969)
                    int stackingOrderInSubgraph = 2045
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1070.4077, -39.07046)
                    int stackingOrderInSubgraph = 2050
                }
            }
        )
        float inputs:Width = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1064.8783, 49.16407)
                    int stackingOrderInSubgraph = 2040
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-496.0086, 71.54173)
                    int stackingOrderInSubgraph = 2033
                }
            }
        )
        float outputs:Out.connect = </Root/Ellipse/Clamp.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (254.15955, 79.29383)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2161

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/Ellipse.inputs:UV>
            float2 ui:nodegraph:node:pos = (-871.35394, -53.281673)
            int ui:nodegraph:node:stackingOrder = 2054
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/Ellipse.inputs:Width>
            float inputs:in2.connect = </Root/Ellipse.inputs:Height>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-895.5859, 87.16483)
            int ui:nodegraph:node:stackingOrder = 2048
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/Ellipse/InputTextureCoordinate_1.outputs:Add_out>
            float inputs:in2 = 2
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-705.4987, -8.063786)
            int ui:nodegraph:node:stackingOrder = 2063
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2FA"
            prepend float2 inputs:in1.connect = </Root/Ellipse/Multiply.outputs:out>
            float inputs:in2 = 1
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-619.81396, -0.9578143)
            int ui:nodegraph:node:stackingOrder = 2065
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/Ellipse/Subtract.outputs:out>
            float2 inputs:in2.connect = </Root/Ellipse/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-544.7942, 27.206928)
            int ui:nodegraph:node:stackingOrder = 2086
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/Ellipse/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-423.7278, 28.118067)
            int ui:nodegraph:node:stackingOrder = 2144
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/Ellipse/Magnitude.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-189.1864, -6.1953144)
            int ui:nodegraph:node:stackingOrder = 2168
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/Ellipse/Divide_1.outputs:out>
            float inputs:low
            float outputs:out
            float2 ui:nodegraph:node:pos = (72.75043, 46.206093)
            int ui:nodegraph:node:stackingOrder = 2163
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/Ellipse/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/Ellipse/MTLFwidth.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-47.72084, 45.98232)
            int ui:nodegraph:node:stackingOrder = 2170
        }

        def Shader "MTLFwidth"
        {
            uniform token info:id = "ND_MTL_fwidth_float"
            float inputs:p.connect = </Root/Ellipse/Magnitude.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-216.41234, 106.362465)
            int ui:nodegraph:node:stackingOrder = 2159
        }
    }

    def NodeGraph "Polygon" (
        active = true
    )
    {
        float inputs:Height = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1030.2921, 195.47787)
                    int stackingOrderInSubgraph = 2398
                }
            }
        )
        float inputs:Sides = 6 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1037.457, 328.48547)
                    int stackingOrderInSubgraph = 2355
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-989.5828, -22.988525)
                    int stackingOrderInSubgraph = 2037
                }
            }
        )
        float inputs:Width = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1030.8188, 123.22763)
                    int stackingOrderInSubgraph = 2398
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-442, 86.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/Polygon/Clamp.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1453.8766, 80.287254)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2272

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/Polygon.inputs:UV>
            float2 ui:nodegraph:node:pos = (-771.9491, -27.933685)
            int ui:nodegraph:node:stackingOrder = 2034
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 3.1415927
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1027.3129, 255.3404)
            int ui:nodegraph:node:stackingOrder = 2362
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/Polygon/ConstantFloat.outputs:out>
            float inputs:in2.connect = </Root/Polygon.inputs:Sides>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-869.504, 300.94846)
            int ui:nodegraph:node:stackingOrder = 2357
        }

        def Shader "Cos"
        {
            uniform token info:id = "ND_cos_float"
            float inputs:in.connect = </Root/Polygon/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-760.59454, 259.40598)
            int ui:nodegraph:node:stackingOrder = 2431
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Polygon/Cos.outputs:out>
            float inputs:in2.connect = </Root/Polygon.inputs:Width>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-632.52264, 104.47828)
            int ui:nodegraph:node:stackingOrder = 2429
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Polygon/Cos.outputs:out>
            float inputs:in2.connect = </Root/Polygon.inputs:Height>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-634.40375, 183.30219)
            int ui:nodegraph:node:stackingOrder = 2429
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/Polygon/Multiply.outputs:out>
            float inputs:in2.connect = </Root/Polygon/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-506.1806, 136.46338)
            int ui:nodegraph:node:stackingOrder = 2429
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/Polygon/InputTextureCoordinate_1.outputs:Add_out>
            float inputs:in2 = 2
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-574.1244, 13.9904785)
            int ui:nodegraph:node:stackingOrder = 2086
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2FA"
            prepend float2 inputs:in1.connect = </Root/Polygon/Multiply_2.outputs:out>
            float inputs:in2 = 1
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-492.80133, 27.779968)
            int ui:nodegraph:node:stackingOrder = 2090
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/Polygon/Subtract.outputs:out>
            float2 inputs:in2.connect = </Root/Polygon/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-305.65546, 31.429138)
            int ui:nodegraph:node:stackingOrder = 2213
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/Polygon/Divide_1.outputs:out>
            float2 inputs:in2 = (1, -1)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-208.57666, 34.041138)
            int ui:nodegraph:node:stackingOrder = 2211
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/Polygon/Multiply_3.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-55.96057, 43.42285)
            int ui:nodegraph:node:stackingOrder = 2211
        }

        def Shader "Atan2"
        {
            uniform token info:id = "ND_atan2_float"
            float inputs:inx.connect = </Root/Polygon/Separate2.outputs:outy>
            float inputs:iny.connect = </Root/Polygon/Separate2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (67.97716, 35.23871)
            int ui:nodegraph:node:stackingOrder = 2285
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Polygon/Divide.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-647.3744, 324.03912)
            int ui:nodegraph:node:stackingOrder = 2359
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/Polygon/Multiply_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (81.7399, -75.691666)
            int ui:nodegraph:node:stackingOrder = 2268
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/Polygon/Atan2.outputs:out>
            float inputs:in2.connect = </Root/Polygon/Multiply_4.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (261.19403, 39.08219)
            int ui:nodegraph:node:stackingOrder = 2287
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Polygon/Divide_2.outputs:out>
            float inputs:in2 = 0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (328.45602, 37.804375)
            int ui:nodegraph:node:stackingOrder = 2281
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_float"
            float inputs:in.connect = </Root/Polygon/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (430.85925, 39.872307)
            int ui:nodegraph:node:stackingOrder = 2283
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Polygon/Floor.outputs:out>
            float inputs:in2.connect = </Root/Polygon/Multiply_4.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (538.4341, 83.02356)
            int ui:nodegraph:node:stackingOrder = 2254
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/Polygon/Multiply_5.outputs:out>
            float inputs:in2.connect = </Root/Polygon/Atan2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (596.0609, 136.82117)
            int ui:nodegraph:node:stackingOrder = 2279
        }

        def Shader "Cos_1"
        {
            uniform token info:id = "ND_cos_float"
            float inputs:in.connect = </Root/Polygon/Subtract_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (708.28625, 130.54504)
            int ui:nodegraph:node:stackingOrder = 2277
        }

        def Shader "Multiply_6"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Polygon/Magnitude.outputs:out>
            float inputs:in2.connect = </Root/Polygon/Cos_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (813.11487, -65.46847)
            int ui:nodegraph:node:stackingOrder = 2269
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/Polygon/Multiply_6.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (921.0126, -66.78603)
            int ui:nodegraph:node:stackingOrder = 2270
        }

        def Shader "Divide_3"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/Polygon/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/Polygon/MTLFwidth.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1108.6626, -50.03345)
            int ui:nodegraph:node:stackingOrder = 2271
        }

        def Shader "MTLFwidth"
        {
            uniform token info:id = "ND_MTL_fwidth_float"
            float inputs:p.connect = </Root/Polygon/Cos_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (926.0809, 146.32817)
            int ui:nodegraph:node:stackingOrder = 2275
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/Polygon/Divide_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1254.5646, -44.238518)
            int ui:nodegraph:node:stackingOrder = 2432
        }
    }

    def NodeGraph "Rectangle" (
        active = true
    )
    {
        float inputs:Height = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-681.8109, 247.53558)
                    int stackingOrderInSubgraph = 2087
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-900.9812, 53.943726)
                    int stackingOrderInSubgraph = 2037
                }
            }
        )
        float inputs:Width = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-688.3235, 183.83484)
                    int stackingOrderInSubgraph = 2087
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-377, 112.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/Rectangle/Clamp.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (851.8982, 118.034)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2132

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/Rectangle.inputs:UV>
            float2 ui:nodegraph:node:pos = (-686.2866, 28.804962)
            int ui:nodegraph:node:stackingOrder = 2034
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/Rectangle.inputs:Width>
            float inputs:in2.connect = </Root/Rectangle.inputs:Height>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-495.07928, 187.68872)
            int ui:nodegraph:node:stackingOrder = 2102
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/Rectangle/InputTextureCoordinate_1.outputs:Add_out>
            float inputs:in2 = 2
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-520.0555, 77.235535)
            int ui:nodegraph:node:stackingOrder = 2094
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2FA"
            prepend float2 inputs:in1.connect = </Root/Rectangle/Multiply.outputs:out>
            float inputs:in2 = 1
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-430.19348, 87.6012)
            int ui:nodegraph:node:stackingOrder = 2098
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_vector2"
            float2 inputs:in.connect = </Root/Rectangle/Subtract.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-321.38123, 87.151)
            int ui:nodegraph:node:stackingOrder = 2105
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/Rectangle/Abs.outputs:out>
            float2 inputs:in2.connect = </Root/Rectangle/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-217.30066, 101.71997)
            int ui:nodegraph:node:stackingOrder = 2109
        }

        def Shader "MTLFwidth"
        {
            uniform token info:id = "ND_MTL_fwidth_vector2"
            float2 inputs:p.connect = </Root/Rectangle/Subtract_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-42.648193, 174.15015)
            int ui:nodegraph:node:stackingOrder = 2112
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/Rectangle/Subtract_1.outputs:out>
            float2 inputs:in2.connect = </Root/Rectangle/MTLFwidth.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (139.48749, 81.05817)
            int ui:nodegraph:node:stackingOrder = 2115
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_vector2"
            float2 inputs:in.connect = </Root/Rectangle/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (231.45337, 87.31714)
            int ui:nodegraph:node:stackingOrder = 2118
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/Rectangle/Oneminus.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (388.97833, 83.59003)
            int ui:nodegraph:node:stackingOrder = 2123
        }

        def Shader "Min"
        {
            uniform token info:id = "ND_min_float"
            float inputs:in1.connect = </Root/Rectangle/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/Rectangle/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (561.5309, 82.38373)
            int ui:nodegraph:node:stackingOrder = 2126
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/Rectangle/Min.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (710.6399, 89.66791)
            int ui:nodegraph:node:stackingOrder = 2129
        }
    }

    def NodeGraph "RoundedRectangle" (
        active = true
    )
    {
        float inputs:Height = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-952.7201, 387.77454)
                    int stackingOrderInSubgraph = 2134
                }
            }
        )
        float inputs:Radius = 0.1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-954.88074, 194.72931)
                    int stackingOrderInSubgraph = 2172
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1107.3013, 19.361938)
                    int stackingOrderInSubgraph = 2037
                }
            }
        )
        float inputs:Width = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-951.2977, 329.3858)
                    int stackingOrderInSubgraph = 2134
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/RoundedRectangle/Clamp.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (934.8567, 204.20819)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2234

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/RoundedRectangle.inputs:UV>
            float2 ui:nodegraph:node:pos = (-901.8258, 1.5718079)
            int ui:nodegraph:node:stackingOrder = 2034
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/RoundedRectangle/InputTextureCoordinate_1.outputs:Add_out>
            float inputs:in2 = 2
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-729.0364, 40.95099)
            int ui:nodegraph:node:stackingOrder = 2064
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2FA"
            prepend float2 inputs:in1.connect = </Root/RoundedRectangle/Multiply.outputs:out>
            float inputs:in2 = 1
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-654.7236, 49.60608)
            int ui:nodegraph:node:stackingOrder = 2070
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_vector2"
            float2 inputs:in.connect = </Root/RoundedRectangle/Subtract.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-535.1577, 48.465332)
            int ui:nodegraph:node:stackingOrder = 2071
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/RoundedRectangle.inputs:Width>
            float inputs:in2.connect = </Root/RoundedRectangle.inputs:Height>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-585.8361, 425.4452)
            int ui:nodegraph:node:stackingOrder = 2175
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedRectangle.inputs:Radius>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-815.9441, 152.45312)
            int ui:nodegraph:node:stackingOrder = 2169
        }

        def Shader "Abs_1"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/RoundedRectangle/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-715.647, 158.62543)
            int ui:nodegraph:node:stackingOrder = 2181
        }

        def Shader "Abs_2"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/RoundedRectangle.inputs:Width>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-745.31055, 264.27948)
            int ui:nodegraph:node:stackingOrder = 2188
        }

        def Shader "Abs_3"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/RoundedRectangle.inputs:Height>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-742.81885, 331.6831)
            int ui:nodegraph:node:stackingOrder = 2190
        }

        def Shader "MTLMin3"
        {
            uniform token info:id = "ND_MTL_min3_float"
            float inputs:x.connect = </Root/RoundedRectangle/Abs_1.outputs:out>
            float inputs:y.connect = </Root/RoundedRectangle/Abs_2.outputs:out>
            float inputs:z.connect = </Root/RoundedRectangle/Abs_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-548.3596, 238.06421)
            int ui:nodegraph:node:stackingOrder = 2185
        }

        def Shader "Max"
        {
            uniform token info:id = "ND_max_float"
            float inputs:in1.connect = </Root/RoundedRectangle/MTLMin3.outputs:out>
            float inputs:in2 = 0.00005
            float outputs:out
            float2 ui:nodegraph:node:pos = (-393.6681, 280.79346)
            int ui:nodegraph:node:stackingOrder = 2219
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2FA"
            prepend float2 inputs:in1.connect = </Root/RoundedRectangle/Abs.outputs:out>
            float inputs:in2.connect = </Root/RoundedRectangle/Max.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-298.2412, 132.47607)
            int ui:nodegraph:node:stackingOrder = 2207
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/RoundedRectangle/Add.outputs:out>
            float2 inputs:in2.connect = </Root/RoundedRectangle/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-196.35388, 229.75598)
            int ui:nodegraph:node:stackingOrder = 2208
        }

        def Shader "Max_1"
        {
            uniform token info:id = "ND_max_vector2"
            float2 inputs:in1.connect = </Root/RoundedRectangle/Subtract_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-77.78943, 212.60083)
            int ui:nodegraph:node:stackingOrder = 2224
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/RoundedRectangle/Max_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (82.74591, 198.9776)
            int ui:nodegraph:node:stackingOrder = 2222
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/RoundedRectangle/Magnitude.outputs:out>
            float inputs:in2.connect = </Root/RoundedRectangle/Max.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (228.53333, 241.42169)
            int ui:nodegraph:node:stackingOrder = 2226
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/RoundedRectangle/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (349.8935, 174.94891)
            int ui:nodegraph:node:stackingOrder = 2229
        }

        def Shader "MTLFwidth"
        {
            uniform token info:id = "ND_MTL_fwidth_float"
            float inputs:p.connect = </Root/RoundedRectangle/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (411.36536, 298.01154)
            int ui:nodegraph:node:stackingOrder = 2232
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/RoundedRectangle/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/RoundedRectangle/MTLFwidth.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (637.2157, 194.61096)
            int ui:nodegraph:node:stackingOrder = 2233
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/RoundedRectangle/Divide_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (739.7405, 192.90576)
            int ui:nodegraph:node:stackingOrder = 2234
        }
    }

    def NodeGraph "Checkerboard" (
        active = true
    )
    {
        float3 inputs:ColorA = (0.1, 0.1, 0.1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (224.9788, -69.57631)
                    int stackingOrderInSubgraph = 2379
                }
            }
        )
        float3 inputs:CorlorB = (0.7, 0.7, 0.7) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (202.36507, 23.691378)
                    int stackingOrderInSubgraph = 2400
                }
            }
        )
        float2 inputs:Frequency = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1234.6124, 157.49957)
                    int stackingOrderInSubgraph = 2137
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1483.2256, 4.439636)
                    int stackingOrderInSubgraph = 2137
                }
            }
        )
        float3 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-510, 56.5)
                    int stackingOrderInSubgraph = 2033
                }
            }
        )
        float3 outputs:Out.connect = </Root/Checkerboard/Mix.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (800.3938, 179.66516)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2207

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/Checkerboard.inputs:UV>
            float2 ui:nodegraph:node:pos = (-1274.9988, -22.450043)
            int ui:nodegraph:node:stackingOrder = 2137
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_vector3"
            float3 inputs:bg.connect = </Root/Checkerboard.inputs:CorlorB>
            float3 inputs:fg.connect = </Root/Checkerboard.inputs:ColorA>
            float inputs:mix.connect = </Root/Checkerboard/Modulo.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (556.4147, 155.49132)
            int ui:nodegraph:node:stackingOrder = 2376
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/Checkerboard/Add.outputs:out>
            float2 inputs:in2.connect = </Root/Checkerboard.inputs:Frequency>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1039.2319, 52.5401)
            int ui:nodegraph:node:stackingOrder = 2137
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2FA"
            prepend float2 inputs:in1.connect = </Root/Checkerboard/InputTextureCoordinate_1.outputs:Add_out>
            float inputs:in2 = 0.5
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1118.0002, 26.837952)
            int ui:nodegraph:node:stackingOrder = 2305
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/Checkerboard/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-866.2532, 63.79295)
            int ui:nodegraph:node:stackingOrder = 2407
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/Checkerboard/Floor.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-681.9083, 63.54936)
            int ui:nodegraph:node:stackingOrder = 2407
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Checkerboard/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/Checkerboard/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-529.9094, 67.03579)
            int ui:nodegraph:node:stackingOrder = 2411
        }

        def Shader "Modulo"
        {
            uniform token info:id = "ND_modulo_float"
            float inputs:in1.connect = </Root/Checkerboard/Add_1.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-422.5285, 70.96955)
            int ui:nodegraph:node:stackingOrder = 2407
        }
    }

    def NodeGraph "RoundedPolygon" (
        active = true
    )
    {
        float inputs:Height = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2500.7402, 627.4635)
                    int stackingOrderInSubgraph = 2865
                }
            }
        )
        float inputs:Roundness = 0.3 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2400.4707, -75.68956)
                    int stackingOrderInSubgraph = 3256
                }
            }
        )
        float inputs:Sides = 5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2403.871, -373.57544)
                    int stackingOrderInSubgraph = 2503
                }
            }
        )
        float2 inputs:UV = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2473.4414, 283.82535)
                    int stackingOrderInSubgraph = 2865
                }
            }
        )
        float inputs:Width = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2498.583, 419.12497)
                    int stackingOrderInSubgraph = 2865
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-779, 36.5)
                    int stackingOrderInSubgraph = 2033
                }
            }
        )
        float outputs:Out.connect = </Root/RoundedPolygon/Clamp_1.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2401.9697, 134.91118)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2524

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/RoundedPolygon.inputs:UV>
            float2 ui:nodegraph:node:pos = (-2224.3005, 248.49072)
            int ui:nodegraph:node:stackingOrder = 3203
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/RoundedPolygon/InputTextureCoordinate_1.outputs:Add_out>
            float inputs:in2 = 2
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-2049.6182, 298.52948)
            int ui:nodegraph:node:stackingOrder = 3205
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2FA"
            prepend float2 inputs:in1.connect = </Root/RoundedPolygon/Multiply.outputs:out>
            float inputs:in2 = 1
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1946.8779, 300.29147)
            int ui:nodegraph:node:stackingOrder = 2865
        }

        def Shader "IfEqual"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1.connect = </Root/RoundedPolygon/epsilon.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon.inputs:Width>
            float inputs:value1.connect = </Root/RoundedPolygon.inputs:Width>
            float inputs:value2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2213.2476, 435.98572)
            int ui:nodegraph:node:stackingOrder = 2865
        }

        def Shader "IfEqual_1"
        {
            uniform token info:id = "ND_ifequal_float"
            float inputs:in1.connect = </Root/RoundedPolygon/epsilon.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon.inputs:Height>
            float inputs:value1.connect = </Root/RoundedPolygon.inputs:Height>
            float inputs:value2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2210.483, 583.04565)
            int ui:nodegraph:node:stackingOrder = 2865
        }

        def Shader "epsilon"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0.000001
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2478.276, 172.75357)
            int ui:nodegraph:node:stackingOrder = 3201
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/RoundedPolygon.inputs:Roundness>
            float inputs:low.connect = </Root/RoundedPolygon/epsilon.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1980.1194, -72.74332)
            int ui:nodegraph:node:stackingOrder = 3254
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/RoundedPolygon.inputs:Sides>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2262.9734, -370.22394)
            int ui:nodegraph:node:stackingOrder = 2503
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_float"
            float inputs:in.connect = </Root/RoundedPolygon/Abs.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2100.8374, -366.2031)
            int ui:nodegraph:node:stackingOrder = 2531
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/RoundedPolygon/IfEqual.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/IfEqual_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1989.525, 492.8046)
            int ui:nodegraph:node:stackingOrder = 2865
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/RoundedPolygon/Subtract.outputs:out>
            float2 inputs:in2.connect = </Root/RoundedPolygon/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1844.9863, 384.02576)
            int ui:nodegraph:node:stackingOrder = 2865
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "i_sides"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Floor"]
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/RoundedPolygon/pi.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Floor.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1813.3943, -382.53455)
            int ui:nodegraph:node:stackingOrder = 2533
        }

        def Shader "pi"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 3.1415927
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2197.4812, -512.4595)
            int ui:nodegraph:node:stackingOrder = 2503
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedPolygon/halfAngle1.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-867.0969, 474.9806)
            int ui:nodegraph:node:stackingOrder = 3391
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "halfAngle"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Divide_1"]
        }

        def Shader "Cos"
        {
            uniform token info:id = "ND_cos_float"
            float inputs:in.connect = </Root/RoundedPolygon/Divide_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1555.6255, -546.74695)
            int ui:nodegraph:node:stackingOrder = 3332
        }

        def Shader "Divide_3"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/RoundedPolygon/Cos.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1356.2833, -533.1521)
            int ui:nodegraph:node:stackingOrder = 3375
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedPolygon/halfAngle.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1300.0198, -31.046497)
            int ui:nodegraph:node:stackingOrder = 3381
        }

        def Shader "Subtract_2"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/RoundedPolygon/halfAngle.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Multiply_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1132.7661, -140.1844)
            int ui:nodegraph:node:stackingOrder = 3379
        }

        def Scope "Group3" (
            kind = "group"
        )
        {
            string ui:group:annotation = "remainingAngle"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Subtract_2"]
        }

        def Shader "Tan"
        {
            uniform token info:id = "ND_tan_float"
            float inputs:in.connect = </Root/RoundedPolygon/Subtract_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1037.2853, -348.21857)
            int ui:nodegraph:node:stackingOrder = 3365
        }

        def Shader "Tan_1"
        {
            uniform token info:id = "ND_tan_float"
            float inputs:in.connect = </Root/RoundedPolygon/Divide_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1580.5961, -369.84875)
            int ui:nodegraph:node:stackingOrder = 3336
        }

        def Shader "Divide_4"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Tan.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Tan_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-864.4183, -423.5756)
            int ui:nodegraph:node:stackingOrder = 3363
        }

        def Shader "Sin"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/RoundedPolygon/Divide_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1556.9065, -476.6496)
            int ui:nodegraph:node:stackingOrder = 3334
        }

        def Shader "Combine2_2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/RoundedPolygon/Cos.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Sin.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1286.1967, -616.62036)
            int ui:nodegraph:node:stackingOrder = 3373
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/RoundedPolygon/Combine2_2.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Divide_3.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-927.7487, -515.1436)
            int ui:nodegraph:node:stackingOrder = 3226
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/RoundedPolygon/Multiply_3.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Divide_4.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-754.5641, -482.23245)
            int ui:nodegraph:node:stackingOrder = 3265
        }

        def Scope "Group4" (
            kind = "group"
        )
        {
            string ui:group:annotation = "chamferCenter"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_4"]
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/RoundedPolygon/Divide.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Divide_3.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1416.1663, 364.3606)
            int ui:nodegraph:node:stackingOrder = 3319
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/RoundedPolygon/Multiply_5.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-1244.4406, 393.6213)
            int ui:nodegraph:node:stackingOrder = 3321
        }

        def Shader "Atan2"
        {
            uniform token info:id = "ND_atan2_float"
            float inputs:inx.connect = </Root/RoundedPolygon/Separate2.outputs:outx>
            float inputs:iny.connect = </Root/RoundedPolygon/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1043.4375, 393.02988)
            int ui:nodegraph:node:stackingOrder = 3160
        }

        def Shader "Magnitude_1"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/RoundedPolygon/Multiply_5.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1028.1686, 186.56367)
            int ui:nodegraph:node:stackingOrder = 3353
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Multiply_6.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Atan2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-923.0239, 378.45737)
            int ui:nodegraph:node:stackingOrder = 3385
        }

        def Shader "pi_1"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 3.1415927
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1166.4296, 315.379)
            int ui:nodegraph:node:stackingOrder = 3351
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Multiply_6"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedPolygon/pi_1.outputs:out>
            float inputs:in2 = 2.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1027.216, 318.13004)
            int ui:nodegraph:node:stackingOrder = 3383
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Add.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/halfAngle1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-827.95416, 387.06198)
            int ui:nodegraph:node:stackingOrder = 3387
        }

        def Shader "MTLFmod"
        {
            uniform token info:id = "ND_MTL_fmod_float"
            float inputs:x.connect = </Root/RoundedPolygon/Add_1.outputs:out>
            float inputs:y.connect = </Root/RoundedPolygon/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-698.67554, 389.92477)
            int ui:nodegraph:node:stackingOrder = 3389
        }

        def Shader "Subtract_3"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/RoundedPolygon/MTLFmod.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/halfAngle1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-571.81824, 462.43488)
            int ui:nodegraph:node:stackingOrder = 3417
        }

        def Shader "Abs_1"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/RoundedPolygon/Subtract_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-437.3605, 440.90466)
            int ui:nodegraph:node:stackingOrder = 3417
        }

        def Shader "Cos_1"
        {
            uniform token info:id = "ND_cos_float"
            float inputs:in.connect = </Root/RoundedPolygon/Abs_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (21.270597, 318.14462)
            int ui:nodegraph:node:stackingOrder = 3425
        }

        def Scope "Group5" (
            kind = "group"
        )
        {
            string ui:group:annotation = "polaruv.x"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Abs_1"]
        }

        def Shader "Subtract_4"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Abs_1.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Subtract_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-370.2363, 1.8632963)
            int ui:nodegraph:node:stackingOrder = 2930
        }

        def Shader "Divide_5"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Subtract_4.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Multiply_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-339.93008, -193.0516)
            int ui:nodegraph:node:stackingOrder = 3106
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/RoundedPolygon/Divide_5.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-238.29285, -242.88316)
            int ui:nodegraph:node:stackingOrder = 3104
        }

        def Shader "Magnitude_2"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/RoundedPolygon/Multiply_4.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-453.45892, -630.5803)
            int ui:nodegraph:node:stackingOrder = 3272
        }

        def Shader "Separate2_1"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/RoundedPolygon/Multiply_4.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-470.72824, -492.03674)
            int ui:nodegraph:node:stackingOrder = 3279
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/RoundedPolygon/Separate2_1.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-291.00305, -503.21442)
            int ui:nodegraph:node:stackingOrder = 3276
        }

        def Scope "Group6" (
            kind = "group"
        )
        {
            string ui:group:annotation = "distA"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Magnitude_2"]
        }

        def Scope "Group7" (
            kind = "group"
        )
        {
            string ui:group:annotation = "distB"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Oneminus_1"]
        }

        def Shader "Multiply_8"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Magnitude_2.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Magnitude_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (131.96007, -710.22565)
            int ui:nodegraph:node:stackingOrder = 3028
        }

        def Shader "Multiply_9"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Oneminus_1.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Oneminus_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (135.5997, -629.0498)
            int ui:nodegraph:node:stackingOrder = 3028
        }

        def Shader "Multiply_10"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Magnitude_2.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Oneminus_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (154.41386, -564.3042)
            int ui:nodegraph:node:stackingOrder = 3028
        }

        def Shader "Add_2"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Multiply_8.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Multiply_9.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (242.11143, -674.0084)
            int ui:nodegraph:node:stackingOrder = 3028
        }

        def Shader "Multiply_11"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Multiply_10.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (271.65833, -555.0884)
            int ui:nodegraph:node:stackingOrder = 3028
        }

        def Scope "Group8" (
            kind = "group"
        )
        {
            string ui:group:annotation = "angleRatio"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Oneminus"]
        }

        def Shader "Multiply_12"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedPolygon/halfAngle.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Oneminus.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-64.8346, -348.4957)
            int ui:nodegraph:node:stackingOrder = 3099
        }

        def Shader "Subtract_5"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/RoundedPolygon/pi.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Multiply_12.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (42.324196, -440.91464)
            int ui:nodegraph:node:stackingOrder = 3097
        }

        def Shader "Cos_2"
        {
            uniform token info:id = "ND_cos_float"
            float inputs:in.connect = </Root/RoundedPolygon/Subtract_5.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (220.13101, -479.71973)
            int ui:nodegraph:node:stackingOrder = 3095
        }

        def Shader "Multiply_13"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Multiply_11.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Cos_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (382.45157, -538.94885)
            int ui:nodegraph:node:stackingOrder = 3031
        }

        def Shader "Subtract_6"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Add_2.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Multiply_13.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (478.0818, -568.9269)
            int ui:nodegraph:node:stackingOrder = 2446
        }

        def Shader "Subtract_7"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/RoundedPolygon/halfAngle1.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/Abs_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-195.36589, 526.1291)
            int ui:nodegraph:node:stackingOrder = 3420
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 1
            float inputs:in2
            float inputs:value1.connect = </Root/RoundedPolygon/Multiply_2.outputs:out>
            float inputs:value2.connect = </Root/RoundedPolygon/Subtract_7.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (211.78621, 476.6724)
            int ui:nodegraph:node:stackingOrder = 3423
        }

        def Shader "SquareRoot"
        {
            uniform token info:id = "ND_sqrt_float"
            float inputs:in.connect = </Root/RoundedPolygon/Subtract_6.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (603.23193, -570.2665)
            int ui:nodegraph:node:stackingOrder = 3039
        }

        def Scope "Group9" (
            kind = "group"
        )
        {
            string ui:group:annotation = "distC"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:SquareRoot"]
        }

        def Scope "Group10" (
            kind = "group"
        )
        {
            string ui:group:annotation = "UV.x"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_7"]
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/RoundedPolygon/Multiply_7.outputs:out>
            float inputs:fg.connect = </Root/RoundedPolygon/Divide_6.outputs:out>
            float inputs:mix = 1
            float inputs:mix.connect = </Root/RoundedPolygon/IfGreater.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1540.6213, 92.04253)
            int ui:nodegraph:node:stackingOrder = 3328
        }

        def Shader "Divide_6"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Magnitude_1.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/SquareRoot.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1225.3168, -150.07085)
            int ui:nodegraph:node:stackingOrder = 2524
        }

        def Shader "Oneminus_2"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/RoundedPolygon/Mix.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1751.9626, -27.404177)
            int ui:nodegraph:node:stackingOrder = 2941
        }

        def Shader "MTLFwidth"
        {
            uniform token info:id = "ND_MTL_fwidth_float"
            float inputs:p.connect = </Root/RoundedPolygon/Mix.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1795.2847, 110.637344)
            int ui:nodegraph:node:stackingOrder = 2938
        }

        def Shader "Divide_7"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Oneminus_2.outputs:out>
            float inputs:in2.connect = </Root/RoundedPolygon/MTLFwidth.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (1996.7782, 98.845764)
            int ui:nodegraph:node:stackingOrder = 2935
        }

        def Shader "Clamp_1"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:in.connect = </Root/RoundedPolygon/Divide_7.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (2178.8787, 88.216095)
            int ui:nodegraph:node:stackingOrder = 2933
        }

        def Shader "halfAngle"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0
            float inputs:value.connect = </Root/RoundedPolygon/Divide_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1529.1243, -148.43094)
            int ui:nodegraph:node:stackingOrder = 3377
        }

        def Shader "halfAngle1"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0
            float inputs:value.connect = </Root/RoundedPolygon/Divide_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1650.8625, 625.0969)
            int ui:nodegraph:node:stackingOrder = 3208
        }

        def Shader "Multiply_7"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/RoundedPolygon/Magnitude_1.outputs:out>
            prepend float inputs:in2.connect = </Root/RoundedPolygon/Cos_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (250.52481, 276.14566)
            int ui:nodegraph:node:stackingOrder = 3427
        }

        def Scope "Group11" (
            kind = "group"
        )
        {
            string ui:group:annotation = "chamferAnle"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_2"]
        }
    }

    def NodeGraph "FresnelEffect" (
        active = true
    )
    {
        float3 inputs:Normal = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-657.0775, -95.97937)
                    int stackingOrderInSubgraph = 8
                }
            }
        )
        float inputs:Power = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-408.76923, 196.97339)
                    int stackingOrderInSubgraph = 6
                }
            }
        )
        float3 inputs:ViewDir = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-653.626, -9.321045)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-373, 70.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/FresnelEffect/Power.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (285.97192, 100.20935)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 16

        def Shader "Normalize"
        {
            uniform token info:id = "ND_normalize_vector3"
            float3 inputs:in.connect = </Root/FresnelEffect.inputs:Normal>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-473.15625, -82.27527)
            int ui:nodegraph:node:stackingOrder = 9
        }

        def Shader "Normalize_1"
        {
            uniform token info:id = "ND_normalize_vector3"
            float3 inputs:in.connect = </Root/FresnelEffect.inputs:ViewDir>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-471.46045, -9.801086)
            int ui:nodegraph:node:stackingOrder = 13
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/FresnelEffect/Normalize.outputs:out>
            float3 inputs:in2.connect = </Root/FresnelEffect/Normalize_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-271.914, -43.526184)
            int ui:nodegraph:node:stackingOrder = 11
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/FresnelEffect/DotProduct.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-100.63159, -42.151733)
            int ui:nodegraph:node:stackingOrder = 14
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/FresnelEffect/Clamp.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (12.346191, 12.348145)
            int ui:nodegraph:node:stackingOrder = 17
        }

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1.connect = </Root/FresnelEffect/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/FresnelEffect.inputs:Power>
            float outputs:out
            float2 ui:nodegraph:node:pos = (106.57666, 90.64667)
            int ui:nodegraph:node:stackingOrder = 20
        }
    }

    def NodeGraph "SphereMask" (
        active = true
    )
    {
        reorder nameChildren = ["MTLDistance", "Subtract", "Clamp", "Oneminus", "Divide", "Oneminus_1", "InputTextureCoordinate_1"]
        float2 inputs:Center = (0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-657.43207, 133.1087)
                    int stackingOrderInSubgraph = 32
                }
            }
        )
        float2 inputs:Coords = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-992.2456, 27.712019)
                    int stackingOrderInSubgraph = 2036
                }
            }
        )
        float inputs:Hardness = 0.8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-260.89215, 284.48132)
                    int stackingOrderInSubgraph = 17
                }
            }
        )
        float inputs:Radius = 0.1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-571, 236.0263)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-571, 70.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/SphereMask/Oneminus_1.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (229.71985, 113.82153)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 14

        def Shader "MTLDistance"
        {
            uniform token info:id = "ND_MTL_distance_vector2_float"
            float2 inputs:x.connect = </Root/SphereMask/InputTextureCoordinate_1.outputs:Add_out>
            float2 inputs:y.connect = </Root/SphereMask.inputs:Center>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-388.9873, 81.58942)
            int ui:nodegraph:node:stackingOrder = 11
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/SphereMask/MTLDistance.outputs:out>
            float inputs:in2.connect = </Root/SphereMask.inputs:Radius>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-237.3656, 126.898926)
            int ui:nodegraph:node:stackingOrder = 12
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_float"
            float inputs:high
            float inputs:in.connect = </Root/SphereMask/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-137.50879, 128.21008)
            int ui:nodegraph:node:stackingOrder = 13
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/SphereMask.inputs:Hardness>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-130.00232, 281.2832)
            int ui:nodegraph:node:stackingOrder = 27
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/SphereMask/Clamp.outputs:out>
            float inputs:in2.connect = </Root/SphereMask/Oneminus.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-16.046875, 216.00165)
            int ui:nodegraph:node:stackingOrder = 25
        }

        def Shader "Oneminus_1"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/SphereMask/Divide.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (93.174805, 216.80206)
            int ui:nodegraph:node:stackingOrder = 28
        }

        def "InputTextureCoordinate_1" (
            active = true
            instanceable = true
            references = </Root/InputTextureCoordinate>
        )
        {
            float2 inputs:TextureCoordinate.connect = </Root/SphereMask.inputs:Coords>
            float2 ui:nodegraph:node:pos = (-680.3057, -13.418228)
            int ui:nodegraph:node:stackingOrder = 2036
        }
    }

    def NodeGraph "NoiseSinWave" (
        active = true
    )
    {
        float inputs:In = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1201.9485, 16.197998)
                    int stackingOrderInSubgraph = 335
                }
            }
        )
        float2 inputs:MinMax = (-0.5, 0.5) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-447.2934, 3.7988281)
                    int stackingOrderInSubgraph = 213
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-276, 85.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/NoiseSinWave/Add_2.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (243.76636, -71.784)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 216

        def Shader "Sin"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/NoiseSinWave.inputs:In>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1012.4053, -26.787537)
            int ui:nodegraph:node:stackingOrder = 347
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/NoiseSinWave.inputs:In>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1072.7395, 60.40863)
            int ui:nodegraph:node:stackingOrder = 335
        }

        def Shader "Sin_1"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/NoiseSinWave/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-954.43744, 45.734253)
            int ui:nodegraph:node:stackingOrder = 335
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/NoiseSinWave/Sin.outputs:out>
            float inputs:in2.connect = </Root/NoiseSinWave/Sin_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-838.77527, 4.9243774)
            int ui:nodegraph:node:stackingOrder = 335
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/NoiseSinWave/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-271.987, 80.98193)
            int ui:nodegraph:node:stackingOrder = 343
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/NoiseSinWave/Subtract.outputs:out>
            float inputs:in2.connect = </Root/NoiseSinWave/Add_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-716.8441, 55.639954)
            int ui:nodegraph:node:stackingOrder = 335
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1 = 12.9898
            float inputs:in2 = 78.233
            float outputs:out
            float2 ui:nodegraph:node:pos = (-804.7566, 73.69226)
            int ui:nodegraph:node:stackingOrder = 335
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/NoiseSinWave/Sin_2.outputs:out>
            float inputs:in2 = 43758.547
            float outputs:out
            float2 ui:nodegraph:node:pos = (-458.2652, 97.36084)
            int ui:nodegraph:node:stackingOrder = 350
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_float"
            float inputs:bg.connect = </Root/NoiseSinWave/Separate2.outputs:outx>
            float inputs:fg.connect = </Root/NoiseSinWave/Separate2.outputs:outy>
            float inputs:mix.connect = </Root/NoiseSinWave/Fractional.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-28.216919, 26.07837)
            int ui:nodegraph:node:stackingOrder = 120
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/NoiseSinWave.inputs:MinMax>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-245.0393, 6.689331)
            int ui:nodegraph:node:stackingOrder = 213
        }

        def Shader "Add_2"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/NoiseSinWave/Sin.outputs:out>
            float inputs:in2.connect = </Root/NoiseSinWave/Mix.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (98.919556, -94.69702)
            int ui:nodegraph:node:stackingOrder = 124
        }

        def Shader "Sin_2"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/NoiseSinWave/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-590.41864, 63.840576)
            int ui:nodegraph:node:stackingOrder = 338
        }
    }

    def NodeGraph "SawtoothWave" (
        active = true
    )
    {
        float inputs:In = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-835.5226, 46.50952)
                    int stackingOrderInSubgraph = 13
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-424, 100.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/SawtoothWave/Multiply.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/SawtoothWave.inputs:In>
            float inputs:in2.connect = </Root/SawtoothWave/Floor.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-404.34186, 53.83722)
            int ui:nodegraph:node:stackingOrder = 8
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_float"
            float inputs:in.connect = </Root/SawtoothWave/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-535.45636, 81.417725)
            int ui:nodegraph:node:stackingOrder = 16
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/SawtoothWave.inputs:In>
            float inputs:in2 = 0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (-662.14496, 96.28851)
            int ui:nodegraph:node:stackingOrder = 14
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SawtoothWave/Subtract.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-267.31677, 52.260986)
            int ui:nodegraph:node:stackingOrder = 17
        }
    }

    def NodeGraph "SquareWave" (
        active = true
    )
    {
        float inputs:In = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-675.97675, -2.4569092)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-320, 90.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/SquareWave/Oneminus.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (130.85681, 85.069885)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 9

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_float"
            float inputs:in.connect = </Root/SquareWave.inputs:In>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-458.76215, -3.1932373)
            int ui:nodegraph:node:stackingOrder = 3
        }

        def Shader "Round"
        {
            uniform token info:id = "ND_round_float"
            float inputs:in.connect = </Root/SquareWave/Fractional.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-270.38293, 0.29632568)
            int ui:nodegraph:node:stackingOrder = 4
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/SquareWave/Round.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-150.82153, 14.898376)
            int ui:nodegraph:node:stackingOrder = 7
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/SquareWave/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-51.661255, 43.50421)
            int ui:nodegraph:node:stackingOrder = 8
        }
    }

    def NodeGraph "TriangleWave" (
        active = true
    )
    {
        float inputs:In = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-602.2166, 30.17627)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-370, 76.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float outputs:Out.connect = </Root/TriangleWave/Subtract_1.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (303.3871, 65.022156)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 14

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/TriangleWave.inputs:In>
            float inputs:in2.connect = </Root/TriangleWave/Floor.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-244.37885, 40.36145)
            int ui:nodegraph:node:stackingOrder = 12
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/TriangleWave.inputs:In>
            float inputs:in2 = 0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (-472.7077, 71.67285)
            int ui:nodegraph:node:stackingOrder = 7
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_float"
            float inputs:in.connect = </Root/TriangleWave/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-367.15198, 77.125305)
            int ui:nodegraph:node:stackingOrder = 8
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/TriangleWave/Subtract.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-140.15112, 47.3584)
            int ui:nodegraph:node:stackingOrder = 15
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/TriangleWave/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-23.748657, 47.87274)
            int ui:nodegraph:node:stackingOrder = 19
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/TriangleWave/Abs.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (107.369995, 68.597534)
            int ui:nodegraph:node:stackingOrder = 23
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/TriangleWave/Multiply_1.outputs:out>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (198.81958, 66.114624)
            int ui:nodegraph:node:stackingOrder = 24
        }
    }

    def NodeGraph "ChannelMixer" (
        active = true
    )
    {
        float3 inputs:ChannelMixer_Blue = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-525.0596, 105.39563)
                    int stackingOrderInSubgraph = 17
                }
            }
        )
        float3 inputs:ChannelMixer_Green = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-521.1035, 24.243652)
                    int stackingOrderInSubgraph = 12
                }
            }
        )
        float3 inputs:ChannelMixer_Red = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-522.72144, -43.92517)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float3 inputs:In = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-744.874, 170.11768)
                    int stackingOrderInSubgraph = 19
                }
            }
        )
        float3 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-337, 80.5)
                    int stackingOrderInSubgraph = 2
                }
            }
        )
        float3 outputs:Out.connect = </Root/ChannelMixer/Combine3.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (187.85547, 65.478516)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 17

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/ChannelMixer.inputs:ChannelMixer_Red>
            float3 inputs:in2.connect = </Root/ChannelMixer.inputs:In>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-312.1416, -35.07068)
            int ui:nodegraph:node:stackingOrder = 9
        }

        def Shader "DotProduct_1"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/ChannelMixer.inputs:ChannelMixer_Green>
            float3 inputs:in2.connect = </Root/ChannelMixer.inputs:In>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-309.23193, 50.499146)
            int ui:nodegraph:node:stackingOrder = 10
        }

        def Shader "DotProduct_2"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/ChannelMixer.inputs:ChannelMixer_Blue>
            float3 inputs:in2.connect = </Root/ChannelMixer.inputs:In>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-310.34106, 133.41223)
            int ui:nodegraph:node:stackingOrder = 15
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            prepend float inputs:in1.connect = </Root/ChannelMixer/DotProduct.outputs:out>
            prepend float inputs:in2.connect = </Root/ChannelMixer/DotProduct_1.outputs:out>
            prepend float inputs:in3.connect = </Root/ChannelMixer/DotProduct_2.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-56.526855, 66.34839)
            int ui:nodegraph:node:stackingOrder = 22
        }
    }

    def NodeGraph "Contrast" (
        active = true
    )
    {
        float inputs:Contrast = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-401.9187, 215.79102)
                    int stackingOrderInSubgraph = 19
                }
            }
        )
        float3 inputs:In = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-534.9009, 70.52112)
                    int stackingOrderInSubgraph = 6
                }
            }
        )
        float3 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-439, 96.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Out.connect = </Root/Contrast/Add.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector3FA"
            prepend float3 inputs:in1.connect = </Root/Contrast.inputs:In>
            float inputs:in2.connect = </Root/Contrast/Power.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-377.3042, 100.33069)
            int ui:nodegraph:node:stackingOrder = 9
        }

        def Shader "Power"
        {
            uniform token info:id = "ND_power_float"
            float inputs:in1 = 0.5
            float inputs:in2 = 2.2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-525.9038, 150.16895)
            int ui:nodegraph:node:stackingOrder = 14
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/Contrast/Subtract.outputs:out>
            float inputs:in2.connect = </Root/Contrast.inputs:Contrast>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-246.99902, 102.62024)
            int ui:nodegraph:node:stackingOrder = 17
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector3FA"
            prepend float3 inputs:in1.connect = </Root/Contrast/Multiply.outputs:out>
            float inputs:in2.connect = </Root/Contrast/Power.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-142.09082, 128.38074)
            int ui:nodegraph:node:stackingOrder = 23
        }
    }

    def NodeGraph "Hue" (
        active = true
    )
    {
        float3 inputs:In = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-3637.9258, -149.64375)
                    int stackingOrderInSubgraph = 617
                }
            }
        )
        bool inputs:isOffsetInRadians = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1153.5256, 549.5343)
                    int stackingOrderInSubgraph = 837
                }
            }
        )
        float inputs:Offset = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1177.5205, 425.79874)
                    int stackingOrderInSubgraph = 837
                }
            }
        )
        float3 outputs:Out (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-376, 125.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Out.connect = </Root/Hue/Multiply_2.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1954.9015, -191.24077)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1049

        def Shader "Separate4"
        {
            uniform token info:id = "ND_separate4_vector4"
            float4 inputs:in.connect = </Root/Hue/K.outputs:out>
            float outputs:outw
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-3410.7092, -484.96463)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/Hue.inputs:In>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-3467.6973, -150.34383)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "ConstantFloat4_1"
        {
            uniform token info:id = "ND_constant_vector4"
            float4 inputs:value = (0, 0, 0, 0)
            float4 inputs:value.connect = </Root/Hue/Combine4.outputs:out>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-2974.1313, -456.65897)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "Combine4"
        {
            uniform token info:id = "ND_combine4_vector4"
            float inputs:in1.connect = </Root/Hue/Separate3.outputs:outy>
            float inputs:in2.connect = </Root/Hue/Separate3.outputs:outz>
            float inputs:in3.connect = </Root/Hue/Separate4.outputs:outx>
            float inputs:in4.connect = </Root/Hue/Separate4.outputs:outy>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-3158.6016, -455.60147)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "Combine4_1"
        {
            uniform token info:id = "ND_combine4_vector4"
            float inputs:in1.connect = </Root/Hue/Separate3.outputs:outz>
            float inputs:in2.connect = </Root/Hue/Separate3.outputs:outy>
            float inputs:in3.connect = </Root/Hue/Separate4.outputs:outw>
            float inputs:in4.connect = </Root/Hue/Separate4.outputs:outz>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-3156.8545, -539.08344)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "ConstantFloat4_2"
        {
            uniform token info:id = "ND_constant_vector4"
            float4 inputs:value = (0, 0, 0, 0)
            float4 inputs:value.connect = </Root/Hue/Combine4_1.outputs:out>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-2972.3843, -540.1409)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "ConstantFloat4_3"
        {
            uniform token info:id = "ND_constant_vector4"
            float4 inputs:value = (0, 0, 0, 0)
            float4 inputs:value.connect = </Root/Hue/Combine4_2.outputs:out>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-1977.5487, -396.8121)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "Combine4_2"
        {
            uniform token info:id = "ND_combine4_vector4"
            float inputs:in1.connect = </Root/Hue/Separate3.outputs:outx>
            float inputs:in2.connect = </Root/Hue/Separate4_1.outputs:outy>
            float inputs:in3.connect = </Root/Hue/Separate4_1.outputs:outz>
            float inputs:in4.connect = </Root/Hue/Separate4_1.outputs:outx>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-2187.2097, -394.59714)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "ConstantFloat4_4"
        {
            uniform token info:id = "ND_constant_vector4"
            float4 inputs:value = (0, 0, 0, 0)
            float4 inputs:value.connect = </Root/Hue/Combine4_3.outputs:out>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-1997.4391, -475.046)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "Combine4_3"
        {
            uniform token info:id = "ND_combine4_vector4"
            float inputs:in1.connect = </Root/Hue/Separate4_1.outputs:outx>
            float inputs:in2.connect = </Root/Hue/Separate4_1.outputs:outy>
            float inputs:in3.connect = </Root/Hue/Separate4_1.outputs:outw>
            float inputs:in4.connect = </Root/Hue/Separate3.outputs:outx>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-2193.3455, -473.9885)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "K"
        {
            uniform token info:id = "ND_constant_vector4"
            float4 inputs:value = (0, -0.33333334, 0.6666667, -1)
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-3590.2178, -482.82034)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "Step"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/Hue/Separate3.outputs:outz>
            float inputs:in.connect = </Root/Hue/Separate3.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2969.2986, -363.022)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_vector4"
            float4 inputs:bg.connect = </Root/Hue/ConstantFloat4_2.outputs:out>
            float4 inputs:fg.connect = </Root/Hue/ConstantFloat4_1.outputs:out>
            float inputs:mix.connect = </Root/Hue/Step.outputs:out>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-2698.3223, -461.3455)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "Separate4_1"
        {
            uniform token info:id = "ND_separate4_vector4"
            float4 inputs:in.connect = </Root/Hue/Mix.outputs:out>
            float outputs:outw
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-2442.9993, -451.09943)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "P"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Mix"]
        }

        def Shader "Step_1"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/Hue/Separate4_1.outputs:outx>
            float inputs:in.connect = </Root/Hue/Separate3.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2230.7927, -230.48488)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "Mix_1"
        {
            uniform token info:id = "ND_mix_vector4"
            float4 inputs:bg.connect = </Root/Hue/ConstantFloat4_4.outputs:out>
            float4 inputs:fg.connect = </Root/Hue/ConstantFloat4_3.outputs:out>
            float inputs:mix.connect = </Root/Hue/Step_1.outputs:out>
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-1699.7957, -402.00824)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Q"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Mix_1"]
        }

        def Shader "Separate4_2"
        {
            uniform token info:id = "ND_separate4_vector4"
            float4 inputs:in.connect = </Root/Hue/Mix_1.outputs:out>
            float outputs:outw
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-1455.01, -347.5489)
            int ui:nodegraph:node:stackingOrder = 617
        }

        def Shader "Min"
        {
            uniform token info:id = "ND_min_float"
            float inputs:in1.connect = </Root/Hue/Separate4_2.outputs:outw>
            float inputs:in2.connect = </Root/Hue/Separate4_2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1225.3453, -269.9467)
            int ui:nodegraph:node:stackingOrder = 1068
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/Hue/Separate4_2.outputs:outx>
            float inputs:in2.connect = </Root/Hue/Min.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1127.1118, -387.25006)
            int ui:nodegraph:node:stackingOrder = 709
        }

        def Scope "Group3" (
            kind = "group"
        )
        {
            string ui:group:annotation = "D"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Subtract"]
        }

        def Shader "E"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 1e-10
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1078.821, -149.04109)
            int ui:nodegraph:node:stackingOrder = 1072
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/Hue/Subtract.outputs:out>
            float inputs:in2 = 6
            float outputs:out
            float2 ui:nodegraph:node:pos = (-984.60236, -392.86038)
            int ui:nodegraph:node:stackingOrder = 1074
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Hue/E.outputs:out>
            float inputs:in2.connect = </Root/Hue/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-850.07544, -420.63513)
            int ui:nodegraph:node:stackingOrder = 679
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/Hue/Separate4_2.outputs:outw>
            float inputs:in2.connect = </Root/Hue/Separate4_2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1196.6458, -488.25122)
            int ui:nodegraph:node:stackingOrder = 705
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/Hue/Subtract_1.outputs:out>
            float inputs:in2.connect = </Root/Hue/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-758.3445, -449.1189)
            int ui:nodegraph:node:stackingOrder = 681
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Hue/Divide.outputs:out>
            float inputs:in2.connect = </Root/Hue/Separate4_2.outputs:outz>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-768.088, -336.9732)
            int ui:nodegraph:node:stackingOrder = 1070
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/Hue/Add_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-652.55493, -315.4923)
            int ui:nodegraph:node:stackingOrder = 695
        }

        def Shader "Add_2"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Hue/Separate4_2.outputs:outx>
            float inputs:in2.connect = </Root/Hue/E.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-894.47754, -253.01355)
            int ui:nodegraph:node:stackingOrder = 713
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/Hue/Subtract.outputs:out>
            float inputs:in2.connect = </Root/Hue/Add_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-742.0134, -246.13062)
            int ui:nodegraph:node:stackingOrder = 703
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_color3"
            float inputs:in1.connect = </Root/Hue/Abs.outputs:out>
            float inputs:in2.connect = </Root/Hue/Divide_1.outputs:out>
            float inputs:in3.connect = </Root/Hue/Separate4_2.outputs:outx>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-459.03125, -266.65918)
            int ui:nodegraph:node:stackingOrder = 725
        }

        def Scope "Group4" (
            kind = "group"
        )
        {
            string ui:group:annotation = "hsv"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Combine3"]
        }

        def Shader "MTLSelect"
        {
            uniform token info:id = "ND_MTL_select_float"
            float inputs:a.connect = </Root/Hue/Divide_2.outputs:out>
            float inputs:b.connect = </Root/Hue.inputs:Offset>
            bool inputs:c.connect = </Root/Hue.inputs:isOffsetInRadians>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-863.5983, 448.4912)
            int ui:nodegraph:node:stackingOrder = 837
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/Hue.inputs:Offset>
            float inputs:in2 = 360
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1009.0395, 410.1084)
            int ui:nodegraph:node:stackingOrder = 837
        }

        def Shader "Separate3_1"
        {
            uniform token info:id = "ND_separate3_color3"
            color3f inputs:in.connect = </Root/Hue/Combine3.outputs:out>
            float outputs:outb
            float outputs:outg
            float outputs:outr
            float2 ui:nodegraph:node:pos = (-242.3257, -218.88615)
            int ui:nodegraph:node:stackingOrder = 840
        }

        def Shader "Add_3"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Hue/Separate3_1.outputs:outr>
            float inputs:in2.connect = </Root/Hue/MTLSelect.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-170.28902, 52.54518)
            int ui:nodegraph:node:stackingOrder = 878
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1.connect = </Root/Hue/Add_4.outputs:out>
            float inputs:in2.connect = </Root/Hue/IfGreater_1.outputs:out>
            float inputs:value1 = 0
            float inputs:value1.connect = None
            float inputs:value2.connect = </Root/Hue/Add_3.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (199.05264, -5.418977)
            int ui:nodegraph:node:stackingOrder = 865
        }

        def Shader "Add_4"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Hue/Add_3.outputs:out>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (26.135141, 56.64898)
            int ui:nodegraph:node:stackingOrder = 867
        }

        def Shader "IfGreater_1"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1.connect = </Root/Hue/Add_5.outputs:out>
            float inputs:in2.connect = </Root/Hue/Add_3.outputs:out>
            float inputs:value1.connect = </Root/Hue/Add_3.outputs:out>
            float inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (18.330704, 180.9627)
            int ui:nodegraph:node:stackingOrder = 871
        }

        def Shader "Add_5"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/Hue/Add_3.outputs:out>
            float inputs:in2 = -1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-137.16313, 206.45474)
            int ui:nodegraph:node:stackingOrder = 873
        }

        def Shader "K2"
        {
            uniform token info:id = "ND_constant_vector4"
            float4 inputs:value = (1, 0.6666667, 0.33333334, 3)
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (43.93475, -150.78947)
            int ui:nodegraph:node:stackingOrder = 886
        }

        def Scope "Group5" (
            kind = "group"
        )
        {
            string ui:group:annotation = "hue"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Add_3"]
        }

        def Shader "Separate4_3"
        {
            uniform token info:id = "ND_separate4_vector4"
            float4 inputs:in.connect = </Root/Hue/K2.outputs:out>
            float outputs:outw
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (235.03824, -163.09546)
            int ui:nodegraph:node:stackingOrder = 966
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_vector3"
            prepend float inputs:in.connect = </Root/Hue/IfGreater.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (419.31607, 22.112684)
            int ui:nodegraph:node:stackingOrder = 913
        }

        def Shader "Combine3_1"
        {
            uniform token info:id = "ND_combine3_vector3"
            prepend float inputs:in1.connect = </Root/Hue/Separate4_3.outputs:outx>
            prepend float inputs:in2.connect = </Root/Hue/Separate4_3.outputs:outy>
            prepend float inputs:in3.connect = </Root/Hue/Separate4_3.outputs:outz>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (470.09814, -176.00061)
            int ui:nodegraph:node:stackingOrder = 1063
        }

        def Shader "Add_6"
        {
            uniform token info:id = "ND_add_vector3"
            float3 inputs:in1.connect = </Root/Hue/Combine3_1.outputs:out>
            float3 inputs:in2.connect = </Root/Hue/Convert.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (587.10614, -57.54681)
            int ui:nodegraph:node:stackingOrder = 1060
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_vector3"
            float3 inputs:in.connect = </Root/Hue/Add_6.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (732.8577, -61.76294)
            int ui:nodegraph:node:stackingOrder = 921
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/Hue/Fractional.outputs:out>
            float inputs:in2 = 6
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (915.86694, -55.288513)
            int ui:nodegraph:node:stackingOrder = 925
        }

        def Shader "Subtract_2"
        {
            uniform token info:id = "ND_subtract_vector3"
            float3 inputs:in1.connect = </Root/Hue/Multiply_1.outputs:out>
            float3 inputs:in2.connect = </Root/Hue/Convert_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1014.90735, -101.808495)
            int ui:nodegraph:node:stackingOrder = 975
        }

        def Shader "Convert_1"
        {
            uniform token info:id = "ND_convert_float_vector3"
            prepend float inputs:in.connect = </Root/Hue/Separate4_3.outputs:outw>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (423.3839, -118.40848)
            int ui:nodegraph:node:stackingOrder = 970
        }

        def Shader "Abs_1"
        {
            uniform token info:id = "ND_absval_vector3"
            float3 inputs:in.connect = </Root/Hue/Subtract_2.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1134.3307, -106.574455)
            int ui:nodegraph:node:stackingOrder = 982
        }

        def Shader "Mix_2"
        {
            uniform token info:id = "ND_mix_vector3"
            float3 inputs:bg = (1, 1, 1)
            float3 inputs:bg.connect = </Root/Hue/Convert_2.outputs:out>
            float3 inputs:fg.connect = </Root/Hue/Clamp.outputs:out>
            float inputs:mix.connect = </Root/Hue/Separate3_1.outputs:outg>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1636.0713, -401.81464)
            int ui:nodegraph:node:stackingOrder = 1055
        }

        def Scope "Group6" (
            kind = "group"
        )
        {
            string ui:group:annotation = "P2"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Abs_1"]
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/Hue/Mix_2.outputs:out>
            prepend float inputs:in2.connect = </Root/Hue/Separate3_1.outputs:outb>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1759.6763, -227.54083)
            int ui:nodegraph:node:stackingOrder = 1049
        }

        def Shader "Convert_2"
        {
            uniform token info:id = "ND_convert_float_vector3"
            prepend float inputs:in.connect = </Root/Hue/Separate4_3.outputs:outx>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (679.119, -389.43585)
            int ui:nodegraph:node:stackingOrder = 1030
        }

        def Shader "Subtract_3"
        {
            uniform token info:id = "ND_subtract_vector3"
            float3 inputs:in1.connect = </Root/Hue/Abs_1.outputs:out>
            float3 inputs:in2.connect = </Root/Hue/Convert_2.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1281.449, -99.294044)
            int ui:nodegraph:node:stackingOrder = 1051
        }

        def Shader "Clamp"
        {
            uniform token info:id = "ND_clamp_vector3"
            float3 inputs:high
            float3 inputs:in.connect = </Root/Hue/Subtract_3.outputs:out>
            float3 inputs:low
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1428.8627, -126.53331)
            int ui:nodegraph:node:stackingOrder = 1053
        }
    }
}

