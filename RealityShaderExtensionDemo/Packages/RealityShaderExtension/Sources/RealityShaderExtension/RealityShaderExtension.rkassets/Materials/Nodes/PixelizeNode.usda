#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Cube", "PixelizeCircle", "PixelizeDiamond", "PixelizeHexagon", "PixelizeHexagonGrid", "PixelizeLeaf", "PixelizeLed", "PixelizeQuad", "PixelizeSector", "PixelizeTriangle"]
    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube/Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2

        def Material "Material"
        {
            reorder nameChildren = ["PixelizeLed_1", "PixelizeLeaf_1", "PreviewSurface", "PixelizeDiamond_1", "PixelizeCircle_1", "PixelizeSector_1", "PixelizeTriangle_1", "PixelizeHexagon_1", "PixelizeHexagonGrid_1", "Convert", "Time", "Sin", "Remap", "PixelizeQuad_1"]
            token outputs:mtlx:surface.connect = </Root/Cube/Material/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube/Material/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity = 1
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
                int ui:nodegraph:node:stackingOrder = 20
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def "PixelizeCircle_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeCircle>
            )
            {
                float3 inputs:BackgroundColor = (0, 0, 0)
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount.connect = None
                float2 inputs:PixelInterval = (1, 1)
                float inputs:PixelRadius (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-365.2132, -209.1623)
                            int stackingOrderInSubgraph = 517
                        }
                    }
                )
                float2 ui:nodegraph:node:pos = (-568.7272, -328.72516)
                int ui:nodegraph:node:stackingOrder = 255
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube/Material/PixelizeDiamond_1.outputs:Output>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-138.28125, 132.6914)
                int ui:nodegraph:node:stackingOrder = 5
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-939.79297, 98.48828)
                int ui:nodegraph:node:stackingOrder = 26
            }

            def Shader "Sin"
            {
                uniform token info:id = "ND_sin_float"
                float inputs:in.connect = </Root/Cube/Material/Time.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-800.22266, 96.96875)
                int ui:nodegraph:node:stackingOrder = 30
            }

            def Shader "Remap"
            {
                uniform token info:id = "ND_remap_float"
                float inputs:in.connect = </Root/Cube/Material/Sin.outputs:out>
                float inputs:inlow = -1
                float inputs:outhigh = 30
                float inputs:outlow = 1
                float outputs:out
                float2 ui:nodegraph:node:pos = (-662.9844, 97.80078)
                int ui:nodegraph:node:stackingOrder = 34
            }

            def "PixelizeDiamond_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeDiamond>
            )
            {
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-1435.8506, 404.66702)
                            int stackingOrderInSubgraph = 667
                        }
                    }
                )
                float2 ui:nodegraph:node:pos = (-363.4659, 69.40864)
                int ui:nodegraph:node:stackingOrder = 249
            }

            def "PixelizeLeaf_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeLeaf>
            )
            {
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount = 20
                float inputs:PixelRatio = 1
                float2 inputs:UVTilling = (1, 1)
                float2 ui:nodegraph:node:pos = (287.95386, -258.6693)
                int ui:nodegraph:node:stackingOrder = 261
            }

            def "PixelizeLed_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeLed>
            )
            {
                float3 inputs:BackgroundColor
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:LedRadius
                float inputs:PixelCount
                float inputs:PixelRatio
                float2 inputs:UVTilling = (1, 1)
                float2 ui:nodegraph:node:pos = (-322.49344, -319.48682)
                int ui:nodegraph:node:stackingOrder = 256
            }

            def "PixelizeQuad_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeQuad>
            )
            {
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount.connect = None
                float inputs:PixelRatio
                float2 ui:nodegraph:node:pos = (-109.788666, -243.81831)
                int ui:nodegraph:node:stackingOrder = 257
            }

            def "PixelizeSector_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeSector>
            )
            {
                float3 inputs:BackgroundColor
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount.connect = None
                float2 inputs:PixelInterval = (1, 1)
                float inputs:PixelRadius = 0.8
                float inputs:PixelRatio.connect = None
                float2 ui:nodegraph:node:pos = (-843.787, -271.6611)
                int ui:nodegraph:node:stackingOrder = 254
            }

            def "PixelizeTriangle_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeTriangle>
            )
            {
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount
                float inputs:PixelRatio
                float2 ui:nodegraph:node:pos = (70.992905, -248.47295)
                int ui:nodegraph:node:stackingOrder = 258
            }

            def "PixelizeHexagon_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeHexagon>
            )
            {
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-2593.918, 315.77216)
                            int stackingOrderInSubgraph = 1541
                        }
                    }
                )
                float inputs:PixelRatio (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-2429.2568, 662.65436)
                            int stackingOrderInSubgraph = 2123
                        }
                    }
                )
                float2 ui:nodegraph:node:pos = (-1144.9099, -233.40659)
                int ui:nodegraph:node:stackingOrder = 252
            }

            def "PixelizeHexagonGrid_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeHexagonGrid>
            )
            {
                float inputs:GirdWidth
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount
                float inputs:PixelRatio = 0.5
                float2 ui:nodegraph:node:pos = (-1236.1332, -22.527409)
                int ui:nodegraph:node:stackingOrder = 253
            }
        }
    }

    def NodeGraph "PixelizeCircle" (
        active = true
    )
    {
        float3 inputs:BackgroundColor = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-197.70772, -153.50185)
                    int stackingOrderInSubgraph = 376
                }
            }
        )
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-467.02206, -77.68977)
                    int stackingOrderInSubgraph = 331
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1681.9808, -34.320675)
                    int stackingOrderInSubgraph = 508
                }
            }
        )
        float2 inputs:PixelInterval = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1451.3503, -178.21904)
                    int stackingOrderInSubgraph = 425
                }
            }
        )
        float inputs:PixelRadius = 0.45 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-365.2132, -209.1623)
                    int stackingOrderInSubgraph = 517
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1925.494, 23.403915)
                    int stackingOrderInSubgraph = 583
                }
            }
        )
        float2 inputs:UVOffset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-498.23062, 137.8252)
                    int stackingOrderInSubgraph = 531
                }
            }
        )
        float2 inputs:UVTilling = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-502.9311, 68.425)
                    int stackingOrderInSubgraph = 530
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-462, 96.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeCircle/IfGreater.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (381.7236, 88.6454)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 282

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/PixelizeCircle.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1389.2489, -83.7565)
            int ui:nodegraph:node:stackingOrder = 489
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeCircle.inputs:PixelInterval>
            float inputs:in2.connect = </Root/PixelizeCircle/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1309.6686, -142.90181)
            int ui:nodegraph:node:stackingOrder = 429
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1837.3531, -377.26346)
            int ui:nodegraph:node:stackingOrder = 582
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeCircle/Combine2_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeCircle/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1169.0352, -324.26917)
            int ui:nodegraph:node:stackingOrder = 484
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeCircle.inputs:PixelInterval>
            float2 inputs:in2.connect = </Root/PixelizeCircle/Floor.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1027.458, -249.527)
            int ui:nodegraph:node:stackingOrder = 477
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeCircle/Add.outputs:out>
            float inputs:in2.connect = </Root/PixelizeCircle/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-861.6402, -236.1324)
            int ui:nodegraph:node:stackingOrder = 464
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeCircle/Multiply_2.outputs:out>
            float inputs:in2 = 0.5
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-949.7144, -243.90584)
            int ui:nodegraph:node:stackingOrder = 464
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeCircle.inputs:PixelCount>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1156.6172, -50.5028)
            int ui:nodegraph:node:stackingOrder = 515
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/PixelizeCircle/Combine2_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeCircle/Multiply_3.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-787.5998, -358.88672)
            int ui:nodegraph:node:stackingOrder = 360
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/PixelizeCircle/Subtract_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-651.26385, -348.80984)
            int ui:nodegraph:node:stackingOrder = 360
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeCircle/Magnitude.outputs:out>
            float inputs:in2.connect = </Root/PixelizeCircle/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-525.9083, -266.15533)
            int ui:nodegraph:node:stackingOrder = 499
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeCircle/Multiply_3.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-812.7227, 51.098663)
            int ui:nodegraph:node:stackingOrder = 517
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeCircle/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeCircle.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-642.0747, -22.8361)
            int ui:nodegraph:node:stackingOrder = 331
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeCircle/Multiply_5.outputs:out>
            float inputs:in2.connect = </Root/PixelizeCircle/Separate2.outputs:outy>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-509.54565, 0.8068743)
            int ui:nodegraph:node:stackingOrder = 331
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_vector3"
            float3 inputs:in1.connect = </Root/PixelizeCircle.inputs:BackgroundColor>
            float3 inputs:in2.connect = </Root/PixelizeCircle/TiledImage.outputs:out>
            prepend float inputs:value1.connect = </Root/PixelizeCircle/Multiply_4.outputs:out>
            float inputs:value2.connect = </Root/PixelizeCircle.inputs:PixelRadius>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (102.194786, -205.86536)
            int ui:nodegraph:node:stackingOrder = 374
        }

        def Shader "Separate2_1"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeCircle/TextureCoordinates.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-1613.4338, -399.48862)
            int ui:nodegraph:node:stackingOrder = 582
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeCircle/Divide_2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeCircle/Separate2_1.outputs:outy>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1313.4886, -395.40186)
            int ui:nodegraph:node:stackingOrder = 582
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeCircle/Separate2_1.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeCircle.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1442.4763, -424.25522)
            int ui:nodegraph:node:stackingOrder = 582
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeCircle/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1104.0813, -168.98077)
            int ui:nodegraph:node:stackingOrder = 475
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_vector3"
            float3 inputs:default
            prepend asset inputs:file.connect = </Root/PixelizeCircle.inputs:Image>
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            prepend float2 inputs:texcoord.connect = </Root/PixelizeCircle/Combine2.outputs:out>
            float2 inputs:uvoffset.connect = </Root/PixelizeCircle.inputs:UVOffset>
            float2 inputs:uvtiling = (1, 1)
            float2 inputs:uvtiling.connect = </Root/PixelizeCircle.inputs:UVTilling>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-214.87778, 33.578808)
            int ui:nodegraph:node:stackingOrder = 529
        }
    }

    def NodeGraph "PixelizeDiamond" (
        active = true
    )
    {
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-75.07493, -61.11251)
                    int stackingOrderInSubgraph = 673
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1654.5574, 341.98148)
                    int stackingOrderInSubgraph = 761
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2021.3448, 34.514557)
                    int stackingOrderInSubgraph = 758
                }
            }
        )
        float2 inputs:UVOffset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-135.99066, 191.01045)
                    int stackingOrderInSubgraph = 667
                }
            }
        )
        float2 inputs:UVTilling = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-140.69113, 121.61025)
                    int stackingOrderInSubgraph = 667
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-248, 112.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeDiamond/TiledImage.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (391.2461, 16.066406)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 97

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Combine2_1.outputs:out>
            float inputs:in2.connect = </Root/PixelizeDiamond.inputs:PixelCount>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1293.8047, -68.31641)
            int ui:nodegraph:node:stackingOrder = 154
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeDiamond/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1144.4349, -190.43498)
            int ui:nodegraph:node:stackingOrder = 561
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_vector2"
            float2 inputs:in.connect = </Root/PixelizeDiamond/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1088.1628, 68.772415)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/ConstantFloat2.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeDiamond/Fractional.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-845.0926, -10.497116)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "ConstantFloat2"
        {
            uniform token info:id = "ND_constant_vector2"
            float2 inputs:value = (1, 1)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1097.3113, -0.977585)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 1
            float inputs:in2
            float inputs:value1.connect = </Root/PixelizeDiamond/DotProduct.outputs:out>
            float inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-678.7762, -11.872116)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "DotProduct_1"
        {
            uniform token info:id = "ND_dotproduct_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Fractional.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeDiamond/ConstantFloat2_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-854.2098, 145.37398)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "ConstantFloat2_1"
        {
            uniform token info:id = "ND_constant_vector2"
            float2 inputs:value = (1, -1)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1066.6707, 167.8896)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "IfGreater_1"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 1
            float inputs:in2
            float inputs:value1.connect = </Root/PixelizeDiamond/DotProduct_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-681.9129, 162.21773)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeDiamond/IfGreater_1.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-553.81134, 222.9482)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/PixelizeDiamond/IfGreater.outputs:out>
            float inputs:in2.connect = </Root/PixelizeDiamond/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-474.01053, 114.69429)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Floor.outputs:out>
            float2 inputs:in2 = (0, 0.5)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-939.831, -281.00912)
            int ui:nodegraph:node:stackingOrder = 598
        }

        def Shader "Add_2"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Floor.outputs:out>
            float2 inputs:in2 = (0.5, 1)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-940.54974, -235.8724)
            int ui:nodegraph:node:stackingOrder = 598
        }

        def Shader "Add_3"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Floor.outputs:out>
            float2 inputs:in2 = (0.5, 0)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-944.79193, -191.06381)
            int ui:nodegraph:node:stackingOrder = 598
        }

        def Shader "Add_4"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Floor.outputs:out>
            float2 inputs:in2 = (1, 0.5)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-942.91693, -146.46616)
            int ui:nodegraph:node:stackingOrder = 598
        }

        def Shader "Switch"
        {
            uniform token info:id = "ND_switch_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Add_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeDiamond/Add_2.outputs:out>
            float2 inputs:in3.connect = </Root/PixelizeDiamond/Add_3.outputs:out>
            float2 inputs:in4.connect = </Root/PixelizeDiamond/Add_4.outputs:out>
            float2 inputs:in5
            float2 inputs:in6
            float2 inputs:in7
            float2 inputs:in8
            float2 inputs:in9
            float2 inputs:in10
            float inputs:which = 0
            float inputs:which.connect = </Root/PixelizeDiamond/Add.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-311.7614, -196.18736)
            int ui:nodegraph:node:stackingOrder = 662
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/PixelizeDiamond.inputs:Image>
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            float2 inputs:texcoord.connect = </Root/PixelizeDiamond/Divide_1.outputs:out>
            float2 inputs:uvoffset.connect = </Root/PixelizeDiamond.inputs:UVOffset>
            float2 inputs:uvtiling = (1, 1)
            float2 inputs:uvtiling.connect = </Root/PixelizeDiamond.inputs:UVTilling>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (158.55733, -2.024349)
            int ui:nodegraph:node:stackingOrder = 670
        }

        def Shader "Separate2_1"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeDiamond/TextureCoordinates_1.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-1894.0765, -83.47281)
            int ui:nodegraph:node:stackingOrder = 704
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeDiamond/Divide_2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeDiamond/Separate2_1.outputs:outy>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1594.1315, -79.38605)
            int ui:nodegraph:node:stackingOrder = 704
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeDiamond/Separate2_1.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeDiamond.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1723.119, -108.23941)
            int ui:nodegraph:node:stackingOrder = 704
        }

        def Shader "TextureCoordinates_1"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-2117.9956, -61.24765)
            int ui:nodegraph:node:stackingOrder = 583
        }

        def Shader "Combine2_2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeDiamond/Divide_3.outputs:out>
            float inputs:in2.connect = </Root/PixelizeDiamond/Separate2_2.outputs:outy>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1651.6865, 153.30473)
            int ui:nodegraph:node:stackingOrder = 755
        }

        def Shader "Separate2_2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in = (1, 1)
            float2 inputs:in.connect = None
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-2002.1019, 153.39586)
            int ui:nodegraph:node:stackingOrder = 755
        }

        def Shader "Divide_3"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeDiamond/Separate2_2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeDiamond.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1831.1444, 128.62926)
            int ui:nodegraph:node:stackingOrder = 755
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeDiamond/Combine2_2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeDiamond.inputs:PixelCount>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-553.2627, 349.17654)
            int ui:nodegraph:node:stackingOrder = 766
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            prepend float2 inputs:in1.connect = </Root/PixelizeDiamond/Switch.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeDiamond/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-244.19579, 84.911736)
            int ui:nodegraph:node:stackingOrder = 764
        }
    }

    def NodeGraph "PixelizeHexagon" (
        active = true
    )
    {
        reorder nameChildren = ["Image", "Divide", "Separate2", "Combine2", "Divide_1", "Multiply", "TextureCoordinates", "Multiply_1", "Divide_2", "NearestHex"]
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1628.507, 360.19757)
                    int stackingOrderInSubgraph = 2266
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2593.918, 315.77216)
                    int stackingOrderInSubgraph = 1541
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2429.2568, 662.65436)
                    int stackingOrderInSubgraph = 2123
                }
            }
        )
        float2 inputs:UVOffset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1658.7007, 747.0094)
                    int stackingOrderInSubgraph = 2273
                }
            }
        )
        float2 inputs:UVTilling = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1663.4012, 677.6092)
                    int stackingOrderInSubgraph = 2273
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-562, 61.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeHexagon/TiledImage.outputs:out>
        float2 ui:nodegraph:node:pos = (4, 91.5)
        int ui:nodegraph:node:stackingOrder = 1
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (-549.6102, 455.25473)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2232

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = </Root/PixelizeHexagon/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/PixelizeHexagon.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2287.3718, 624.48047)
            int ui:nodegraph:node:stackingOrder = 2281
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1 = 1
            float inputs:in1.connect = </Root/PixelizeHexagon/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeHexagon/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-2138.1787, 584.75525)
            int ui:nodegraph:node:stackingOrder = 2279
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/PixelizeHexagon.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2456.431, 312.25363)
            int ui:nodegraph:node:stackingOrder = 1541
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeHexagon/Divide_1.outputs:out>
            float inputs:in2 = 0.58
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2366.236, 321.5092)
            int ui:nodegraph:node:stackingOrder = 2271
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-2425.9705, 474.93088)
            int ui:nodegraph:node:stackingOrder = 2268
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeHexagon/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeHexagon/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1985.8937, 477.59354)
            int ui:nodegraph:node:stackingOrder = 2127
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex.outputs:Add_out>
            float2 inputs:in2.connect = </Root/PixelizeHexagon/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1682.663, 449.293)
            int ui:nodegraph:node:stackingOrder = 2266
        }

        def NodeGraph "NearestHex"
        {
            float inputs:s (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (376.5, 634)
                        int stackingOrderInSubgraph = 2405
                    }
                }
            )
            prepend float inputs:s.connect = </Root/PixelizeHexagon/Multiply.outputs:out>
            float2 inputs:st (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (480.28455, 425.82062)
                        int stackingOrderInSubgraph = 2404
                    }
                }
            )
            prepend float2 inputs:st.connect = </Root/PixelizeHexagon/Multiply_1.outputs:out>
            float2 outputs:Add_out.connect = </Root/PixelizeHexagon/NearestHex/Add.outputs:out>
            float2 ui:nodegraph:node:pos = (-1833.4539, 374.1237)
            int ui:nodegraph:node:stackingOrder = 2187
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2623.75, 502.34375)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2404

            def Shader "Multiply_8"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/Separate2_3.outputs:outy>
                float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/Add_1.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (2112.75, 516.125)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Combine2_3"
            {
                uniform token info:id = "ND_combine2_vector2"
                float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/Multiply_2.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/ConstantFloat.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (1944, 683.5)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/parameters.outputs:r>
                float inputs:in2 = 2
                float outputs:out
                float2 ui:nodegraph:node:pos = (1701.75, 519.5)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def NodeGraph "parameters"
            {
                float inputs:s = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (53.20846, 346.2958)
                            int stackingOrderInSubgraph = 2314
                        }
                    }
                )
                float inputs:s.connect = </Root/PixelizeHexagon/NearestHex/ConstantFloat.outputs:out>
                float2 inputs:st = (0, 0) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (460.34033, 20.736065)
                            int stackingOrderInSubgraph = 2314
                        }
                    }
                )
                float2 inputs:st.connect = </Root/PixelizeHexagon/NearestHex.inputs:st>
                float outputs:aSection (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2328
                        }
                    }
                )
                float outputs:aSection.connect = </Root/PixelizeHexagon/NearestHex/parameters/MTLFmod_1.outputs:out>
                float2 outputs:coord (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2329
                        }
                    }
                )
                float2 outputs:coord.connect = </Root/PixelizeHexagon/NearestHex/parameters/Floor.outputs:out>
                float outputs:h (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2330
                        }
                    }
                )
                float outputs:h.connect = </Root/PixelizeHexagon/NearestHex/parameters/Multiply_2.outputs:out>
                float outputs:m (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2331
                        }
                    }
                )
                float outputs:m.connect = </Root/PixelizeHexagon/NearestHex/parameters/Divide_2.outputs:out>
                float outputs:r (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2332
                        }
                    }
                )
                float outputs:r.connect = </Root/PixelizeHexagon/NearestHex/parameters/Multiply_3.outputs:out>
                float2 outputs:sectPxl (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2327
                        }
                    }
                )
                float2 outputs:sectPxl.connect = </Root/PixelizeHexagon/NearestHex/parameters/MTLFmod.outputs:out>
                float2 ui:nodegraph:node:pos = (884.5, 440.125)
                int ui:nodegraph:node:stackingOrder = 2402
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Divide_2_out"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2003.5059, 342.50827)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2341

                def Shader "Floor"
                {
                    uniform token info:id = "ND_floor_vector2"
                    float2 inputs:in.connect = </Root/PixelizeHexagon/NearestHex/parameters/Divide_3.outputs:out>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1154.0979, 35.15648)
                    int ui:nodegraph:node:stackingOrder = 2339
                }

                def Shader "Divide_3"
                {
                    uniform token info:id = "ND_divide_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/parameters.inputs:st>
                    float2 inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/parameters/Combine2_1.outputs:out>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (884.75, 41)
                    int ui:nodegraph:node:stackingOrder = 2312
                }

                def Shader "MTLFmod"
                {
                    uniform token info:id = "ND_MTL_fmod_vector2"
                    float2 inputs:x.connect = </Root/PixelizeHexagon/NearestHex/parameters.inputs:st>
                    float2 inputs:y.connect = </Root/PixelizeHexagon/NearestHex/parameters/Combine2_1.outputs:out>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1316.858, 189.64888)
                    int ui:nodegraph:node:stackingOrder = 2320
                }

                def Shader "Separate2_1"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/PixelizeHexagon/NearestHex/parameters/Floor.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (1390.4624, 17.429993)
                    int ui:nodegraph:node:stackingOrder = 2316
                }

                def Shader "Multiply_3"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/parameters.inputs:s>
                    float inputs:in2 = 0.8660254
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (421.8683, 538.8125)
                    int ui:nodegraph:node:stackingOrder = 2332
                }

                def Shader "Multiply_2"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/parameters.inputs:s>
                    float inputs:in2 = 0.5
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (927.48096, 365.45093)
                    int ui:nodegraph:node:stackingOrder = 2330
                }

                def Shader "Divide_2"
                {
                    uniform token info:id = "ND_divide_float"
                    float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/parameters/Multiply_2.outputs:out>
                    float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/parameters/Multiply_3.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1096.1685, 430.99506)
                    int ui:nodegraph:node:stackingOrder = 2328
                }

                def Shader "Multiply_4"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/parameters/Multiply_3.outputs:out>
                    float inputs:in2 = 2
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (529.4262, 392.91724)
                    int ui:nodegraph:node:stackingOrder = 2336
                }

                def Shader "Combine2_1"
                {
                    uniform token info:id = "ND_combine2_vector2"
                    float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/parameters/Multiply_4.outputs:out>
                    float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/parameters/Multiply_5.outputs:out>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (773.7143, 182.64311)
                    int ui:nodegraph:node:stackingOrder = 2322
                }

                def Shader "Multiply_5"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/parameters.inputs:s>
                    float inputs:in2 = 1.5
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (494.75208, 226.00467)
                    int ui:nodegraph:node:stackingOrder = 2324
                }

                def Shader "MTLFmod_1"
                {
                    uniform token info:id = "ND_MTL_fmod_float"
                    float inputs:x.connect = </Root/PixelizeHexagon/NearestHex/parameters/Separate2_1.outputs:outy>
                    float inputs:y = 2
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1652.6405, 74.507996)
                    int ui:nodegraph:node:stackingOrder = 2318
                }
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/Combine2_2.outputs:out>
                float2 inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/Combine2_3.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (2450.25, 502.34375)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "MTLFmod_2"
            {
                uniform token info:id = "ND_MTL_fmod_float"
                float inputs:x.connect = </Root/PixelizeHexagon/NearestHex/Separate2_3.outputs:outy>
                float inputs:y = 2
                float outputs:out
                float2 ui:nodegraph:node:pos = (1701.75, 207.5)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0
                float inputs:value.connect = </Root/PixelizeHexagon/NearestHex.inputs:s>
                float outputs:out
                float2 ui:nodegraph:node:pos = (624.75, 634)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Add_1"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/parameters.outputs:h>
                float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/ConstantFloat.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1457.25, 599.5)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Multiply_7"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/Separate2_3.outputs:outx>
                float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/Multiply_2.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1944, 282.25)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Multiply_6"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/MTLFmod_2.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/parameters.outputs:r>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1944, 378.25)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Combine2_2"
            {
                uniform token info:id = "ND_combine2_vector2"
                float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/Subtract.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/Multiply_8.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (2281.5, 396.1875)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Separate2_3"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.outputs:coord>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (1457.25, 100.5)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Subtract"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/Multiply_7.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/Multiply_6.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (2112.75, 312.25)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def NodeGraph "switchCoord"
            {
                float inputs:aSection = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1849.3872, 231.44287)
                            int stackingOrderInSubgraph = 2260
                        }
                    }
                )
                float inputs:aSection.connect = </Root/PixelizeHexagon/NearestHex/parameters.outputs:aSection>
                float2 inputs:coord = (0, 0) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (85.80215, 655.35046)
                            int stackingOrderInSubgraph = 2351
                        }
                    }
                )
                float2 inputs:coord.connect = </Root/PixelizeHexagon/NearestHex/parameters.outputs:coord>
                float inputs:h (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (592.02966, 112.25387)
                            int stackingOrderInSubgraph = 2187
                        }
                    }
                )
                float inputs:h.connect = </Root/PixelizeHexagon/NearestHex/parameters.outputs:h>
                float inputs:m (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (332.15002, 159.4427)
                            int stackingOrderInSubgraph = 2186
                        }
                    }
                )
                float inputs:m.connect = </Root/PixelizeHexagon/NearestHex/parameters.outputs:m>
                float inputs:r = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1332.3322, 397.74545)
                            int stackingOrderInSubgraph = 2274
                        }
                    }
                )
                float inputs:r.connect = </Root/PixelizeHexagon/NearestHex/parameters.outputs:r>
                float2 inputs:sectPxl (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (83.25, 306)
                            int stackingOrderInSubgraph = 2157
                        }
                    }
                )
                float2 inputs:sectPxl.connect = </Root/PixelizeHexagon/NearestHex/parameters.outputs:sectPxl>
                float2 outputs:coord (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1502.1317, 255.82796)
                            int stackingOrderInSubgraph = 2154
                        }
                    }
                )
                float2 outputs:coord.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/IfGreater.outputs:out>
                float2 ui:nodegraph:node:pos = (1184.5, 100.5)
                int ui:nodegraph:node:stackingOrder = 2402
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:IfGreater_out", "inputs:Multiply_9_in2"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2293.6987, 353.12668)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2258

                def Shader "Separate2_2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:sectPxl>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (371.08655, 355.63242)
                    int ui:nodegraph:node:stackingOrder = 2354
                }

                def Shader "Subtract_1"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:h>
                    float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Multiply_9.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (786.8735, 138.56537)
                    int ui:nodegraph:node:stackingOrder = 2359
                }

                def Shader "IfGreater_2"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Add_1.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/IfGreater_3.outputs:out>
                    float inputs:value1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Subtract_1.outputs:out>
                    float inputs:value2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Separate2_2.outputs:outy>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1585.4158, 35.144154)
                    int ui:nodegraph:node:stackingOrder = 2282
                }

                def Shader "IfGreater_3"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Add.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:coord>
                    float inputs:value1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Multiply_10.outputs:out>
                    float inputs:value2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Separate2_2.outputs:outy>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1358.8378, 226.9581)
                    int ui:nodegraph:node:stackingOrder = 2284
                }

                def Shader "IfGreater"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/IfGreater_2.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/IfGreater_1.outputs:out>
                    float inputs:value1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:aSection>
                    float inputs:value2
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (2036.1295, 318.75)
                    int ui:nodegraph:node:stackingOrder = 2258
                }

                def Shader "IfGreater_1"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/IfGreater_4.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/IfGreater_5.outputs:out>
                    float inputs:value1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Separate2_2.outputs:outx>
                    float inputs:value2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:r>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1571.6974, 485.70325)
                    int ui:nodegraph:node:stackingOrder = 2267
                }

                def Shader "Multiply_10"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Subtract_1.outputs:out>
                    float inputs:in2 = -1
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (956.38947, 161.19713)
                    int ui:nodegraph:node:stackingOrder = 2356
                }

                def Shader "Add_1"
                {
                    uniform token info:id = "ND_add_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:coord>
                    float2 inputs:in2 = (-1, -1)
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (434.95502, 629.95435)
                    int ui:nodegraph:node:stackingOrder = 2351
                }

                def Shader "Multiply_9"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:m>
                    float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Separate2_2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (559.6107, 188.11407)
                    int ui:nodegraph:node:stackingOrder = 2185
                }

                def Shader "Add"
                {
                    uniform token info:id = "ND_add_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:coord>
                    float2 inputs:in2 = (0, -1)
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (527.7947, 678.5523)
                    int ui:nodegraph:node:stackingOrder = 2351
                }

                def Shader "Add_2"
                {
                    uniform token info:id = "ND_add_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:coord>
                    float2 inputs:in2 = (-1, 0)
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (443.5784, 764.74615)
                    int ui:nodegraph:node:stackingOrder = 2351
                }

                def Shader "IfGreater_4"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Add.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:coord>
                    float inputs:value1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Add_3.outputs:out>
                    float inputs:value2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Separate2_2.outputs:outy>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1231.0508, 533.1203)
                    int ui:nodegraph:node:stackingOrder = 2276
                }

                def Shader "IfGreater_5"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Add.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Add_2.outputs:out>
                    float inputs:value1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Multiply_9.outputs:out>
                    float inputs:value2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Separate2_2.outputs:outy>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1216.7325, 714.4874)
                    int ui:nodegraph:node:stackingOrder = 2269
                }

                def Shader "Add_3"
                {
                    uniform token info:id = "ND_add_float"
                    float inputs:in1.connect = </Root/PixelizeHexagon/NearestHex/switchCoord/Subtract_1.outputs:out>
                    float inputs:in2.connect = </Root/PixelizeHexagon/NearestHex/switchCoord.inputs:h>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1061.7566, 460.2253)
                    int ui:nodegraph:node:stackingOrder = 2286
                }
            }
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/PixelizeHexagon.inputs:Image>
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            float2 inputs:texcoord.connect = </Root/PixelizeHexagon/Divide_2.outputs:out>
            float2 inputs:uvoffset.connect = </Root/PixelizeHexagon.inputs:UVOffset>
            float2 inputs:uvtiling = (1, 1)
            float2 inputs:uvtiling.connect = </Root/PixelizeHexagon.inputs:UVTilling>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1373.6709, 482.5534)
            int ui:nodegraph:node:stackingOrder = 2275
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in = (1, 1)
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-2453.4036, 570.9863)
            int ui:nodegraph:node:stackingOrder = 2283
        }
    }

    def NodeGraph "PixelizeLeaf" (
        active = true
    )
    {
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (868.03424, -168.99907)
                    int stackingOrderInSubgraph = 900
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-940.74994, 40.40548)
                    int stackingOrderInSubgraph = 321
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-928.1919, -68.77628)
                    int stackingOrderInSubgraph = 972
                }
            }
        )
        float2 inputs:UVOffset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (890.5137, 78.751396)
                    int stackingOrderInSubgraph = 980
                }
            }
        )
        float2 inputs:UVTilling = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (889.2054, -0.8476475)
                    int stackingOrderInSubgraph = 978
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeLeaf/TiledImage.outputs:out>
        float2 ui:nodegraph:node:pos = (44, 131.5)
        int ui:nodegraph:node:stackingOrder = 3
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1378.7877, -14.908359)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 902

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in = (1, 1)
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-935.4303, -154.62096)
            int ui:nodegraph:node:stackingOrder = 977
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeLeaf/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeLeaf/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-635.0144, -145.60219)
            int ui:nodegraph:node:stackingOrder = 972
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeLeaf/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/PixelizeLeaf.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-766.0324, -122.92994)
            int ui:nodegraph:node:stackingOrder = 972
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeLeaf/Combine2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLeaf.inputs:PixelCount>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-494.86682, -98.2151)
            int ui:nodegraph:node:stackingOrder = 912
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-643.1787, -297.69128)
            int ui:nodegraph:node:stackingOrder = 603
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLeaf/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLeaf/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-462.96643, -232.2204)
            int ui:nodegraph:node:stackingOrder = 608
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeLeaf/Multiply_3.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-366.53748, -161.15366)
            int ui:nodegraph:node:stackingOrder = 887
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLeaf/Floor.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLeaf/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-257.35934, -111.915665)
            int ui:nodegraph:node:stackingOrder = 891
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLeaf/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLeaf/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-162.36195, -175.9872)
            int ui:nodegraph:node:stackingOrder = 889
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "pixelScale"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_2"]
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLeaf/Subtract_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLeaf/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-84.840065, 21.706907)
            int ui:nodegraph:node:stackingOrder = 867
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLeaf/Divide_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLeaf/Combine2_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (814.3948, -58.722107)
            int ui:nodegraph:node:stackingOrder = 896
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeLeaf/Divide_3.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLeaf/Divide_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (700.079, 132.90146)
            int ui:nodegraph:node:stackingOrder = 883
        }

        def Shader "Separate2_1"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeLeaf/Multiply_4.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (60.06498, 39.386322)
            int ui:nodegraph:node:stackingOrder = 869
        }

        def Shader "Step"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/PixelizeLeaf/Separate2_1.outputs:outx>
            float inputs:in.connect = </Root/PixelizeLeaf/Separate2_1.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (393.9468, 166.16061)
            int ui:nodegraph:node:stackingOrder = 879
        }

        def Shader "Separate2_2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeLeaf/Multiply_2.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-343.13046, 181.56201)
            int ui:nodegraph:node:stackingOrder = 732
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeLeaf/Step.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLeaf/Separate2_2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (533.3738, 249.6969)
            int ui:nodegraph:node:stackingOrder = 881
        }

        def Shader "Step_1"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/PixelizeLeaf/Oneminus.outputs:out>
            float inputs:in.connect = </Root/PixelizeLeaf/Separate2_1.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (406.43127, -5.4527726)
            int ui:nodegraph:node:stackingOrder = 873
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/PixelizeLeaf/Separate2_1.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (281.90082, 39.226196)
            int ui:nodegraph:node:stackingOrder = 875
        }

        def Shader "Divide_3"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeLeaf/Step_1.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLeaf/Separate2_2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (548.83466, 56.85779)
            int ui:nodegraph:node:stackingOrder = 877
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/PixelizeLeaf.inputs:Image>
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            float2 inputs:texcoord.connect = </Root/PixelizeLeaf/Add.outputs:out>
            float2 inputs:uvoffset.connect = </Root/PixelizeLeaf.inputs:UVOffset>
            float2 inputs:uvtiling = (1, 1)
            float2 inputs:uvtiling.connect = </Root/PixelizeLeaf.inputs:UVTilling>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1138.3951, -76.14659)
            int ui:nodegraph:node:stackingOrder = 976
        }
    }

    def NodeGraph "PixelizeLed" (
        active = true
    )
    {
        float3 inputs:BackgroundColor = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (17.027899, 258.93628)
                    int stackingOrderInSubgraph = 494
                }
            }
        )
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-581.0807, -294.72153)
                    int stackingOrderInSubgraph = 388
                }
            }
        )
        float inputs:LedRadius = 0.9 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-400.3724, 127.25848)
                    int stackingOrderInSubgraph = 436
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1390.9258, -61.07772)
                    int stackingOrderInSubgraph = 41
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1402.6318, 17.963947)
                    int stackingOrderInSubgraph = 126
                }
            }
        )
        float2 inputs:UVOffset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-647.8672, -105.5101)
                    int stackingOrderInSubgraph = 532
                }
            }
        )
        float2 inputs:UVTilling = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-652.5676, -174.91031)
                    int stackingOrderInSubgraph = 532
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeLed/Add_1.outputs:out>
        float2 ui:nodegraph:node:pos = (64, 151.5)
        int ui:nodegraph:node:stackingOrder = 4
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (674.53674, -130.9903)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 432

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/PixelizeLed.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1239.2692, -191.17026)
            int ui:nodegraph:node:stackingOrder = 393
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1532.7992, -202.95773)
            int ui:nodegraph:node:stackingOrder = 401
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeLed/Divide.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1161.4911, -158.57927)
            int ui:nodegraph:node:stackingOrder = 391
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeLed/Divide.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1006.9691, -223.04866)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLed/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLed/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-869.4617, -265.98395)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeLed/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-747.2427, -246.44095)
            int ui:nodegraph:node:stackingOrder = 388
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLed/Floor.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLed/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-597.27313, -223.7701)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLed/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLed/Combine2_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-928.0056, -27.27913)
            int ui:nodegraph:node:stackingOrder = 399
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeLed.inputs:PixelCount>
            float inputs:in2.connect = </Root/PixelizeLed/Divide_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1069.5195, -8.658884)
            int ui:nodegraph:node:stackingOrder = 396
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeLed.inputs:PixelCount>
            float inputs:in2.connect = </Root/PixelizeLed.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1222.7656, 17.804148)
            int ui:nodegraph:node:stackingOrder = 163
        }

        def Shader "MTLSinpi"
        {
            uniform token info:id = "ND_MTL_sinpi_vector2"
            float2 inputs:x.connect = </Root/PixelizeLed/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-774.91846, -30.309298)
            int ui:nodegraph:node:stackingOrder = 405
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_vector2"
            float2 inputs:in.connect = </Root/PixelizeLed/MTLSinpi.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-631.9341, 4.130202)
            int ui:nodegraph:node:stackingOrder = 421
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeLed/Abs.outputs:out>
            float inputs:in2 = 1.5
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-526.3684, 14.990421)
            int ui:nodegraph:node:stackingOrder = 423
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeLed/Multiply_3.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-405.56918, 15.703405)
            int ui:nodegraph:node:stackingOrder = 425
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeLed/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeLed/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-273.53412, 19.051863)
            int ui:nodegraph:node:stackingOrder = 437
        }

        def Shader "Step"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/PixelizeLed/Multiply_4.outputs:out>
            float inputs:in.connect = </Root/PixelizeLed.inputs:LedRadius>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-158.68175, 139.508)
            int ui:nodegraph:node:stackingOrder = 458
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "ledValue"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_4"]
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/PixelizeLed/Step.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-154.34717, 22.313189)
            int ui:nodegraph:node:stackingOrder = 470
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/PixelizeLed/TiledImage.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed/Oneminus.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (28.971014, -11.052842)
            int ui:nodegraph:node:stackingOrder = 481
        }

        def Shader "Multiply_6"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/PixelizeLed/TiledImage.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed/Multiply_4.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-86.52807, -128.51024)
            int ui:nodegraph:node:stackingOrder = 479
        }

        def Shader "Multiply_7"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/PixelizeLed/Multiply_6.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed/Step.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (19.751995, -116.21269)
            int ui:nodegraph:node:stackingOrder = 477
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector3"
            float3 inputs:in1.connect = </Root/PixelizeLed/Multiply_7.outputs:out>
            float3 inputs:in2.connect = </Root/PixelizeLed/Multiply_5.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (146.74373, -113.723305)
            int ui:nodegraph:node:stackingOrder = 473
        }

        def Shader "Multiply_8"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeLed/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed/Step.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (65.82218, 124.27833)
            int ui:nodegraph:node:stackingOrder = 485
        }

        def Shader "Multiply_9"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/PixelizeLed.inputs:BackgroundColor>
            float inputs:in2.connect = </Root/PixelizeLed/Multiply_8.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (181.30469, 70.308495)
            int ui:nodegraph:node:stackingOrder = 489
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector3"
            float3 inputs:in1.connect = </Root/PixelizeLed/Add.outputs:out>
            float3 inputs:in2.connect = </Root/PixelizeLed/Multiply_9.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (400.65253, -0.8297776)
            int ui:nodegraph:node:stackingOrder = 490
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/PixelizeLed.inputs:Image>
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            float2 inputs:texcoord.connect = </Root/PixelizeLed/Multiply_1.outputs:out>
            float2 inputs:uvoffset.connect = </Root/PixelizeLed.inputs:UVOffset>
            float2 inputs:uvtiling = (1, 1)
            float2 inputs:uvtiling.connect = </Root/PixelizeLed.inputs:UVTilling>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-364.51437, -209.7565)
            int ui:nodegraph:node:stackingOrder = 532
        }
    }

    def NodeGraph "PixelizeQuad" (
        active = true
    )
    {
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-403.0122, -100.95342)
                    int stackingOrderInSubgraph = 151
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1208.582, 137.43242)
                    int stackingOrderInSubgraph = 298
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1557.0399, 138.32213)
                    int stackingOrderInSubgraph = 298
                }
            }
        )
        float2 inputs:UVOffset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-502.64252, 159.50362)
                    int stackingOrderInSubgraph = 532
                }
            }
        )
        float2 inputs:UVTilling = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-507.34296, 90.10344)
                    int stackingOrderInSubgraph = 532
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeQuad/TiledImage.outputs:out>
        float2 ui:nodegraph:node:pos = (84, 171.5)
        int ui:nodegraph:node:stackingOrder = 5
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (94.04297, 28.9375)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 13

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/PixelizeQuad.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1057.3281, 127.5496)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeQuad/Combine2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeQuad/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-938.4375, 78.60429)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in = (1, 1)
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-1335.2263, 22.53138)
            int ui:nodegraph:node:stackingOrder = 299
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeQuad/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/PixelizeQuad.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1186.0422, 44.773872)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeQuad/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeQuad/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1065.6007, 22.840584)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1117.7688, -113.89463)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeQuad/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeQuad/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-864.18146, -29.253517)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeQuad/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-733.1463, -19.190954)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeQuad/Floor.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeQuad/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-597.5874, -0.44379866)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/PixelizeQuad.inputs:Image>
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            float2 inputs:texcoord.connect = </Root/PixelizeQuad/Multiply_2.outputs:out>
            float2 inputs:uvoffset.connect = </Root/PixelizeQuad.inputs:UVOffset>
            float2 inputs:uvtiling = (1, 1)
            float2 inputs:uvtiling.connect = </Root/PixelizeQuad.inputs:UVTilling>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-219.28969, 55.257244)
            int ui:nodegraph:node:stackingOrder = 532
        }
    }

    def NodeGraph "PixelizeSector" (
        active = true
    )
    {
        float3 inputs:BackgroundColor = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (655.0577, 160.80794)
                    int stackingOrderInSubgraph = 294
                }
            }
        )
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (824.3904, -217.79994)
                    int stackingOrderInSubgraph = 545
                }
            }
        )
        float inputs:PixelCount = 10 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-251.84314, 72.49574)
                    int stackingOrderInSubgraph = 246
                }
            }
        )
        float2 inputs:PixelInterval = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-83.36689, -41.455418)
                    int stackingOrderInSubgraph = 388
                }
            }
        )
        float inputs:PixelRadius = 0.8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (616.53796, 75.77443)
                    int stackingOrderInSubgraph = 294
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-312.32425, -59.500732)
                    int stackingOrderInSubgraph = 388
                }
            }
        )
        float2 inputs:UVOffset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (796.6551, -25.093573)
                    int stackingOrderInSubgraph = 549
                }
            }
        )
        float2 inputs:UVTilling = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (802.56433, -88.62595)
                    int stackingOrderInSubgraph = 547
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeSector/IfGreater.outputs:out>
        float2 ui:nodegraph:node:pos = (104, 191.5)
        int ui:nodegraph:node:stackingOrder = 6
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1563.8105, 74.02476)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 159

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-566.40625, -158.70703)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeSector/TextureCoordinates.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-287.32812, -159.39844)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeSector/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/PixelizeSector.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-155.0625, -133.47266)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeSector/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeSector/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-22.597656, -173.5664)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/PixelizeSector.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-56.864933, 27.017424)
            int ui:nodegraph:node:stackingOrder = 232
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeSector.inputs:PixelInterval>
            prepend float inputs:in2.connect = </Root/PixelizeSector/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (107.5974, -70.82184)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeSector/Combine2.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeSector/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (161.9927, -191.47923)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeSector/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (274.60715, -187.393)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeSector/Floor.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeSector/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (388.72775, -173.83527)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/PixelizeSector/Combine2.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeSector/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (395.55084, -11.816192)
            int ui:nodegraph:node:stackingOrder = 246
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/PixelizeSector/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (536.5529, -11.448449)
            int ui:nodegraph:node:stackingOrder = 248
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeSector/Magnitude.outputs:out>
            float inputs:in2.connect = </Root/PixelizeSector.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (664.8735, 10.871515)
            int ui:nodegraph:node:stackingOrder = 250
        }

        def Shader "Separate2_1"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeSector/Multiply_2.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (543.9731, -191.12343)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeSector/Separate2_1.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeSector.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (700.5036, -160.05458)
            int ui:nodegraph:node:stackingOrder = 278
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeSector/Multiply_4.outputs:out>
            float inputs:in2.connect = </Root/PixelizeSector/Separate2_1.outputs:outy>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (822.42236, -150.01457)
            int ui:nodegraph:node:stackingOrder = 542
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_vector3"
            float3 inputs:in1.connect = </Root/PixelizeSector.inputs:BackgroundColor>
            float3 inputs:in2.connect = </Root/PixelizeSector/TiledImage.outputs:out>
            prepend float inputs:value1.connect = </Root/PixelizeSector/Multiply_3.outputs:out>
            prepend float inputs:value2.connect = </Root/PixelizeSector.inputs:PixelRadius>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1284.1031, 10.094502)
            int ui:nodegraph:node:stackingOrder = 296
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/PixelizeSector.inputs:Image>
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            float2 inputs:texcoord.connect = </Root/PixelizeSector/Combine2_1.outputs:out>
            float2 inputs:uvoffset.connect = </Root/PixelizeSector.inputs:UVOffset>
            float2 inputs:uvtiling = (1, 1)
            float2 inputs:uvtiling.connect = </Root/PixelizeSector.inputs:UVTilling>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1038.0499, -123.64793)
            int ui:nodegraph:node:stackingOrder = 534
        }
    }

    def NodeGraph "PixelizeTriangle" (
        active = true
    )
    {
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (813.178, -187.06364)
                    int stackingOrderInSubgraph = 1044
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-884.34564, 103.08034)
                    int stackingOrderInSubgraph = 408
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1094.9308, 47.243546)
                    int stackingOrderInSubgraph = 389
                }
            }
        )
        float2 inputs:UVOffset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (770.1236, 54.02833)
                    int stackingOrderInSubgraph = 1046
                }
            }
        )
        float2 inputs:UVTilling = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (765.42303, -15.371846)
                    int stackingOrderInSubgraph = 1046
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-249, 111.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeTriangle/TiledImage.outputs:out>
        float2 ui:nodegraph:node:pos = (124, 211.5)
        int ui:nodegraph:node:stackingOrder = 7
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1313.8053, -61.697353)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 857

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/Combine2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeTriangle.inputs:PixelCount>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-662.2015, -22.962133)
            int ui:nodegraph:node:stackingOrder = 435
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in = (1, 1)
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-1069.9347, -52.65416)
            int ui:nodegraph:node:stackingOrder = 1044
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeTriangle/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeTriangle/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-805.20416, -66.82213)
            int ui:nodegraph:node:stackingOrder = 389
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeTriangle/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-510.80362, -100.542755)
            int ui:nodegraph:node:stackingOrder = 500
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-752.94324, -243.05902)
            int ui:nodegraph:node:stackingOrder = 1043
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeTriangle/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/PixelizeTriangle.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-933.49396, -21.303349)
            int ui:nodegraph:node:stackingOrder = 418
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeTriangle/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-624.1267, -123.95478)
            int ui:nodegraph:node:stackingOrder = 439
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/Floor.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeTriangle/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-398.65527, -80.48429)
            int ui:nodegraph:node:stackingOrder = 984
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "pixelScale"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_1"]
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeTriangle/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-282.1819, -131.14053)
            int ui:nodegraph:node:stackingOrder = 987
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/Subtract.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeTriangle/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-178.53693, -43.80536)
            int ui:nodegraph:node:stackingOrder = 1032
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/Combine2_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeTriangle/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (807.43835, -99.06166)
            int ui:nodegraph:node:stackingOrder = 1051
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeTriangle/Divide_2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeTriangle/Divide_3.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (591.7476, -147.30052)
            int ui:nodegraph:node:stackingOrder = 860
        }

        def Shader "Separate2_1"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeTriangle/Multiply_2.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-33.4763, -29.700405)
            int ui:nodegraph:node:stackingOrder = 1034
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/PixelizeTriangle/Separate2_1.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (145.1346, -41.48683)
            int ui:nodegraph:node:stackingOrder = 1030
        }

        def Shader "Step"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/PixelizeTriangle/Oneminus.outputs:out>
            float inputs:in.connect = </Root/PixelizeTriangle/Separate2_1.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (254.57448, -201.33336)
            int ui:nodegraph:node:stackingOrder = 982
        }

        def Shader "Step_1"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/PixelizeTriangle/Separate2_1.outputs:outx>
            float inputs:in.connect = </Root/PixelizeTriangle/Separate2_1.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (283.05365, 17.31702)
            int ui:nodegraph:node:stackingOrder = 1036
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeTriangle/Step.outputs:out>
            float inputs:in2.connect = </Root/PixelizeTriangle/Separate2_2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (384.948, -115.08681)
            int ui:nodegraph:node:stackingOrder = 968
        }

        def Shader "Divide_3"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeTriangle/Step_1.outputs:out>
            float inputs:in2.connect = </Root/PixelizeTriangle/Separate2_2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (412.27515, 98.625824)
            int ui:nodegraph:node:stackingOrder = 1038
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Coord"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Divide_1"]
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeTriangle/Multiply_1.outputs:out>
            float inputs:in2 = 2
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-343.56464, 125.587395)
            int ui:nodegraph:node:stackingOrder = 1028
        }

        def Shader "Separate2_2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeTriangle/Multiply_5.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-184.77429, 124.25991)
            int ui:nodegraph:node:stackingOrder = 1028
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/PixelizeTriangle.inputs:Image>
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            float2 inputs:texcoord.connect = </Root/PixelizeTriangle/Add.outputs:out>
            float2 inputs:uvoffset.connect = </Root/PixelizeTriangle.inputs:UVOffset>
            float2 inputs:uvtiling = (1, 1)
            float2 inputs:uvtiling.connect = </Root/PixelizeTriangle.inputs:UVTilling>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1054.1478, -99.670425)
            int ui:nodegraph:node:stackingOrder = 1049
        }
    }

    def NodeGraph "PixelizeHexagonGrid" (
        active = true
    )
    {
        reorder nameChildren = ["Image", "Divide", "Separate2", "Combine2", "Divide_1", "Multiply", "TextureCoordinates", "Multiply_1", "Divide_2", "NearestHex"]
        float inputs:GirdWidth = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1363.0116, 556.98785)
                    int stackingOrderInSubgraph = 2496
                }
            }
        )
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1160.2993, 299.506)
                    int stackingOrderInSubgraph = 2307
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2663.4268, 376.00885)
                    int stackingOrderInSubgraph = 2491
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2541.7852, 748.93756)
                    int stackingOrderInSubgraph = 2442
                }
            }
        )
        float2 inputs:UVOffset = (0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1134.0029, 488.7005)
                    int stackingOrderInSubgraph = 2455
                }
            }
        )
        float2 inputs:UVTilling = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1132.4023, 417.6547)
                    int stackingOrderInSubgraph = 2453
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-562, 61.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeHexagonGrid/Multiply_2.outputs:out>
        float2 ui:nodegraph:node:pos = (24, 111.5)
        int ui:nodegraph:node:stackingOrder = 2
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (-549.6102, 455.25473)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2232

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = </Root/PixelizeHexagonGrid/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/PixelizeHexagonGrid.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2356.4167, 702.8167)
            int ui:nodegraph:node:stackingOrder = 2448
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1 = 1
            float inputs:in1.connect = </Root/PixelizeHexagonGrid/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeHexagonGrid/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-2225.3987, 680.1445)
            int ui:nodegraph:node:stackingOrder = 2447
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/PixelizeHexagonGrid.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2525.9397, 372.49033)
            int ui:nodegraph:node:stackingOrder = 2491
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeHexagonGrid/Multiply_4.outputs:out>
            float inputs:in2 = 0.58
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2142.446, 477.82983)
            int ui:nodegraph:node:stackingOrder = 2511
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-2590.9946, 598.09094)
            int ui:nodegraph:node:stackingOrder = 2508
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/Multiply_5.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-2046.2522, 666.27496)
            int ui:nodegraph:node:stackingOrder = 2462
        }

        def NodeGraph "NearestHex"
        {
            float inputs:s (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (376.5, 634)
                        int stackingOrderInSubgraph = 2405
                    }
                }
            )
            float inputs:s.connect = </Root/PixelizeHexagonGrid/Multiply.outputs:out>
            float2 inputs:st (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (480.28455, 425.82062)
                        int stackingOrderInSubgraph = 2404
                    }
                }
            )
            float2 inputs:st.connect = </Root/PixelizeHexagonGrid/Multiply_1.outputs:out>
            float2 outputs:Add_out.connect = </Root/PixelizeHexagonGrid/NearestHex/Add.outputs:out>
            float2 ui:nodegraph:node:pos = (-1833.4539, 374.1237)
            int ui:nodegraph:node:stackingOrder = 2187
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2623.75, 502.34375)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2404

            def Shader "Multiply_8"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/Separate2_3.outputs:outy>
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/Add_1.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (2112.75, 516.125)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Combine2_3"
            {
                uniform token info:id = "ND_combine2_vector2"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/Multiply_2.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/ConstantFloat.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (1944, 683.5)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.outputs:r>
                float inputs:in2 = 2
                float outputs:out
                float2 ui:nodegraph:node:pos = (1701.75, 519.5)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def NodeGraph "parameters"
            {
                float inputs:s = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (53.20846, 346.2958)
                            int stackingOrderInSubgraph = 2314
                        }
                    }
                )
                float inputs:s.connect = </Root/PixelizeHexagonGrid/NearestHex/ConstantFloat.outputs:out>
                float2 inputs:st = (0, 0) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (460.34033, 20.736065)
                            int stackingOrderInSubgraph = 2314
                        }
                    }
                )
                float2 inputs:st.connect = </Root/PixelizeHexagonGrid/NearestHex.inputs:st>
                float outputs:aSection (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2328
                        }
                    }
                )
                float outputs:aSection.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/MTLFmod_1.outputs:out>
                float2 outputs:coord (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2329
                        }
                    }
                )
                float2 outputs:coord.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Floor.outputs:out>
                float outputs:h (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2330
                        }
                    }
                )
                float outputs:h.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Multiply_2.outputs:out>
                float outputs:m (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2331
                        }
                    }
                )
                float outputs:m.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Divide_2.outputs:out>
                float outputs:r (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2332
                        }
                    }
                )
                float outputs:r.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Multiply_3.outputs:out>
                float2 outputs:sectPxl (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1742.9927, 240.43271)
                            int stackingOrderInSubgraph = 2327
                        }
                    }
                )
                float2 outputs:sectPxl.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/MTLFmod.outputs:out>
                float2 ui:nodegraph:node:pos = (884.5, 440.125)
                int ui:nodegraph:node:stackingOrder = 2402
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Divide_2_out"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2003.5059, 342.50827)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2341

                def Shader "Floor"
                {
                    uniform token info:id = "ND_floor_vector2"
                    float2 inputs:in.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Divide_3.outputs:out>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1154.0979, 35.15648)
                    int ui:nodegraph:node:stackingOrder = 2339
                }

                def Shader "Divide_3"
                {
                    uniform token info:id = "ND_divide_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.inputs:st>
                    float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Combine2_1.outputs:out>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (884.75, 41)
                    int ui:nodegraph:node:stackingOrder = 2312
                }

                def Shader "MTLFmod"
                {
                    uniform token info:id = "ND_MTL_fmod_vector2"
                    float2 inputs:x.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.inputs:st>
                    float2 inputs:y.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Combine2_1.outputs:out>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1316.858, 189.64888)
                    int ui:nodegraph:node:stackingOrder = 2320
                }

                def Shader "Separate2_1"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Floor.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (1390.4624, 17.429993)
                    int ui:nodegraph:node:stackingOrder = 2316
                }

                def Shader "Multiply_3"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.inputs:s>
                    float inputs:in2 = 0.8660254
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (421.8683, 538.8125)
                    int ui:nodegraph:node:stackingOrder = 2332
                }

                def Shader "Multiply_2"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.inputs:s>
                    float inputs:in2 = 0.5
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (927.48096, 365.45093)
                    int ui:nodegraph:node:stackingOrder = 2330
                }

                def Shader "Divide_2"
                {
                    uniform token info:id = "ND_divide_float"
                    float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Multiply_2.outputs:out>
                    float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Multiply_3.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1096.1685, 430.99506)
                    int ui:nodegraph:node:stackingOrder = 2328
                }

                def Shader "Multiply_4"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Multiply_3.outputs:out>
                    float inputs:in2 = 2
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (529.4262, 392.91724)
                    int ui:nodegraph:node:stackingOrder = 2336
                }

                def Shader "Combine2_1"
                {
                    uniform token info:id = "ND_combine2_vector2"
                    float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Multiply_4.outputs:out>
                    float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Multiply_5.outputs:out>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (773.7143, 182.64311)
                    int ui:nodegraph:node:stackingOrder = 2322
                }

                def Shader "Multiply_5"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.inputs:s>
                    float inputs:in2 = 1.5
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (494.75208, 226.00467)
                    int ui:nodegraph:node:stackingOrder = 2324
                }

                def Shader "MTLFmod_1"
                {
                    uniform token info:id = "ND_MTL_fmod_float"
                    float inputs:x.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters/Separate2_1.outputs:outy>
                    float inputs:y = 2
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1652.6405, 74.507996)
                    int ui:nodegraph:node:stackingOrder = 2318
                }
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/Combine2_2.outputs:out>
                float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/Combine2_3.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (2450.25, 502.34375)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "MTLFmod_2"
            {
                uniform token info:id = "ND_MTL_fmod_float"
                float inputs:x.connect = </Root/PixelizeHexagonGrid/NearestHex/Separate2_3.outputs:outy>
                float inputs:y = 2
                float outputs:out
                float2 ui:nodegraph:node:pos = (1701.75, 207.5)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "ConstantFloat"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0
                float inputs:value.connect = </Root/PixelizeHexagonGrid/NearestHex.inputs:s>
                float outputs:out
                float2 ui:nodegraph:node:pos = (624.75, 634)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Add_1"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.outputs:h>
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/ConstantFloat.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1457.25, 599.5)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Multiply_7"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/Separate2_3.outputs:outx>
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/Multiply_2.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1944, 282.25)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Multiply_6"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/MTLFmod_2.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.outputs:r>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1944, 378.25)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Combine2_2"
            {
                uniform token info:id = "ND_combine2_vector2"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/Subtract.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/Multiply_8.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (2281.5, 396.1875)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Separate2_3"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.outputs:coord>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (1457.25, 100.5)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def Shader "Subtract"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/Multiply_7.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/Multiply_6.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (2112.75, 312.25)
                int ui:nodegraph:node:stackingOrder = 2402
            }

            def NodeGraph "switchCoord"
            {
                float inputs:aSection = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1849.3872, 231.44287)
                            int stackingOrderInSubgraph = 2260
                        }
                    }
                )
                float inputs:aSection.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.outputs:aSection>
                float2 inputs:coord = (0, 0) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (85.80215, 655.35046)
                            int stackingOrderInSubgraph = 2351
                        }
                    }
                )
                float2 inputs:coord.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.outputs:coord>
                float inputs:h (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (592.02966, 112.25387)
                            int stackingOrderInSubgraph = 2187
                        }
                    }
                )
                float inputs:h.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.outputs:h>
                float inputs:m (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (332.15002, 159.4427)
                            int stackingOrderInSubgraph = 2186
                        }
                    }
                )
                float inputs:m.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.outputs:m>
                float inputs:r = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1332.3322, 397.74545)
                            int stackingOrderInSubgraph = 2274
                        }
                    }
                )
                float inputs:r.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.outputs:r>
                float2 inputs:sectPxl (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (83.25, 306)
                            int stackingOrderInSubgraph = 2157
                        }
                    }
                )
                float2 inputs:sectPxl.connect = </Root/PixelizeHexagonGrid/NearestHex/parameters.outputs:sectPxl>
                float2 outputs:coord (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1502.1317, 255.82796)
                            int stackingOrderInSubgraph = 2154
                        }
                    }
                )
                float2 outputs:coord.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/IfGreater.outputs:out>
                float2 ui:nodegraph:node:pos = (1184.5, 100.5)
                int ui:nodegraph:node:stackingOrder = 2402
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:IfGreater_out", "inputs:Multiply_9_in2"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2293.6987, 353.12668)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2258

                def Shader "Separate2_2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:sectPxl>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (371.08655, 355.63242)
                    int ui:nodegraph:node:stackingOrder = 2354
                }

                def Shader "Subtract_1"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:h>
                    float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Multiply_9.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (786.8735, 138.56537)
                    int ui:nodegraph:node:stackingOrder = 2359
                }

                def Shader "IfGreater_2"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Add_1.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/IfGreater_3.outputs:out>
                    float inputs:value1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Subtract_1.outputs:out>
                    float inputs:value2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Separate2_2.outputs:outy>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1585.4158, 35.144154)
                    int ui:nodegraph:node:stackingOrder = 2282
                }

                def Shader "IfGreater_3"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Add.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:coord>
                    float inputs:value1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Multiply_10.outputs:out>
                    float inputs:value2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Separate2_2.outputs:outy>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1358.8378, 226.9581)
                    int ui:nodegraph:node:stackingOrder = 2284
                }

                def Shader "IfGreater"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/IfGreater_2.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/IfGreater_1.outputs:out>
                    float inputs:value1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:aSection>
                    float inputs:value2
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (2036.1295, 318.75)
                    int ui:nodegraph:node:stackingOrder = 2258
                }

                def Shader "IfGreater_1"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/IfGreater_4.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/IfGreater_5.outputs:out>
                    float inputs:value1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Separate2_2.outputs:outx>
                    float inputs:value2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:r>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1571.6974, 485.70325)
                    int ui:nodegraph:node:stackingOrder = 2267
                }

                def Shader "Multiply_10"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Subtract_1.outputs:out>
                    float inputs:in2 = -1
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (956.38947, 161.19713)
                    int ui:nodegraph:node:stackingOrder = 2356
                }

                def Shader "Add_1"
                {
                    uniform token info:id = "ND_add_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:coord>
                    float2 inputs:in2 = (-1, -1)
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (434.95502, 629.95435)
                    int ui:nodegraph:node:stackingOrder = 2351
                }

                def Shader "Multiply_9"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:m>
                    float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Separate2_2.outputs:outx>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (559.6107, 188.11407)
                    int ui:nodegraph:node:stackingOrder = 2185
                }

                def Shader "Add"
                {
                    uniform token info:id = "ND_add_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:coord>
                    float2 inputs:in2 = (0, -1)
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (527.7947, 678.5523)
                    int ui:nodegraph:node:stackingOrder = 2351
                }

                def Shader "Add_2"
                {
                    uniform token info:id = "ND_add_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:coord>
                    float2 inputs:in2 = (-1, 0)
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (443.5784, 764.74615)
                    int ui:nodegraph:node:stackingOrder = 2351
                }

                def Shader "IfGreater_4"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Add.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:coord>
                    float inputs:value1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Add_3.outputs:out>
                    float inputs:value2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Separate2_2.outputs:outy>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1231.0508, 533.1203)
                    int ui:nodegraph:node:stackingOrder = 2276
                }

                def Shader "IfGreater_5"
                {
                    uniform token info:id = "ND_ifgreater_vector2"
                    float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Add.outputs:out>
                    float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Add_2.outputs:out>
                    float inputs:value1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Multiply_9.outputs:out>
                    float inputs:value2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Separate2_2.outputs:outy>
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (1216.7325, 714.4874)
                    int ui:nodegraph:node:stackingOrder = 2269
                }

                def Shader "Add_3"
                {
                    uniform token info:id = "ND_add_float"
                    float inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord/Subtract_1.outputs:out>
                    float inputs:in2.connect = </Root/PixelizeHexagonGrid/NearestHex/switchCoord.inputs:h>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1061.7566, 460.2253)
                    int ui:nodegraph:node:stackingOrder = 2286
                }
            }
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/PixelizeHexagonGrid/TiledImage.outputs:out>
            float inputs:in2.connect = </Root/PixelizeHexagonGrid/Oneminus.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-706.5033, 523.37085)
            int ui:nodegraph:node:stackingOrder = 2271
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/PixelizeHexagonGrid/SmoothStep.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-863.3893, 548.6841)
            int ui:nodegraph:node:stackingOrder = 2352
        }

        def Shader "SmoothStep"
        {
            uniform token info:id = "ND_smoothstep_float"
            float inputs:high.connect = </Root/PixelizeHexagonGrid/Multiply.outputs:out>
            float inputs:in.connect = </Root/PixelizeHexagonGrid/Multiply_3.outputs:out>
            float inputs:low = 0.003
            float inputs:low.connect = </Root/PixelizeHexagonGrid/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1068.4337, 765.39813)
            int ui:nodegraph:node:stackingOrder = 2392
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeHexagonGrid.inputs:GirdWidth>
            float inputs:in2 = 0.1
            float inputs:in2.connect = </Root/PixelizeHexagonGrid/HexDist.outputs:Output>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1253.5802, 632.1606)
            int ui:nodegraph:node:stackingOrder = 2388
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/PixelizeHexagonGrid/Multiply.outputs:out>
            float inputs:in2 = 0.8
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1300.901, 691.9625)
            int ui:nodegraph:node:stackingOrder = 2394
        }

        def NodeGraph "HexDist"
        {
            float2 inputs:a = (0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (77.5, 96.233055)
                    }
                }
            )
            float2 inputs:a.connect = </Root/PixelizeHexagonGrid/Multiply_1.outputs:out>
            float2 inputs:b = (0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (76.29612, -9.711812)
                    }
                }
            )
            float2 inputs:b.connect = </Root/PixelizeHexagonGrid/NearestHex.outputs:Add_out>
            float outputs:Output (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1236.946, 246.0957)
                        int stackingOrderInSubgraph = 2430
                    }
                }
            )
            float outputs:Output.connect = </Root/PixelizeHexagonGrid/HexDist/Divide_3.outputs:out>
            float2 ui:nodegraph:node:pos = (-1579.6339, 525.55853)
            int ui:nodegraph:node:stackingOrder = 2494
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1309.4365, 161.97766)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2431

            def Shader "Multiply_4"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/HexDist/Separate2_1.outputs:outx>
                float inputs:in2 = 0.5
                float outputs:out
                float2 ui:nodegraph:node:pos = (758, 18)
                int ui:nodegraph:node:stackingOrder = 2429
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/HexDist/Multiply_4.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/HexDist/Multiply_5.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (874.75, 48)
                int ui:nodegraph:node:stackingOrder = 2429
            }

            def Shader "Multiply_5"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/HexDist/Separate2_1.outputs:outy>
                float inputs:in2 = 0.8660254
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/HexDist/c.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (758, 114)
                int ui:nodegraph:node:stackingOrder = 2429
            }

            def Shader "Max"
            {
                uniform token info:id = "ND_max_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/HexDist/Add.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/HexDist/Separate2_1.outputs:outx>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1020, 106)
                int ui:nodegraph:node:stackingOrder = 2429
            }

            def Shader "Subtract_1"
            {
                uniform token info:id = "ND_subtract_vector2"
                float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/HexDist.inputs:b>
                float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/HexDist.inputs:a>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (243.75, 45.5)
                int ui:nodegraph:node:stackingOrder = 2429
            }

            def Shader "c"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0.8660254
                float outputs:out
                float2 ui:nodegraph:node:pos = (589.25, 236)
                int ui:nodegraph:node:stackingOrder = 2429
            }

            def Shader "Abs"
            {
                uniform token info:id = "ND_absval_vector2"
                float2 inputs:in.connect = </Root/PixelizeHexagonGrid/HexDist/Subtract_1.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (390.5, 45.5)
                int ui:nodegraph:node:stackingOrder = 2429
            }

            def Shader "Divide_3"
            {
                uniform token info:id = "ND_divide_float"
                float inputs:in1.connect = </Root/PixelizeHexagonGrid/HexDist/Max.outputs:out>
                float inputs:in2.connect = </Root/PixelizeHexagonGrid/HexDist/c.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1165.25, 168.5)
                int ui:nodegraph:node:stackingOrder = 2429
            }

            def Shader "Separate2_1"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/PixelizeHexagonGrid/HexDist/Abs.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (589.25, 45.5)
                int ui:nodegraph:node:stackingOrder = 2429
            }
        }

        def Shader "ScreenParams"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 1000
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2618.589, 492.90417)
            int ui:nodegraph:node:stackingOrder = 2506
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeHexagonGrid/Divide_1.outputs:out>
            float inputs:in2.connect = </Root/PixelizeHexagonGrid/ScreenParams.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-2402.2192, 400.2407)
            int ui:nodegraph:node:stackingOrder = 2402
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/TextureCoordinates.outputs:out>
            float inputs:in2.connect = </Root/PixelizeHexagonGrid/ScreenParams.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-2325.6475, 619.62616)
            int ui:nodegraph:node:stackingOrder = 2504
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_vector3"
            float3 inputs:default
            asset inputs:file.connect = </Root/PixelizeHexagonGrid.inputs:Image>
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            float2 inputs:texcoord.connect = </Root/PixelizeHexagonGrid/Divide_2.outputs:out>
            float2 inputs:uvoffset.connect = </Root/PixelizeHexagonGrid.inputs:UVOffset>
            float2 inputs:uvtiling = (1, 1)
            float2 inputs:uvtiling.connect = </Root/PixelizeHexagonGrid.inputs:UVTilling>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-870.1513, 362.62518)
            int ui:nodegraph:node:stackingOrder = 2451
        }

        def Shader "Multiply_6"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/Combine2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeHexagonGrid/ScreenParams.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-2081.8782, 567.42126)
            int ui:nodegraph:node:stackingOrder = 2460
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_vector2"
            prepend float2 inputs:in1.connect = </Root/PixelizeHexagonGrid/NearestHex.outputs:Add_out>
            float2 inputs:in2.connect = </Root/PixelizeHexagonGrid/Multiply_6.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1309.1398, 363.65613)
            int ui:nodegraph:node:stackingOrder = 2499
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in = (1, 1)
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-2549.5696, 675.7449)
            int ui:nodegraph:node:stackingOrder = 2515
        }
    }
}

