#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Cube", "PixelizeCircle", "PixelizeDiamond", "PixelizeHexagon", "PixelizeHexagonGrid", "PixelizeLeaf", "PixelizeLed", "PixelizeQuad", "PixelizeSector", "PixelizeTriangle"]
    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube/Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2

        def Material "Material"
        {
            reorder nameChildren = ["PixelizeLed_1", "PixelizeLeaf_1", "PreviewSurface", "PixelizeDiamond_1", "PixelizeCircle_1", "PixelizeSector_1", "PixelizeTriangle_1", "Convert", "Time", "Sin", "Remap", "PixelizeQuad_1"]
            token outputs:mtlx:surface.connect = </Root/Cube/Material/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube/Material/Convert.outputs:out>
                float inputs:metallic
                float inputs:opacity = 1
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
                int ui:nodegraph:node:stackingOrder = 20
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def "PixelizeCircle_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeCircle>
            )
            {
                float3 inputs:BackgroundColor = (0, 0, 0)
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount.connect = None
                float2 ui:nodegraph:node:pos = (-510.028, -265.6986)
                int ui:nodegraph:node:stackingOrder = 71
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </Root/Cube/Material/PixelizeTriangle_1.outputs:Output>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-138.28125, 132.6914)
                int ui:nodegraph:node:stackingOrder = 5
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-939.79297, 98.48828)
                int ui:nodegraph:node:stackingOrder = 26
            }

            def Shader "Sin"
            {
                uniform token info:id = "ND_sin_float"
                float inputs:in.connect = </Root/Cube/Material/Time.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-800.22266, 96.96875)
                int ui:nodegraph:node:stackingOrder = 30
            }

            def Shader "Remap"
            {
                uniform token info:id = "ND_remap_float"
                float inputs:in.connect = </Root/Cube/Material/Sin.outputs:out>
                float inputs:inlow = -1
                float inputs:outhigh = 30
                float inputs:outlow = 1
                float outputs:out
                float2 ui:nodegraph:node:pos = (-662.9844, 97.80078)
                int ui:nodegraph:node:stackingOrder = 34
            }

            def "PixelizeDiamond_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeDiamond>
            )
            {
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount = 5
                float2 ui:nodegraph:node:pos = (-280.00632, -296.74954)
                int ui:nodegraph:node:stackingOrder = 73
            }

            def "PixelizeLeaf_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeLeaf>
            )
            {
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount = 5
                float inputs:PixelRatio
                float2 inputs:PixelScale
                float2 ui:nodegraph:node:pos = (-84.96924, -269.81573)
                int ui:nodegraph:node:stackingOrder = 84
            }

            def "PixelizeLed_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeLed>
            )
            {
                float3 inputs:BackgroundColor
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:LedRadius
                float inputs:PixelCount
                float inputs:PixelRatio
                float2 ui:nodegraph:node:pos = (144.18701, -280.32996)
                int ui:nodegraph:node:stackingOrder = 89
            }

            def "PixelizeQuad_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeQuad>
            )
            {
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount.connect = None
                float inputs:PixelRatio
                float2 inputs:PixelScale
                float2 ui:nodegraph:node:pos = (392.0463, -240.84514)
                int ui:nodegraph:node:stackingOrder = 96
            }

            def "PixelizeSector_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeSector>
            )
            {
                float3 inputs:BackgroundColor
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount.connect = None
                float2 inputs:PixelInterval = (1, 1)
                float inputs:PixelRadius = 0.8
                float inputs:PixelRatio.connect = None
                float2 ui:nodegraph:node:pos = (-843.787, -271.6611)
                int ui:nodegraph:node:stackingOrder = 110
            }

            def "PixelizeTriangle_1" (
                active = true
                instanceable = true
                references = </Root/PixelizeTriangle>
            )
            {
                asset inputs:Image = @../Texture/number.jpeg@
                float inputs:PixelCount
                float inputs:PixelRatio
                float2 inputs:PixelScale
                float2 ui:nodegraph:node:pos = (-359.98538, 106.7254)
                int ui:nodegraph:node:stackingOrder = 116
            }
        }
    }

    def NodeGraph "PixelizeCircle" (
        active = true
    )
    {
        float3 inputs:BackgroundColor = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-197.70772, -153.50185)
                    int stackingOrderInSubgraph = 376
                }
            }
        )
        float inputs:CircleRadius = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-365.2132, -209.1623)
                    int stackingOrderInSubgraph = 378
                }
            }
        )
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-467.02206, -77.68977)
                    int stackingOrderInSubgraph = 331
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1681.9808, -34.320675)
                    int stackingOrderInSubgraph = 508
                }
            }
        )
        float2 inputs:PixelInterval = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1451.3503, -178.21904)
                    int stackingOrderInSubgraph = 425
                }
            }
        )
        float inputs:Ratio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1925.494, 23.403915)
                    int stackingOrderInSubgraph = 486
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-462, 96.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeCircle/IfGreater.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (381.7236, 88.6454)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 282

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/PixelizeCircle.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1389.2489, -83.7565)
            int ui:nodegraph:node:stackingOrder = 489
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeCircle.inputs:PixelInterval>
            float inputs:in2.connect = </Root/PixelizeCircle/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1309.6686, -142.90181)
            int ui:nodegraph:node:stackingOrder = 429
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1837.3531, -377.26346)
            int ui:nodegraph:node:stackingOrder = 503
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeCircle/Combine2_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeCircle/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1169.0352, -324.26917)
            int ui:nodegraph:node:stackingOrder = 484
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeCircle.inputs:PixelInterval>
            float2 inputs:in2.connect = </Root/PixelizeCircle/Floor.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1027.458, -249.527)
            int ui:nodegraph:node:stackingOrder = 477
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeCircle/Add.outputs:out>
            float inputs:in2.connect = </Root/PixelizeCircle/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-861.6402, -236.1324)
            int ui:nodegraph:node:stackingOrder = 464
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeCircle/Multiply_2.outputs:out>
            float inputs:in2 = 0.5
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-949.7144, -243.90584)
            int ui:nodegraph:node:stackingOrder = 464
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeCircle.inputs:PixelCount>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1156.6172, -50.5028)
            int ui:nodegraph:node:stackingOrder = 515
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/PixelizeCircle/Combine2_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeCircle/Multiply_3.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-787.5998, -358.88672)
            int ui:nodegraph:node:stackingOrder = 360
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/PixelizeCircle/Subtract_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-651.26385, -348.80984)
            int ui:nodegraph:node:stackingOrder = 360
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeCircle/Magnitude.outputs:out>
            float inputs:in2.connect = </Root/PixelizeCircle/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-525.9083, -266.15533)
            int ui:nodegraph:node:stackingOrder = 499
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeCircle/Multiply_3.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-798.4453, 7.566724)
            int ui:nodegraph:node:stackingOrder = 331
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeCircle/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeCircle.inputs:Ratio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-642.0747, -22.8361)
            int ui:nodegraph:node:stackingOrder = 331
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeCircle/Multiply_5.outputs:out>
            float inputs:in2.connect = </Root/PixelizeCircle/Separate2.outputs:outy>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-509.54565, 0.8068743)
            int ui:nodegraph:node:stackingOrder = 331
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_vector3"
            float3 inputs:in1.connect = </Root/PixelizeCircle.inputs:BackgroundColor>
            float3 inputs:in2.connect = </Root/PixelizeCircle/Image.outputs:out>
            prepend float inputs:value1.connect = </Root/PixelizeCircle/Multiply_4.outputs:out>
            prepend float inputs:value2.connect = </Root/PixelizeCircle.inputs:CircleRadius>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (102.194786, -205.86536)
            int ui:nodegraph:node:stackingOrder = 374
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_vector3"
            prepend asset inputs:file.connect = </Root/PixelizeCircle.inputs:Image>
            string inputs:filtertype
            prepend float2 inputs:texcoord.connect = </Root/PixelizeCircle/Combine2.outputs:out>
            string inputs:uaddressmode
            string inputs:vaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-249.83722, 23.032972)
            int ui:nodegraph:node:stackingOrder = 331
        }

        def Shader "Separate2_1"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeCircle/TextureCoordinates.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-1613.4338, -399.48862)
            int ui:nodegraph:node:stackingOrder = 501
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeCircle/Divide_2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeCircle/Separate2_1.outputs:outy>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1313.4886, -395.40186)
            int ui:nodegraph:node:stackingOrder = 481
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeCircle/Separate2_1.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeCircle.inputs:Ratio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1442.4763, -424.25522)
            int ui:nodegraph:node:stackingOrder = 420
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeCircle/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1104.0813, -168.98077)
            int ui:nodegraph:node:stackingOrder = 475
        }
    }

    def NodeGraph "PixelizeDiamond" (
        active = true
    )
    {
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-84.80078, -139.77344)
                    int stackingOrderInSubgraph = 100
                }
            }
        )
        float inputs:PixelCount = 10 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1435.8506, 404.66702)
                    int stackingOrderInSubgraph = 667
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-248, 112.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeDiamond/Image.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (391.2461, 16.066406)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 97

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1453.6289, -116.484375)
            int ui:nodegraph:node:stackingOrder = 154
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/TextureCoordinates.outputs:out>
            float inputs:in2.connect = </Root/PixelizeDiamond.inputs:PixelCount>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1293.8047, -68.31641)
            int ui:nodegraph:node:stackingOrder = 154
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeDiamond/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1144.4349, -190.43498)
            int ui:nodegraph:node:stackingOrder = 561
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Switch.outputs:out>
            float inputs:in2.connect = </Root/PixelizeDiamond.inputs:PixelCount>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-116.85222, 58.174717)
            int ui:nodegraph:node:stackingOrder = 665
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_vector3"
            prepend asset inputs:file.connect = </Root/PixelizeDiamond.inputs:Image>
            string inputs:filtertype
            prepend float2 inputs:texcoord.connect = </Root/PixelizeDiamond/Divide_1.outputs:out>
            string inputs:uaddressmode
            string inputs:vaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (136.95312, -68.12891)
            int ui:nodegraph:node:stackingOrder = 98
        }

        def Shader "Fractional"
        {
            uniform token info:id = "ND_realitykit_fractional_vector2"
            float2 inputs:in.connect = </Root/PixelizeDiamond/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1088.1628, 68.772415)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/ConstantFloat2.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeDiamond/Fractional.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-845.0926, -10.497116)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "ConstantFloat2"
        {
            uniform token info:id = "ND_constant_vector2"
            float2 inputs:value = (1, 1)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1097.3113, -0.977585)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 1
            float inputs:in2
            float inputs:value1.connect = </Root/PixelizeDiamond/DotProduct.outputs:out>
            float inputs:value2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-678.7762, -11.872116)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "DotProduct_1"
        {
            uniform token info:id = "ND_dotproduct_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Fractional.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeDiamond/ConstantFloat2_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-854.2098, 145.37398)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "ConstantFloat2_1"
        {
            uniform token info:id = "ND_constant_vector2"
            float2 inputs:value = (1, -1)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1066.6707, 167.8896)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "IfGreater_1"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1 = 1
            float inputs:in2
            float inputs:value1.connect = </Root/PixelizeDiamond/DotProduct_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-681.9129, 162.21773)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeDiamond/IfGreater_1.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-553.81134, 222.9482)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/PixelizeDiamond/IfGreater.outputs:out>
            float inputs:in2.connect = </Root/PixelizeDiamond/Multiply_1.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-474.01053, 114.69429)
            int ui:nodegraph:node:stackingOrder = 659
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Floor.outputs:out>
            float2 inputs:in2 = (0, 0.5)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-939.831, -281.00912)
            int ui:nodegraph:node:stackingOrder = 598
        }

        def Shader "Add_2"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Floor.outputs:out>
            float2 inputs:in2 = (0.5, 1)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-940.54974, -235.8724)
            int ui:nodegraph:node:stackingOrder = 598
        }

        def Shader "Add_3"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Floor.outputs:out>
            float2 inputs:in2 = (0.5, 0)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-944.79193, -191.06381)
            int ui:nodegraph:node:stackingOrder = 598
        }

        def Shader "Add_4"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Floor.outputs:out>
            float2 inputs:in2 = (1, 0.5)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-942.91693, -146.46616)
            int ui:nodegraph:node:stackingOrder = 598
        }

        def Shader "Switch"
        {
            uniform token info:id = "ND_switch_vector2"
            float2 inputs:in1.connect = </Root/PixelizeDiamond/Add_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeDiamond/Add_2.outputs:out>
            float2 inputs:in3.connect = </Root/PixelizeDiamond/Add_3.outputs:out>
            float2 inputs:in4.connect = </Root/PixelizeDiamond/Add_4.outputs:out>
            float2 inputs:in5
            float2 inputs:in6
            float2 inputs:in7
            float2 inputs:in8
            float2 inputs:in9
            float2 inputs:in10
            float inputs:which = 0
            float inputs:which.connect = </Root/PixelizeDiamond/Add.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-311.7614, -196.18736)
            int ui:nodegraph:node:stackingOrder = 662
        }
    }

    def NodeGraph "PixelizeHexagon" (
        active = true
    )
    {
        float2 ui:nodegraph:node:pos = (4, 91.5)
        int ui:nodegraph:node:stackingOrder = 1
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)
    }

    def NodeGraph "PixelizeHexagonGrid" (
        active = true
    )
    {
        float2 ui:nodegraph:node:pos = (24, 111.5)
        int ui:nodegraph:node:stackingOrder = 2
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 87.5)
    }

    def NodeGraph "PixelizeLeaf" (
        active = true
    )
    {
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (868.03424, -168.99907)
                    int stackingOrderInSubgraph = 900
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-940.74994, 40.40548)
                    int stackingOrderInSubgraph = 321
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-928.1919, -68.77628)
                    int stackingOrderInSubgraph = 140
                }
            }
        )
        float2 inputs:PixelScale = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1126.2802, -171.29576)
                    int stackingOrderInSubgraph = 907
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeLeaf/Image.outputs:out>
        float2 ui:nodegraph:node:pos = (44, 131.5)
        int ui:nodegraph:node:stackingOrder = 3
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1378.7877, -14.908359)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 902

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeLeaf.inputs:PixelCount>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-738.42755, 43.336304)
            int ui:nodegraph:node:stackingOrder = 905
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeLeaf.inputs:PixelScale>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-935.4303, -154.62096)
            int ui:nodegraph:node:stackingOrder = 909
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeLeaf/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeLeaf/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-635.0144, -145.60219)
            int ui:nodegraph:node:stackingOrder = 136
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeLeaf/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/PixelizeLeaf.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-766.0324, -122.92994)
            int ui:nodegraph:node:stackingOrder = 138
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeLeaf/Combine2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLeaf/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-494.86682, -98.2151)
            int ui:nodegraph:node:stackingOrder = 186
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-643.1787, -297.69128)
            int ui:nodegraph:node:stackingOrder = 603
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLeaf/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLeaf/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-462.96643, -232.2204)
            int ui:nodegraph:node:stackingOrder = 608
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeLeaf/Multiply_3.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-366.53748, -161.15366)
            int ui:nodegraph:node:stackingOrder = 887
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLeaf/Floor.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLeaf/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-257.35934, -111.915665)
            int ui:nodegraph:node:stackingOrder = 891
        }

        def Shader "Subtract_1"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLeaf/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLeaf/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-162.36195, -175.9872)
            int ui:nodegraph:node:stackingOrder = 889
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "pixelScale"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_2"]
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLeaf/Subtract_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLeaf/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-84.840065, 21.706907)
            int ui:nodegraph:node:stackingOrder = 867
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_vector3"
            float3 inputs:default
            prepend asset inputs:file.connect = </Root/PixelizeLeaf.inputs:Image>
            float2 inputs:texcoord.connect = </Root/PixelizeLeaf/Add.outputs:out>
            string inputs:uaddressmode
            string inputs:vaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1134.0735, -90.82836)
            int ui:nodegraph:node:stackingOrder = 898
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLeaf/Divide_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLeaf/Combine2_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (814.3948, -58.722107)
            int ui:nodegraph:node:stackingOrder = 896
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeLeaf/Divide_3.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLeaf/Divide_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (700.079, 132.90146)
            int ui:nodegraph:node:stackingOrder = 883
        }

        def Shader "Separate2_1"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeLeaf/Multiply_4.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (60.06498, 39.386322)
            int ui:nodegraph:node:stackingOrder = 869
        }

        def Shader "Step"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/PixelizeLeaf/Separate2_1.outputs:outx>
            float inputs:in.connect = </Root/PixelizeLeaf/Separate2_1.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (393.9468, 166.16061)
            int ui:nodegraph:node:stackingOrder = 879
        }

        def Shader "Separate2_2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeLeaf/Multiply_2.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-343.13046, 181.56201)
            int ui:nodegraph:node:stackingOrder = 732
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeLeaf/Step.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLeaf/Separate2_2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (533.3738, 249.6969)
            int ui:nodegraph:node:stackingOrder = 881
        }

        def Shader "Step_1"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/PixelizeLeaf/Oneminus.outputs:out>
            float inputs:in.connect = </Root/PixelizeLeaf/Separate2_1.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (406.43127, -5.4527726)
            int ui:nodegraph:node:stackingOrder = 873
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/PixelizeLeaf/Separate2_1.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (281.90082, 39.226196)
            int ui:nodegraph:node:stackingOrder = 875
        }

        def Shader "Divide_3"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeLeaf/Step_1.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLeaf/Separate2_2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (548.83466, 56.85779)
            int ui:nodegraph:node:stackingOrder = 877
        }
    }

    def NodeGraph "PixelizeLed" (
        active = true
    )
    {
        float3 inputs:BackgroundColor = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (17.027899, 258.93628)
                    int stackingOrderInSubgraph = 494
                }
            }
        )
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-581.0807, -294.72153)
                    int stackingOrderInSubgraph = 388
                }
            }
        )
        float inputs:LedRadius = 0.9 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-400.3724, 127.25848)
                    int stackingOrderInSubgraph = 436
                }
            }
        )
        float inputs:PixelCount = 10 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1390.9258, -61.07772)
                    int stackingOrderInSubgraph = 41
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1402.6318, 17.963947)
                    int stackingOrderInSubgraph = 126
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeLed/Add_1.outputs:out>
        float2 ui:nodegraph:node:pos = (64, 151.5)
        int ui:nodegraph:node:stackingOrder = 4
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (674.53674, -130.9903)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 432

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/PixelizeLed.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1239.2692, -191.17026)
            int ui:nodegraph:node:stackingOrder = 393
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1532.7992, -202.95773)
            int ui:nodegraph:node:stackingOrder = 401
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeLed/Divide.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1161.4911, -158.57927)
            int ui:nodegraph:node:stackingOrder = 391
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeLed/Divide.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1006.9691, -223.04866)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLed/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLed/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-869.4617, -265.98395)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeLed/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-747.2427, -246.44095)
            int ui:nodegraph:node:stackingOrder = 388
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLed/Floor.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLed/Combine2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-597.27313, -223.7701)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_vector3"
            prepend asset inputs:file.connect = </Root/PixelizeLed.inputs:Image>
            string inputs:filtertype
            prepend float2 inputs:texcoord.connect = </Root/PixelizeLed/Multiply_1.outputs:out>
            string inputs:uaddressmode
            string inputs:vaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-374.08163, -237.42543)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeLed/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeLed/Combine2_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-928.0056, -27.27913)
            int ui:nodegraph:node:stackingOrder = 399
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeLed.inputs:PixelCount>
            float inputs:in2.connect = </Root/PixelizeLed/Divide_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1069.5195, -8.658884)
            int ui:nodegraph:node:stackingOrder = 396
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeLed.inputs:PixelCount>
            float inputs:in2.connect = </Root/PixelizeLed.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1222.7656, 17.804148)
            int ui:nodegraph:node:stackingOrder = 163
        }

        def Shader "MTLSinpi"
        {
            uniform token info:id = "ND_MTL_sinpi_vector2"
            float2 inputs:x.connect = </Root/PixelizeLed/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-774.91846, -30.309298)
            int ui:nodegraph:node:stackingOrder = 405
        }

        def Shader "Abs"
        {
            uniform token info:id = "ND_absval_vector2"
            float2 inputs:in.connect = </Root/PixelizeLed/MTLSinpi.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-631.9341, 4.130202)
            int ui:nodegraph:node:stackingOrder = 421
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeLed/Abs.outputs:out>
            float inputs:in2 = 1.5
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-526.3684, 14.990421)
            int ui:nodegraph:node:stackingOrder = 423
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeLed/Multiply_3.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-405.56918, 15.703405)
            int ui:nodegraph:node:stackingOrder = 425
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeLed/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeLed/Separate2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-273.53412, 19.051863)
            int ui:nodegraph:node:stackingOrder = 437
        }

        def Shader "Step"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/PixelizeLed/Multiply_4.outputs:out>
            float inputs:in.connect = </Root/PixelizeLed.inputs:LedRadius>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-158.68175, 139.508)
            int ui:nodegraph:node:stackingOrder = 458
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "ledValue"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_4"]
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/PixelizeLed/Step.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-154.34717, 22.313189)
            int ui:nodegraph:node:stackingOrder = 470
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/PixelizeLed/Image.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed/Oneminus.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (28.971014, -11.052842)
            int ui:nodegraph:node:stackingOrder = 481
        }

        def Shader "Multiply_6"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/PixelizeLed/Image.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed/Multiply_4.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-86.52807, -128.51024)
            int ui:nodegraph:node:stackingOrder = 479
        }

        def Shader "Multiply_7"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/PixelizeLed/Multiply_6.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed/Step.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (19.751995, -116.21269)
            int ui:nodegraph:node:stackingOrder = 477
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector3"
            float3 inputs:in1.connect = </Root/PixelizeLed/Multiply_7.outputs:out>
            float3 inputs:in2.connect = </Root/PixelizeLed/Multiply_5.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (146.74373, -113.723305)
            int ui:nodegraph:node:stackingOrder = 473
        }

        def Shader "Multiply_8"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeLed/Oneminus.outputs:out>
            float inputs:in2.connect = </Root/PixelizeLed/Step.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (65.82218, 124.27833)
            int ui:nodegraph:node:stackingOrder = 485
        }

        def Shader "Multiply_9"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            prepend float3 inputs:in1.connect = </Root/PixelizeLed.inputs:BackgroundColor>
            float inputs:in2.connect = </Root/PixelizeLed/Multiply_8.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (181.30469, 70.308495)
            int ui:nodegraph:node:stackingOrder = 489
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector3"
            float3 inputs:in1.connect = </Root/PixelizeLed/Add.outputs:out>
            float3 inputs:in2.connect = </Root/PixelizeLed/Multiply_9.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (400.65253, -0.8297776)
            int ui:nodegraph:node:stackingOrder = 490
        }
    }

    def NodeGraph "PixelizeQuad" (
        active = true
    )
    {
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-403.0122, -100.95342)
                    int stackingOrderInSubgraph = 151
                }
            }
        )
        float inputs:PixelCount = 10 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1208.582, 137.43242)
                    int stackingOrderInSubgraph = 298
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1557.0399, 138.32213)
                    int stackingOrderInSubgraph = 298
                }
            }
        )
        float2 inputs:PixelScale = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1542.4117, 15.474088)
                    int stackingOrderInSubgraph = 298
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeQuad/Image.outputs:out>
        float2 ui:nodegraph:node:pos = (84, 171.5)
        int ui:nodegraph:node:stackingOrder = 5
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (94.04297, 28.9375)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 13

        def Shader "Image"
        {
            uniform token info:id = "ND_image_vector3"
            float3 inputs:default
            prepend asset inputs:file.connect = </Root/PixelizeQuad.inputs:Image>
            string inputs:filtertype
            float2 inputs:texcoord.connect = </Root/PixelizeQuad/Multiply_2.outputs:out>
            string inputs:uaddressmode
            string inputs:vaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-197.83594, -24.996094)
            int ui:nodegraph:node:stackingOrder = 11
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/PixelizeQuad.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1057.3281, 127.5496)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeQuad/Combine2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeQuad/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-938.4375, 78.60429)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeQuad.inputs:PixelScale>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-1335.2263, 22.53138)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeQuad/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/PixelizeQuad.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1186.0422, 44.773872)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeQuad/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeQuad/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1065.6007, 22.840584)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1117.7688, -113.89463)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeQuad/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeQuad/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-864.18146, -29.253517)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeQuad/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-733.1463, -19.190954)
            int ui:nodegraph:node:stackingOrder = 298
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeQuad/Floor.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeQuad/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-597.5874, -0.44379866)
            int ui:nodegraph:node:stackingOrder = 298
        }
    }

    def NodeGraph "PixelizeSector" (
        active = true
    )
    {
        float3 inputs:BackgroundColor = (0, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (655.0577, 160.80794)
                    int stackingOrderInSubgraph = 294
                }
            }
        )
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (852.17255, -219.9219)
                    int stackingOrderInSubgraph = 282
                }
            }
        )
        float inputs:PixelCount = 10 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-251.84314, 72.49574)
                    int stackingOrderInSubgraph = 246
                }
            }
        )
        float2 inputs:PixelInterval = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-83.36689, -41.455418)
                    int stackingOrderInSubgraph = 388
                }
            }
        )
        float inputs:PixelRadius = 0.8 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (616.53796, 75.77443)
                    int stackingOrderInSubgraph = 294
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-312.32425, -59.500732)
                    int stackingOrderInSubgraph = 388
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-16, 71.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeSector/IfGreater.outputs:out>
        float2 ui:nodegraph:node:pos = (104, 191.5)
        int ui:nodegraph:node:stackingOrder = 6
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1563.8105, 74.02476)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 159

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-566.40625, -158.70703)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeSector/TextureCoordinates.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-287.32812, -159.39844)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeSector/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/PixelizeSector.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-155.0625, -133.47266)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeSector/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeSector/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-22.597656, -173.5664)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1 = 1
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/PixelizeSector.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-56.864933, 27.017424)
            int ui:nodegraph:node:stackingOrder = 232
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeSector.inputs:PixelInterval>
            prepend float inputs:in2.connect = </Root/PixelizeSector/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (107.5974, -70.82184)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeSector/Combine2.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeSector/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (161.9927, -191.47923)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeSector/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (274.60715, -187.393)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeSector/Floor.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeSector/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (388.72775, -173.83527)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/PixelizeSector/Combine2.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeSector/Multiply_2.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (395.55084, -11.816192)
            int ui:nodegraph:node:stackingOrder = 246
        }

        def Shader "Magnitude"
        {
            uniform token info:id = "ND_magnitude_vector2"
            float2 inputs:in.connect = </Root/PixelizeSector/Subtract.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (536.5529, -11.448449)
            int ui:nodegraph:node:stackingOrder = 248
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeSector/Magnitude.outputs:out>
            float inputs:in2.connect = </Root/PixelizeSector.inputs:PixelCount>
            float outputs:out
            float2 ui:nodegraph:node:pos = (664.8735, 10.871515)
            int ui:nodegraph:node:stackingOrder = 250
        }

        def Shader "Separate2_1"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeSector/Multiply_2.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (543.9731, -191.12343)
            int ui:nodegraph:node:stackingOrder = 388
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/PixelizeSector/Separate2_1.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeSector.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (700.5036, -160.05458)
            int ui:nodegraph:node:stackingOrder = 278
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeSector/Multiply_4.outputs:out>
            float inputs:in2.connect = </Root/PixelizeSector/Separate2_1.outputs:outy>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (811.7121, -91.81344)
            int ui:nodegraph:node:stackingOrder = 276
        }

        def Shader "IfGreater"
        {
            uniform token info:id = "ND_ifgreater_vector3"
            float3 inputs:in1.connect = </Root/PixelizeSector.inputs:BackgroundColor>
            float3 inputs:in2.connect = </Root/PixelizeSector/Image.outputs:out>
            prepend float inputs:value1.connect = </Root/PixelizeSector/Multiply_3.outputs:out>
            prepend float inputs:value2.connect = </Root/PixelizeSector.inputs:PixelRadius>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1284.1031, 10.094502)
            int ui:nodegraph:node:stackingOrder = 296
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_vector3"
            prepend asset inputs:file.connect = </Root/PixelizeSector.inputs:Image>
            string inputs:filtertype
            prepend float2 inputs:texcoord.connect = </Root/PixelizeSector/Combine2_1.outputs:out>
            string inputs:uaddressmode
            string inputs:vaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1039.8607, -123.182045)
            int ui:nodegraph:node:stackingOrder = 284
        }
    }

    def NodeGraph "PixelizeTriangle" (
        active = true
    )
    {
        asset inputs:Image (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (813.178, -187.06364)
                    int stackingOrderInSubgraph = 1044
                }
            }
        )
        float inputs:PixelCount = 20 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-884.34564, 103.08034)
                    int stackingOrderInSubgraph = 408
                }
            }
        )
        float inputs:PixelRatio = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1094.9308, 47.243546)
                    int stackingOrderInSubgraph = 389
                }
            }
        )
        float2 inputs:PixelScale = (1, 1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1306.9186, -48.498505)
                    int stackingOrderInSubgraph = 414
                }
            }
        )
        float3 outputs:Output (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-249, 111.5)
                    int stackingOrderInSubgraph = 1
                }
            }
        )
        float3 outputs:Output.connect = </Root/PixelizeTriangle/Image.outputs:out>
        float2 ui:nodegraph:node:pos = (124, 211.5)
        int ui:nodegraph:node:stackingOrder = 7
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1313.8053, -61.697353)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 857

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/Combine2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeTriangle.inputs:PixelCount>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-662.2015, -22.962133)
            int ui:nodegraph:node:stackingOrder = 435
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeTriangle.inputs:PixelScale>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-1069.9347, -52.65416)
            int ui:nodegraph:node:stackingOrder = 389
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeTriangle/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/PixelizeTriangle/Divide.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-805.20416, -66.82213)
            int ui:nodegraph:node:stackingOrder = 389
        }

        def Shader "Floor"
        {
            uniform token info:id = "ND_floor_vector2"
            float2 inputs:in.connect = </Root/PixelizeTriangle/Multiply.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-510.80362, -100.542755)
            int ui:nodegraph:node:stackingOrder = 500
        }

        def Shader "TextureCoordinates"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1158.4636, -177.39044)
            int ui:nodegraph:node:stackingOrder = 425
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeTriangle/Separate2.outputs:outy>
            float inputs:in2.connect = </Root/PixelizeTriangle.inputs:PixelRatio>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-933.49396, -21.303349)
            int ui:nodegraph:node:stackingOrder = 418
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeTriangle/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-624.1267, -123.95478)
            int ui:nodegraph:node:stackingOrder = 439
        }

        def Shader "Divide_1"
        {
            uniform token info:id = "ND_divide_vector2"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/Floor.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeTriangle/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-398.65527, -80.48429)
            int ui:nodegraph:node:stackingOrder = 984
        }

        def Scope "Group" (
            kind = "group"
        )
        {
            string ui:group:annotation = "pixelScale"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Multiply_1"]
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_vector2"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/TextureCoordinates.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeTriangle/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-282.1819, -131.14053)
            int ui:nodegraph:node:stackingOrder = 987
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector2"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/Subtract.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeTriangle/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-178.53693, -43.80536)
            int ui:nodegraph:node:stackingOrder = 1032
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_vector3"
            float3 inputs:default
            prepend asset inputs:file.connect = </Root/PixelizeTriangle.inputs:Image>
            string inputs:filtertype
            float2 inputs:texcoord.connect = </Root/PixelizeTriangle/Add.outputs:out>
            string inputs:uaddressmode
            string inputs:vaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (1045.4359, -85.62443)
            int ui:nodegraph:node:stackingOrder = 1041
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2"
            float2 inputs:in1.connect = </Root/PixelizeTriangle/Combine2_1.outputs:out>
            float2 inputs:in2.connect = </Root/PixelizeTriangle/Divide_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (756.6198, -55.950512)
            int ui:nodegraph:node:stackingOrder = 862
        }

        def Shader "Combine2_1"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/PixelizeTriangle/Divide_2.outputs:out>
            float inputs:in2.connect = </Root/PixelizeTriangle/Divide_3.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (591.7476, -147.30052)
            int ui:nodegraph:node:stackingOrder = 860
        }

        def Shader "Separate2_1"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeTriangle/Multiply_2.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-33.4763, -29.700405)
            int ui:nodegraph:node:stackingOrder = 1034
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_float"
            float inputs:in.connect = </Root/PixelizeTriangle/Separate2_1.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (145.1346, -41.48683)
            int ui:nodegraph:node:stackingOrder = 1030
        }

        def Shader "Step"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/PixelizeTriangle/Oneminus.outputs:out>
            float inputs:in.connect = </Root/PixelizeTriangle/Separate2_1.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (254.57448, -201.33336)
            int ui:nodegraph:node:stackingOrder = 982
        }

        def Shader "Step_1"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge.connect = </Root/PixelizeTriangle/Separate2_1.outputs:outx>
            float inputs:in.connect = </Root/PixelizeTriangle/Separate2_1.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (283.05365, 17.31702)
            int ui:nodegraph:node:stackingOrder = 1036
        }

        def Shader "Divide_2"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeTriangle/Step.outputs:out>
            float inputs:in2.connect = </Root/PixelizeTriangle/Separate2_2.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (384.948, -115.08681)
            int ui:nodegraph:node:stackingOrder = 968
        }

        def Shader "Divide_3"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/PixelizeTriangle/Step_1.outputs:out>
            float inputs:in2.connect = </Root/PixelizeTriangle/Separate2_2.outputs:outy>
            float outputs:out
            float2 ui:nodegraph:node:pos = (412.27515, 98.625824)
            int ui:nodegraph:node:stackingOrder = 1038
        }

        def Scope "Group2" (
            kind = "group"
        )
        {
            string ui:group:annotation = "Coord"
            string ui:group:annotationDescription = ""
            string[] ui:group:members = ["p:Divide_1"]
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_vector2FA"
            prepend float2 inputs:in1.connect = </Root/PixelizeTriangle/Multiply_1.outputs:out>
            float inputs:in2 = 2
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-343.56464, 125.587395)
            int ui:nodegraph:node:stackingOrder = 1028
        }

        def Shader "Separate2_2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/PixelizeTriangle/Multiply_5.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-184.77429, 124.25991)
            int ui:nodegraph:node:stackingOrder = 1028
        }
    }
}

